package Lexico_Sintactico_Semantico;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

 






parser code {:  



    public void unrecovered_syntax_error(Symbol s)
    {
    
        System.out.println("Error de Sintaxis grave. Error Desconocido. Compilacion Detenida");
        interfaz.resultado=interfaz.resultado+"Error de Sintaxis grave. Error Desconocido. Compilacion Detenida";
    
    }

    public void syntax_error(Symbol cur_token)
    {
        int linea = ( (Tokens)(cur_token.value) ).getFila();
        int columna = ( (Tokens)(cur_token.value) ).getColumna();
        String mensaje = new String("");
        if(cur_token.sym == 0)
        {
            mensaje = "\nERROR: Error sintactico, no se esperaba el token: (EOF), Linea: "
                        + linea
                        + ", Columna: "
                        + columna
                        + "\n" ;
        }
        else 
        {
            mensaje = "\nERROR: Error sintactico, no se esperaba el token: ("
                        + ( (Tokens)(cur_token.value) ).getIdentificador()
                        + "), Linea: "
                        + linea
                        + ", Columna: "
                        + columna
                        + "\n";
        }
        System.out.println(mensaje);
         interfaz.resultado=interfaz.resultado+mensaje;
    
       
    }
            
:};

action code{:
static String procedure1 = "";  
//********************************Tabla de Simbolos*****************************

static  ArrayList <Integer>llinea = new ArrayList();
static  ArrayList <Integer>lcolumna = new ArrayList();
static Object n1=null,n2=null,n3=null,n4=null;
//******************************************idCuerpo*****************************
static ArrayList idcuerpo = new ArrayList();
static ArrayList prueba = new ArrayList();
static boolean desarrollos = true; 
//********************************In Out*******************************************
static boolean banderaasi = false;
static boolean banderaasi2 = true;

//*************************************Simbolos*******************************************
static ArrayList tipopara = new ArrayList();
static ArrayList nombreid = new ArrayList();
static String tipo_return ="";
static String tipotemp="";
static String paratemp="";
static String metodo="";
static int lineatemp=0;
static int columnatemp=0;
static int dimension =0;
static int dms = 0;
//*********************parametros y funciones ***********************************************
static ArrayList funproc = new ArrayList();
static ArrayList funproctemp = new ArrayList();
static ArrayList funprocid = new ArrayList();
static boolean banderafunproc =false;
static int funprocint =0;
static boolean banderaarr= false;
//**********************Ambito***************************************
     static ArrayList AmbitoPila = new ArrayList();
     static ArrayList AmbitoLista = new ArrayList();
     static String nombreAmbito = "";
     static String ambitoActual = "";
//***************************AmbitoPadre***************************************
     private static ArrayList nombrePadre = new ArrayList();
     private static ArrayList Actual = new ArrayList();
     private static ArrayList siguiente = new ArrayList();
     private static ArrayList siguientetemp = new ArrayList();
     private static String nombreAmbitoPadre = "";
     private static String ambitoPadre1 = "";
//*****************************************Retorno de function *******************************
static ArrayList retornos = new ArrayList();
static boolean ret = false;
static ArrayList compararfun = new ArrayList();
//**************************************comparador de tipos ****************************************
static String comp = "";
static int contarr = 0;
static int lineacomp=0;
static int columnacomp=0;
static ArrayList comparadores = new ArrayList();
static int lineavalor=0;
static int columnavalor=0;
static int minarrx = 0;
static ArrayList pararr = new ArrayList();
//****boolean*********
static ArrayList booleans = new ArrayList();
static ArrayList inimain = new ArrayList();
static boolean exitwhen = false;
static int intmians =0;
static Object comparadorizq = null;
static Object comparadorarr = null; 
static boolean compizq = false;


    
    
  
      
      
   
    public static void Arrayrango(Object izquierdo,ArrayList lista){
            int contador=0;//Contador de la variable
            int contador2=0;//Contador de movimiento en el arraylist lparatemp
            int indiceId2=0;
             
            int indiceId = 0;
            
          
obtenerPrametrosDeFuncionEnArreglo(lista);

            if (verificarSiExisteElemento(((Tokens)izquierdo).getIdentificador()) == true){ //verificar si existe el elemento
               indiceId = obtenerIndice(((Tokens)izquierdo).getIdentificador());
                if (interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("Function") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("procedure") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("integer") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("float") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("boolean") ==false){    
                    if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId).toString())==true){
                        
                      //  JOptionPane.showMessageDialog(null, "----->>>>"+interfaz.ltipo.get(indiceId2).toString()+indiceId2);
                            if (verificarSiExisteElemento(interfaz.ltipo.get(indiceId).toString()) == true){ //verififcar el tipo del arreglo
                                indiceId2 =obtenerIndice(interfaz.ltipo.get(indiceId).toString());
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId2).toString())==true){
                       
                          System.out.println(""+indiceId2+ "     "+interfaz.ltipo.get(indiceId).toString());
                         for(int i =0; i<=interfaz.larreglo.size()-1;i++){
                             if (contador<indiceId2){
                                 if (interfaz.larreglo.get(i).toString().equals("")){
                                     contador++;
                                     contador2++;
                                 }
                                 else if (interfaz.larreglo.get(i).toString().equals("bloque"))
                                 {   
                                     contador2++;
                                 } 
                                 else {
                                        contador++;
                                        while (interfaz.larreglo.get(i).toString().toString().equalsIgnoreCase("bloque")==false)
                                              {
                                                contador2++;
                                                i++;
                                              }
                                        i--;
                                 }
                             }
                             }
                         contador2++;
                             //JOptionPane.showMessageDialog(null, "contador:------>"+contador);
                            // JOptionPane.showMessageDialog(null, "contador2: "+interfaz.larreglo.get(contador2)+" : "+contador2);
                        int numeroParametros =0;
                        int iterador = contador2;
                        while (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("bloque")==false){
                               if (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("")==false){
                               numeroParametros++;
                               }
                               contador2++;
                        }
                        // JOptionPane.showMessageDialog(null, ":------>");
                       //   JOptionPane.showMessageDialog(null, ":------>"+((Tokens) izquierdo).getIdentificador());
                        System.out.println("Numero de rangos encontrados en interfaz.larreglo: "+numeroParametros);  
                        int indiceTemp;
                        ArrayList otra = new ArrayList();
                        otra = dimensionDeArreglo(lista);
                        if (otra!= null){
                      // JOptionPane.showMessageDialog(null, ":------>");
                        //JOptionPane.showMessageDialog(null, ":------>"+otra.size());}
                          if (numeroParametros==4){
                            System.out.println
                                    ("Arreglo de dos dimensiones");
                                     if (otra.size()==2){
                                         for(int i=0;i<=otra.size()-1;i++){
                                           
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          else {    //JOptionPane.showMessageDialog(null,"nooooo"); 
                                                                   // interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valido)\n";        
                                                                   //JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+interfaz.ltiporeturn.get(indiceTemp)+"'\n";  
                                                         }        
                                                     }else {
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                            }
                                             } else{  
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())<=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&&Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                   
                                                  }
                                                  else {
                                                        interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: value not in range of subtype of 'Standar.Integer defined at line'"+((Tokens)otra.get(i)).getFila()+"\n"; 
                                                       interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: 'Constraint_Error' will be raised at run time\n"; 
                                                      //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                  iterador = iterador+2;}
                                             }
                                         }
                                     }else{
                                               interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)izquierdo).getFila()+":"+((Tokens)izquierdo).getColumna()+": too few subscripts in array reference\n";        
                                           // JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}
                               }
                        } else if (numeroParametros==2){
                            System.out.println("Arreglo de una dimension");
                                     if (otra.size()==1){
                                         for(int i=0;i<=otra.size()-1;i++){
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          
                                                          else {
                                                                   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Indice de Matriz invalido )\n";        
                                                               // JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                              }        
                                                     } else {    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no esta al alcance)\n";        
                                                            // JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no existe)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                }
                                             }else{
                                                   //JOptionPane.showMessageDialog(null, "iterador:"+iterador);
                                                //      JOptionPane.showMessageDialog(null, ":------>comparaion"+interfaz.larreglo.get(iterador).toString()); 
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador() ) <= Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&& Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                  }
                                                  else {
                                                          interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valida)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                         //  JOptionPane.showMessageDialog(null, ":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador)).getIdentificador()+":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador() ); 
                                                          //JOptionPane.showMessageDialog(null, ":------>comparaion2");   
                                                  }
                                               }
                                                 iterador = iterador+2;
                                         }
                                     }else{
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no valida)\n";        
                                            //JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}                            
                                }
                            }
                        }else {
                               System.out.println("Rango Erroneo");
                                  interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Rango no valida)\n";        
                                          
                             }
                        

                                    
                                }else {  interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Tipo de Matriz no esta al alcance)\n";        
                                         //JOptionPane.showMessageDialog(null, "El tipo del array no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);}//  
                                }
                                }else{
                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Tipo de Matriz no existe)\n";
                           // JOptionPane.showMessageDialog(null, "El tipo del elemento no existe","Error",JOptionPane.ERROR_MESSAGE);}//cuarto if del tipo 
                            }
                                }else {interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no esta al alcance)\n";
                        //JOptionPane.showMessageDialog(null, "La variable no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);}  //Tercer if  
                    }
                        } else if(interfaz.ldimension.get(indiceId).toString().equals("2") || interfaz.ldimension.get(indiceId).toString().equals("1") ){
                             indiceId2=indiceId;
                            for(int i =0; i<=interfaz.larreglo.size()-1;i++){
                             if (contador<indiceId2){
                                 if (interfaz.larreglo.get(i).toString().equals("")){
                                     contador++;
                                     contador2++;
                                 }
                                 else if (interfaz.larreglo.get(i).toString().equals("bloque"))
                                 {   
                                     contador2++;
                                 } 
                                 else {
                                        contador++;
                                        while (interfaz.larreglo.get(i).toString().toString().equalsIgnoreCase("bloque")==false)
                                              {
                                                contador2++;
                                                i++;
                                              }
                                        i--;
                                 }
                             }
                             }
                         contador2++;
                             //JOptionPane.showMessageDialog(null, "contador:------>"+contador);
                            // JOptionPane.showMessageDialog(null, "contador2: "+interfaz.larreglo.get(contador2)+" : "+contador2);
                        int numeroParametros =0;
                        int iterador = contador2;
                        while (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("bloque")==false){
                               if (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("")==false){
                               numeroParametros++;
                               }
                               contador2++;
                        }
                        // JOptionPane.showMessageDialog(null, ":------>");
                       //   JOptionPane.showMessageDialog(null, ":------>"+((Tokens) izquierdo).getIdentificador());
                        System.out.println("Numero de rangos encontrados en interfaz.larreglo: "+numeroParametros);  
                        int indiceTemp;
                        ArrayList otra = new ArrayList();
                        otra = dimensionDeArreglo(lista);
                        if (otra!= null){
                      // JOptionPane.showMessageDialog(null, ":------>");
                        //JOptionPane.showMessageDialog(null, ":------>"+otra.size());}
                          if (numeroParametros==4){
                            System.out.println
                                    ("Arreglo de dos dimensiones");
                                     if (otra.size()==2){
                                         for(int i=0;i<=otra.size()-1;i++){
                                           
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          else {    //JOptionPane.showMessageDialog(null,"nooooo"); 
                                                                   // interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valido)\n";        
                                                                   //JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+interfaz.ltiporeturn.get(indiceTemp)+"'\n";  
                                                         }        
                                                     }else {
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                            }
                                             } else{  
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())<=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&&Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                   
                                                  }
                                                  else {
                                                        interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: value not in range of subtype of 'Standar.Integer defined at line'"+((Tokens)otra.get(i)).getFila()+"\n"; 
                                                       interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: 'Constraint_Error' will be raised at run time\n"; 
                                                      //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                  iterador = iterador+2;}
                                             }
                                         }
                                     }else{
                                               interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)izquierdo).getFila()+":"+((Tokens)izquierdo).getColumna()+": too few subscripts in array reference\n";        
                                           // JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}
                               }
                        } else if (numeroParametros==2){
                            System.out.println("Arreglo de una dimension");
                                     if (otra.size()==1){
                                         for(int i=0;i<=otra.size()-1;i++){
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          
                                                          else {
                                                                   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Indice de Matriz invalido )\n";        
                                                               // JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                              }        
                                                     } else {    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no esta al alcance)\n";        
                                                            // JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no existe)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                }
                                             }else{
                                                   //JOptionPane.showMessageDialog(null, "iterador:"+iterador);
                                                //      JOptionPane.showMessageDialog(null, ":------>comparaion"+interfaz.larreglo.get(iterador).toString()); 
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador() ) <= Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&& Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                  }
                                                  else {
                                                          interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valida)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                         //  JOptionPane.showMessageDialog(null, ":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador)).getIdentificador()+":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador() ); 
                                                          //JOptionPane.showMessageDialog(null, ":------>comparaion2");   
                                                  }
                                               }
                                                 iterador = iterador+2;
                                         }
                                     }else{
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no valida)\n";        
                                            //JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}                            
                                }
                            }
                        }else {
                               System.out.println("Rango Erroneo");
                                  interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Rango no valida)\n";        
                                          
                             }
                        
                        }
                                
                                else{interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (El Identificador no es una Matriz)\n";
               // JOptionPane.showMessageDialog(null, "La variable no es un array","Error",JOptionPane.ERROR_MESSAGE);}  //segundo if   
                 }
                }else{interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no existe)\n";
            //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);}   //primer if
            
            }
    }




     



    private static void obtenerPrametrosDeFuncionEnArreglo(ArrayList lista)
    {
        int contadorFunciones = 0;
        int tope_izquierda = 0;
       
        Object o_funcionAnterior=null;
        for (int k = 0; k < lista.size(); k++ )
        {
            if ( lista.get(k).toString().equals("bloque") )
            {                
                for (int i = k; i >= tope_izquierda; i--)
                {
                    String funcionAnterior = "";
                    if ( lista.get(i).toString().equals("11a") )
                    {                        
                        contadorFunciones++;
                        ArrayList parametrosFuncion = new ArrayList();
                        
                        Object idFuncion = lista.get(i + 1); // Obtener el ID de la funcion actual
                       
                        // Recorrer los parametros (si hay) de la funcion y agregarlos a un nuevo arraylist)
                        for ( int j = i + 3; j < lista.size(); j++ )
                        {
                            // Si el elemento actual no es un parametros, salir
                            if ( lista.get(j).toString().equals("11a") || lista.get(j).toString().equals("1a") || lista.get(j).toString().equals("0a") || lista.get(j).toString().equals("bloque"))
                                break;
                            else
                                parametrosFuncion.add(lista.get(j)); // Si no, agregar parametros
                        } // 0a for

                        // Buscar retorno si existe
                        for (int j = (i+1); j < k; j++ )
                            if ( lista.get(j).toString().equals("11a") )
                            {
                                 funcionAnterior = lista.get(j + 1).toString();
                                 o_funcionAnterior = lista.get(j + 1);
                                 break;                                
                            }

                        if ( !funcionAnterior.equals("") )
                            parametrosFuncion.add(o_funcionAnterior);
                        
                        verificarParametros(idFuncion, parametrosFuncion); // AQUI ES EL LLAMADA A LA FUNCION
                    } // 0a if
                } // 0a de for externo
                tope_izquierda = k;
            }
        }
        
    } // 0a de metodo



 private static ArrayList dimensionDeArreglo(ArrayList lista)            
    {   //JOptionPane.showMessageDialog(null,"entro");
            // Primero que todo revisar cuantos bloques hay
            int contadorBloques = 0;
           

            for ( int i = 0; i <= lista.size()-1; i++ )
            {
                if ( lista.get(i).toString().equalsIgnoreCase("bloque") )
                    contadorBloques++;
                             
            }
            if ( contadorBloques > 2 )
                {
                    System.out.println("Error. Mas de 2 dimensiones");
                    return null;
                }   
        //    JOptionPane.showMessageDialog(null,"entro");
            ArrayList resultado = new ArrayList();
               
            if(contadorBloques ==1){
            // Si son dimensiones con Numeros o IDs
            if ( !lista.get(0).toString().equalsIgnoreCase("11a") && !lista.get(0).toString().equalsIgnoreCase("1a") && !lista.get(0).toString().equalsIgnoreCase("bloque") )
              {  resultado.add(lista.get(0));
                return resultado;
                }else{
                resultado.add(lista.get(1));
               return resultado;}
        }
            
            else{
             if ( !lista.get(0).toString().equalsIgnoreCase("11a") && !lista.get(0).toString().equalsIgnoreCase("1a") && !lista.get(0).toString().equalsIgnoreCase("bloque") )
             {  resultado.add(lista.get(0));}

            if ( !lista.get(2).toString().equalsIgnoreCase("11a") && !lista.get(2).toString().equalsIgnoreCase("1a") && !lista.get(2).toString().equalsIgnoreCase("bloque") )
            { resultado.add(lista.get(2));}
            // JOptionPane.showMessageDialog(null,"entro");               
            
            // Si es con funciones
            // Recorrer cada bloque
            boolean agregar = true;
            for (int i = 0; i <= lista.size()-1; i++ )
            {
                if ( lista.get(i).toString().equalsIgnoreCase("11a") && agregar == true)
                {
                    resultado.add(lista.get(i + 1));
                    agregar = false;
                }
                if ( lista.get(i).toString().equalsIgnoreCase("bloque") )
                    agregar = true;
            } // fin recorrido de bloques

            return resultado;
            }

    }



  public static boolean isInteger( String input )   
  {   
   try  
   {   
      Integer.parseInt( input );   
      return true;   
   }   
   catch( Exception e )   
   {   
      return false;   
   }   
}  
             
     
   
   public static void comprobarFunctionProcedure(String comparador){
        if (verificarSiExisteElemento(comparador) == true){
         int indice = obtenerIndice(comparador);
                                                        
            if (interfaz.ltipo.get(indice).toString().equalsIgnoreCase("procedure") || interfaz.ltipo.get(indice).toString().equalsIgnoreCase("function")){
                for (int i = 0;i<=interfaz.lnombre.size()-1;i++)
                {  
                  if (indice!=i){
                    if (interfaz.lnombre.get(indice).toString().equals(interfaz.lnombre.get(i).toString())){
                                                                       
                        if (interfaz.lambito.get(indice).toString().equalsIgnoreCase(interfaz.lambito.get(i).toString())){
                           //Aqui empiezo a buscar los punteros del indice
                            int contador=0;//Contador de la variable
                            int contador2=0;//Contador de movimiento en el arraylist lparatemp
                                for(int j =0; j<=interfaz.ltipopar.size();j++){
                                    if (contador<indice){
                                        if (interfaz.ltipopar.get(j).toString().equals("")){
                                            contador++;
                                            contador2++;
                                        }
                                        else if (interfaz.ltipopar.get(j).toString().equals("no hay")){
                                                contador++;
                                                contador2++;

                                            }
                                        else if (interfaz.ltipopar.get(j).toString().equals("bloque"))
                                        {   
                                            contador2++;
                                        } 
                                        else {
                                                contador++;
                                                while (interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("boolean"))
                                                    {
                                                        contador2++;
                                                        j++;
                                                    }
                                                j--;
                                            }
                                       }
                              }
                            //cuento el numero de parametros del primero
                           int numeroParametros = 0;
                           int iterador = contador2 + 1;
                           int iterador1 = iterador;
                        
                           while (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("bloque")==false){
                            
                               if (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("boolean")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("Function")){
                                   numeroParametros++;
                                  }
                                  iterador++;
                                }
                           
                            //Aqui empiezo a buscar los punteros del indice    
                            int contador11=0;//Contador de la variable
                            int contador22=0;//Contador de movimiento en el arraylist lparatemp
                                for(int j =0; j<=interfaz.ltipopar.size();j++){
                                    if (contador11<i){
                                        if (interfaz.ltipopar.get(j).toString().equals("")){
                                            contador11++;
                                            contador22++;
                                        }
                                        else if (interfaz.ltipopar.get(j).toString().equals("no hay")){
                                                contador11++;
                                                contador22++;

                                            }
                                        else if (interfaz.ltipopar.get(j).toString().equals("bloque"))
                                        {   
                                            contador22++;
                                        } 
                                        else {
                                                contador11++;
                                                while (interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("boolean"))
                                                    {
                                                        contador22++;
                                                        j++;
                                                    }
                                                j--;
                                            }
                                       }
                              }////// 
                            //cuento el numero de parametros del segundo
                           int numeroParametros2 = 0;
                           int iterador2 = contador22 + 1;
                           int iterador22 = iterador2;
                           
                           while (interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("bloque")==false){
                            
                               if (interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("boolean")||interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("Function")){
                                   numeroParametros2++;
                                  }
                                  iterador2++;
                                }
                           int igualdad = 0;
                                               //JOptionPane.showMessageDialog(null, ""+iterador1);
                                               //JOptionPane.showMessageDialog(null, ""+iterador22);
                           if (numeroParametros==numeroParametros2){
                               for (int o =1;o<=numeroParametros;o++){
                                     if (interfaz.ltipopar.get(iterador1).toString().equalsIgnoreCase(interfaz.ltipopar.get(iterador22).toString())){
                                             igualdad++;

                                     }
                                     iterador1++;
                                     iterador22++;
                                   }
                               if (igualdad==numeroParametros2)
                               {
                                  // JOptionPane.showMessageDialog(null, "Variables Identicas");
                                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea: "+lineatemp+", Columna"+columnatemp+" (Variables identicas)\n";        
                     
                                }
                           }
                                                        
                        }
                        
                    }
                }
                }
            }
            else {JOptionPane.showMessageDialog(null, "LA VARIABLE NO ES NI UN PROCEDURE NI UN FUNCTION","Error",JOptionPane.ERROR_MESSAGE);}   
         
        }
        else { //No existe el operador de la izquierda x = <---
              JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);        ;
             }
    }



  public static void compararTipo(Object comparador, ArrayList lista){
      

//JOptionPane.showMessageDialog(null,"ambito actual es ... "+ambitoActual);
       

if (verificarSiExisteElemento(((Tokens) comparador).getIdentificador()) == true){ //Verifica si existe el operador izquierdo
           
            int indiceIzquierdo = obtenerIndice(((Tokens) comparador).getIdentificador());
            int indiceLista;
            int indiceListatemp;
         
             
                               // JOptionPane.showMessageDialog(null,"comparador ..."+((Tokens) comparador).getIdentificador());
                                  if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceIzquierdo).toString())==true){
                                        }else{System.out.println("ERROR LA DE LA IZQUIERDA NO ESTA AL ALCANCE");
                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)comparador).getFila()+":"+((Tokens)comparador).getColumna()+": '"+((Tokens) comparador).getIdentificador().toString()+"' is undefined\n";        
                                          }
                            
                        if(interfaz.ltipo.get(indiceIzquierdo).toString().equals("Procedure") || interfaz.ltipo.get(indiceIzquierdo).toString().equals("Function")){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                     interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens) comparador).getFila()+":"+((Tokens) comparador).getColumna()+": left hand side of assignment must be a variable\n";        
                                             }else{
                             if(interfaz.lparametro.get(indiceIzquierdo).toString().equals("In") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens) comparador).getFila()+", Columna"+((Tokens) comparador).getColumna()+" (La variable es de tipo In)\n";        
                                        }else if(interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("Procedure")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("function")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("boolean")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("float")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("integer")==false)
                                        {   
                                          if ( verificarSiExisteElemento(interfaz.ltipo.get(indiceIzquierdo).toString())==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)comparador).getFila()+", Columna"+((Tokens)comparador).getColumna()+" (El tipo no exitse)\n";        
                     
                                        }else{
                                            
                                            indiceIzquierdo = obtenerIndice(interfaz.ltipo.get(indiceIzquierdo).toString());
                                                    
                                                }
                                        }

                                        
                     for (int i=0;i<=lista.size()-1;i++){

 //  JOptionPane.showMessageDialog(null,""+lista.get(i).toString());
                         if(lista.get(i).toString().equalsIgnoreCase("Integer") || lista.get(i).toString().equalsIgnoreCase("Float") || lista.get(i).toString().equalsIgnoreCase("Boolean")){
                        // JOptionPane.showMessageDialog(null,"entro");
                             if(interfaz.ltipo.get(indiceIzquierdo).equals("Integer") && !(lista.get(i).toString().equals("Integer"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                      
                             }
                           if(interfaz.ltipo.get(indiceIzquierdo).equals("Float") && !(lista.get(i).toString().equals("Float"))){
                                   interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Float'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                            }
                           if(interfaz.ltipo.get(indiceIzquierdo).equals("Boolean") && !(lista.get(i).toString().equals("Boolean"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Boolean'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                             }
                         
                         }
                          else{  if(verificarSiExisteElemento(((Tokens) lista.get(i)).getIdentificador())==true){
                                    indiceLista = obtenerIndice(((Tokens)lista.get(i)).getIdentificador());
                                            
                                 if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceLista).toString())==true){

                                            //System.out.println("La variable: "+interfaz.lnombre.get(indiceLista)+" --> SI esta al alcance");
                                            if (interfaz.ltipo.get(indiceLista).toString().equals("Function")){
                                                 if(interfaz.ltipo.get(indiceLista).toString().equals("Function") && !(interfaz.ltiporeturn.get(indiceLista).toString().equals(interfaz.ltipo.get(indiceIzquierdo)))    )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Retorno con distinto tipo)\n";        
                                                        }
                                            }
                                                
                                                 if((!interfaz.ltipo.get(indiceLista).toString().equals("Function") && !interfaz.ltipo.get(indiceLista).toString().equals("Integer") && !interfaz.ltipo.get(indiceLista).toString().equals("Float") && !interfaz.ltipo.get(indiceLista).toString().equals("Boolean") && !interfaz.ltipo.get(indiceLista).toString().equals("Procedure")))    
                                                        {
                                                        if(verificarSiExisteElemento(((Tokens) comparador).getIdentificador())==true){
                                                                   indiceListatemp = obtenerIndice(interfaz.ltipo.get(indiceLista).toString());
                                            
                                                          if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceListatemp).toString())==true){
                                                            if(!(interfaz.ltipo.get(indiceIzquierdo).toString().equals(interfaz.ltipo.get(indiceListatemp))) ){
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Arreglo con distinto tipo)\n";        
                                                        }
                                                    }else{ interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)lista.get(i)).getFila()+":"+((Tokens)lista.get(i)).getColumna()+": "+((Tokens) comparador).getIdentificador().toString()+" is undefined'\n";        
                                                        }
                                                 }
                                                }
                                                else if(!interfaz.ltipo.get(indiceLista).toString().equals("Function") && !(interfaz.ltipo.get(indiceIzquierdo).toString().equals(interfaz.ltipo.get(indiceLista)))  )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Variable con distinto tipo )\n";        
                                                        }


                                                    
                                            
                                               if(interfaz.lparametro.get(indiceLista).toString().equals("Out") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceLista)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                        //   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (La variable es de tipo Out)\n";        
                                        }
                                                   


                                 }else{
                                                   System.out.println("EEROR LA VARIABLE: "+interfaz.lnombre.get(indiceLista)+" --> NO ESTA AL ALCANCE\n");
                                      interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)lista.get(i)).getFila()+":"+((Tokens)lista.get(i)).getColumna()+"'"+((Tokens) lista.get(i)).getIdentificador().toString()+"' is undefined\n";        
                                         }

                            
                            }else{
                                     interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens) lista.get(i)).getFila()+":"+((Tokens) lista.get(i)).getColumna()+": '"+((Tokens) lista.get(i)).getIdentificador().toString()+"' is undefined\n";        
                           //     System.out.print("ERROR! LA VARIABLE  "+((Tokens) comparador).getIdentificador()+" NO HA SIDO DECLARADA (NO ESTA EN interfaz.lnombre)\n");

                            }   
                        }
                  
            }    
        
}
        }
        else { //No existe el operador de la izquierda x = <---
              System.out.print("El elemento de la izquierda no esta en lista interfaz.lnombre\n");
             }
              comparadores.clear();
    }



    public static boolean verificarSiExisteElemento(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())){
                return true;
            }
        }
        return false;
    }
      public static boolean verificarSiExisteElementoVariable(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())&& interfaz.ldimension.get(i).toString().equals("0")  ){
              //  JOptionPane.showMessageDialog(null, elemento+"---->"+interfaz.ldimension.get(i));
                    return true;
            }
        }
        return false;
    }

                 public static boolean verificarSiExisteElementoProcedimiento(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())&&(interfaz.ltipo.get(i).toString().equalsIgnoreCase("Procedure")==false||interfaz.ltipo.get(i).toString().equalsIgnoreCase("Function")==false) && (interfaz.ldimension.get(i).toString().equals("1") || interfaz.ldimension.get(i).toString().equals("2"))  ){
                return true;
            }
        }
        return false;
    }
    public static int obtenerIndice(String elemento){
         int indice = 0;
         boolean bandera = false;
        for (int i = 0;i<=interfaz.lnombre.size()-1;i++)
        {  
            if (elemento.equals(interfaz.lnombre.get(i).toString())&&bandera==false){
                indice = i;
                bandera = true;
            }
            else if (elemento.equals(interfaz.lnombre.get(i).toString())&&alcanceAmbito(ambitoActual,interfaz.lambito.get(i).toString())==true&&bandera==true&&alcanceAmbito(interfaz.lambito.get(i).toString(),interfaz.lambito.get(indice).toString())==true){
                    indice = i;
            }
            else{}
        }
        System.out.print("Variable:"+interfaz.lnombre.get(indice).toString()+"  Ambito: "+interfaz.lambito.get(indice).toString()+"\n");
        return indice;
  }
    
        public static boolean alcanceAmbito(String grande, String pequeno)
        {//JOptionPane.showMessageDialog(null,"grande es : "+grande+"    pequeño es :"+pequeno);
            if (grande.contains(pequeno) || grande.equals(pequeno)){
               // JOptionPane.showMessageDialog(null,"grande o igual");
                    return true;
            }
           //     JOptionPane.showMessageDialog(null,"NO ES");
            return false;
         }


public static void compararBooleans(Object id){
  int indiceLista;
  
      if(verificarSiExisteElemento(((Tokens)id).getIdentificador())==true){
                 indiceLista = obtenerIndice(((Tokens)id).getIdentificador());
                 if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceLista).toString())==true){
                       if(interfaz.ltipo.get(indiceLista).toString().equals("Procedure") ){
                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens) id).getColumna()+" (La variable no puede ser Procedure)\n";                                             
                        }  
                        else if (interfaz.ltipo.get(indiceLista).toString().equalsIgnoreCase("Function")){
                            
                             if (interfaz.ltiporeturn.get(indiceLista).toString().equalsIgnoreCase("boolean")){

                                                        }
                             else {  
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Retorno distinto)\n";        
                                  }
                          }
                        else if (!interfaz.ltipo.get(indiceLista).toString().equalsIgnoreCase("boolean") && !interfaz.ldimension.get(indiceLista).toString().equals("1") && !interfaz.ldimension.get(indiceLista).toString().equals("2") ){
                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Tipo de Variable Incorrecto)\n";        
                                
                        } else if((!interfaz.ltipo.get(indiceLista).toString().equals("Function") && !interfaz.ltipo.get(indiceLista).toString().equals("Integer") && !interfaz.ltipo.get(indiceLista).toString().equals("Float") && !interfaz.ltipo.get(indiceLista).toString().equals("Boolean") && !interfaz.ltipo.get(indiceLista).toString().equals("Procedure")))    
                                    {
                                                        if(verificarSiExisteElemento(((Tokens) id).getIdentificador())==true){
                                                               int    indiceListatemp = obtenerIndice(interfaz.ltipo.get(indiceLista).toString());
                                            
                                                          if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceListatemp).toString())==true){
                                                            if(!((interfaz.ltipo.get(indiceListatemp)).equals("Boolean")) ){
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Arreglo con distinto tipo)\n";        
                                                        }
                                                    }else{ interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)id).getFila()+":"+((Tokens)id).getColumna()+": "+((Tokens) id).getIdentificador().toString()+" is undefined'\n";        
                                                        }
                                                 }
                                   }
                        }
                     
                 else{   
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                     }
                                    
        }
        else { //No existe el operador de la izquierda x = <---
              System.out.print("El elemento de la izquierda no esta en lista interfaz.lnombre\n");
             }
     
}


public static void compararRetorno(ArrayList funciones, ArrayList lista){

Object comparador = funciones.get(funciones.size()-1);
//JOptionPane.showMessageDialog(null,"funciones ... "+((Tokens)comparador).getIdentificador());       

if (verificarSiExisteElemento(((Tokens) comparador).getIdentificador()) == true){ //Verifica si existe el operador izquierdo
           
            int indiceIzquierdo = obtenerIndice(((Tokens) comparador).getIdentificador());
                    for(int k =0;k<interfaz.lnombre.size();k++){
                        if(interfaz.lnombre.get(k).equals(((Tokens) comparador).getIdentificador())){
                        indiceIzquierdo=k;}
                        }
            int indiceLista;
         
             
                           //     JOptionPane.showMessageDialog(null,"comparador ..."+((Tokens) comparador).getIdentificador());
                                  if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceIzquierdo).toString())==true){
                                        }else{System.out.println("ERROR LA DE LA IZQUIERDA NO ESTA AL ALCANCE");
                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)comparador).getFila()+", Columna"+((Tokens)comparador).getColumna()+" (Variable no esta al alcance)\n";        
                            }
                            
                        if(interfaz.ltipo.get(indiceIzquierdo).toString().equals("Procedure") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens) comparador).getFila()+", Columna"+((Tokens) comparador).getColumna()+" (La variable no puede ser Procedure)\n";        
                                        }else{
                             if(interfaz.lparametro.get(indiceIzquierdo).toString().equals("In") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens) comparador).getFila()+", Columna"+((Tokens) comparador).getColumna()+" (La variable es de tipo In)\n";        
                                        }else if(interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("Procedure")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("function")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("boolean")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("float")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("integer")==false)
                                        {   
                                          if ( verificarSiExisteElemento(interfaz.ltipo.get(indiceIzquierdo).toString())==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)comparador).getFila()+", Columna"+((Tokens)comparador).getColumna()+" (El tipo no exitse)\n";        
                     
                                        }else{
                                            
                                            indiceIzquierdo = obtenerIndice(interfaz.ltipo.get(indiceIzquierdo).toString());
                                                    
                                        }
                                        }
                        }
 

if(interfaz.ltipo.get(indiceIzquierdo).toString().equals("Function")){



   for (int i=0;i<=lista.size()-1;i++){
       
     
       
 //  JOptionPane.showMessageDialog(null,""+lista.get(i).toString());
                         if(lista.get(i).toString().equalsIgnoreCase("Integer") || lista.get(i).toString().equalsIgnoreCase("Float") || lista.get(i).toString().equalsIgnoreCase("Boolean")){
                        // JOptionPane.showMessageDialog(null,"entro");
                             if(interfaz.ltiporeturn.get(indiceIzquierdo).equals("Integer") && !(lista.get(i).toString().equals("Integer"))){
                                   interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";  
                                                       
                             }
                           if(interfaz.ltiporeturn.get(indiceIzquierdo).equals("Float") && !(lista.get(i).toString().equals("Float"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Float'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                                                        
                             }
                           if(interfaz.ltiporeturn.get(indiceIzquierdo).equals("Boolean") && !(lista.get(i).toString().equals("Boolean"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Boolean'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                                                        
                             }
                         
                         }
                          else{  if(verificarSiExisteElemento(((Tokens) comparador).getIdentificador())==true){
                                    indiceLista = obtenerIndice(((Tokens)lista.get(i)).getIdentificador());
                                            
                                 if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceLista).toString())==true){

                                            //System.out.println("La variable: "+interfaz.lnombre.get(indiceLista)+" --> SI esta al alcance");
                                            if (interfaz.ltipo.get(indiceLista).toString().equals("Function")){
                                                 if(interfaz.ltipo.get(indiceLista).toString().equals("Function") && !(interfaz.ltiporeturn.get(indiceLista).toString().equals(interfaz.ltiporeturn.get(indiceIzquierdo)))    )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar."+interfaz.ltiporeturn.get(indiceIzquierdo).toString()+"'\n";        
                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+interfaz.ltiporeturn.get(indiceLista).toString()+"'\n";                                                         
                                                        }
                                            }

                                                if(!interfaz.ltipo.get(indiceLista).toString().equals("Function") && (!interfaz.ltiporeturn.get(indiceIzquierdo).toString().equals(interfaz.ltipo.get(indiceLista)))  )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Variable con distinto tipo)\n";        
                                                        }


                                                    
                                            
                                               if(interfaz.lparametro.get(indiceLista).toString().equals("Out") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceLista)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           //interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (La variable es de tipo Out)\n";        
                                        }
                                                   


                                 }else{
                                                   System.out.println("EEROR LA VARIABLE: "+interfaz.lnombre.get(indiceLista)+" --> NO ESTA AL ALCANCE\n");
                                     interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Variable no esta al alcance)\n";        
                                          }

                            
                            }else{

                                System.out.print("ERROR! LA VARIABLE  "+((Tokens) comparador).getIdentificador()+" NO HA SIDO DECLARADA (NO ESTA EN interfaz.lnombre)\n");

                            }   
                        }
       
                            
                        }
                  












        }
                
    }

//funciones.remove(funciones.size()-1);
}

public static void VerificarParametrosGrande(ArrayList lista1, ArrayList lista2){
        int ultimoInicio =0; 
        Object temp = null;
        ArrayList listaTemp = new ArrayList();
        
       System.out.println("-> Elementos  de lista1:");
                        for (int i = 0; i<= lista1.size()-1;i++){
                            System.out.println(""+lista1.get(i).toString());
                            }
                System.out.println("-> Elementos  de lista2:");
                        for (int i = 0; i<= lista2.size()-1;i++){
                            System.out.println(""+lista2.get(i).toString());
                            }
               System.out.println("********************--------********************");


  do{
            for(int i = 0;i<=lista2.size()-1;i++){
                if (lista2.get(i).toString().equalsIgnoreCase("1a")){
                    ultimoInicio = i;
                }
            }
            if (lista2.get(ultimoInicio+1).toString().equalsIgnoreCase("0a")){
                listaTemp.add("no hay");
                temp = lista1.get(lista1.size()-1);
                verificarParametros(temp,listaTemp);
                lista2.remove(ultimoInicio+1);
                lista2.remove(ultimoInicio); 
                lista1.remove(lista1.size()-1);
            }
            else{
                while (lista2.get(ultimoInicio).toString().equalsIgnoreCase("0a")==false){
                        if (lista2.get(ultimoInicio).toString().equalsIgnoreCase("1a")){
                            lista2.remove(ultimoInicio);
                        }else{
                            listaTemp.add(lista2.get(ultimoInicio));
                            lista2.remove(ultimoInicio);
                            
                        }
                    }
                    temp = lista1.get(lista1.size()-1);
                    verificarParametros(temp,listaTemp);
                    lista1.remove(lista1.size()-1);
                    lista2.remove(ultimoInicio);
            }
                 System.out.println("Nuevo Tamano de la lista2: "+lista2.size()+"\n");
                System.out.println("-> Elementos restantes de lista2:");
                        for (int i = 0; i<= lista2.size()-1;i++){
                            System.out.println(""+lista2.get(i).toString());
                            }
                System.out.println("-> Elementos restantes de lista1:");
                        for (int i = 0; i<= lista1.size()-1;i++){
                            System.out.println(""+lista1.get(i).toString());
                            }
                
                 listaTemp.clear();
                }while(lista2.isEmpty()==false && lista1.isEmpty()==false);
        System.out.println("********************************************************************");
    }
//*********************************variable no declarada***********************************************
public static void cuerpo()
{
        ArrayList prueba = new ArrayList();
       for (int i=0; i<=idcuerpo.size()-1;i++){
             prueba.add(((Tokens) idcuerpo.get(i)).getIdentificador());
       }
    
       ArrayList idcuerpotemp = interfaz.verificarVariable(prueba,interfaz.lnombre);

               if(!idcuerpotemp.isEmpty()){
           System.out.println("******************************************************************");
           for (int i=0;i<=idcuerpotemp.size()-1;i++){
               for(int j = 0; j<=idcuerpo.size()-1;j++){
                   if (idcuerpotemp.get(i).equals(((Tokens) idcuerpo.get(j)).getIdentificador()))
                        { //interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)idcuerpo.get(j)).getFila()+", Columna"+((Tokens)idcuerpo.get(j)).getColumna()+" (Variables no declarada)\n";        
                        idcuerpo.remove(j);
                          }
               } 
           }
           
       }
    }
//*****************************Funcion Ambito Padre *******************************************
public static void ambitoPadre(String nombreToken)
{      
          if (Actual.size()==0){
              nombrePadre.add(nombreToken);
              ambitoPadre1 = ambitoPadre1 + nombrePadre.get(nombrePadre.size()-1);
              siguiente.add(ambitoPadre1);
              Actual.add(ambitoPadre1);
              System.out.println("Token "+nombrePadre.get(nombrePadre.size()-1)+"   Ambito: "+ambitoPadre1);
          }
          else{
            
                   nombreAmbitoPadre = nombreToken;
                   
                            
                            nombrePadre.add(nombreAmbitoPadre);
                            Actual.add(siguiente.get(siguiente.size()-1));
                            siguiente.add(siguiente.get(siguiente.size()-1)+"."+nombreAmbitoPadre);
                            siguientetemp.add(siguiente.get(siguiente.size()-1));
                            ambitoPadre1 = Actual.get(Actual.size()-1).toString();
                            System.out.println("Token "+nombrePadre.get(nombrePadre.size()-1)+"   Ambito: "+ambitoPadre1);                      
  
         }
        
 }  
public static void BeginPadre()
    {
            siguiente.remove(siguiente.size()-1);
            System.out.print("\n"+siguiente.get(siguiente.size()-1)+"\n");
    }
        
        
        
    public static boolean verificarSiExistePadre(String ambito)
{
        for (int i =siguientetemp.size()-1;i>=0;i--)
        {
            if (siguientetemp.get(i).equals(ambito))
            {
                return true;
            }
            
        }
        return false;
}

//***************************************Ambito Hijas********************************************
public void getambito(String nombre)
{

                 if (AmbitoPila.size()==0){
                              ambitoActual = ambitoActual + nombre;
                              AmbitoLista.add(ambitoActual);
                              AmbitoPila.add(ambitoActual);
                        //JOptionPane.showMessageDialog(null,"entro");
                          }
                else {

                           if (verificarSiExiste(ambitoActual +"." +nombre)==true){
                              // interfaz.resultado="Procedure o Function Dupliada2"; 
                                    ambitoActual = ambitoActual +"." +nombre;
                                    AmbitoLista.add(ambitoActual);
                                    AmbitoPila.add(ambitoActual);
                                }
                           else{
                                    ambitoActual = ambitoActual +"." +nombre;
                                    AmbitoLista.add(ambitoActual);
                                    AmbitoPila.add(ambitoActual);
                            //JOptionPane.showMessageDialog(null,"entro");
                                   }
               }

 }

public void begin()
{
            if(!AmbitoPila.isEmpty()){
            //JOptionPane.showMessageDiialog(null,"salio");
                AmbitoPila.remove(AmbitoPila.size()-1);
                ambitoActual = AmbitoPila.get(AmbitoPila.size()-1).toString();}
                       }
            public static boolean verificarSiExiste(String ambito){
                    for (int i =AmbitoLista.size()-1;i>=0;i--)
                    {
                        if (AmbitoLista.get(i).equals(ambito))
                        {
                            return true;
                        }

                    }
                    return false;
}
          public static void variableDuplicada(Object id)
        {
            int indiceId = obtenerIndice(((Tokens) id).getIdentificador());
           // JOptionPane.showMessageDialog(null,"entro--->"+((Tokens) id).getIdentificador());
            
                for (int i = 0;i<=interfaz.lambito.size()-1;i++){
                    if (interfaz.lambito.get(i).toString().equals(interfaz.lambito.get(indiceId))&&indiceId!=i&&interfaz.lnombre.get(indiceId).equals(interfaz.lnombre.get(i)))
                    { 
                    //JOptionPane.showMessageDialog(null,"entro a if ");
                  
     interfaz.resultado=interfaz.resultado+("\nError Semantico en la Linea "+((Tokens) id).getFila()+", Columna "+((Tokens) id).getColumna()+" (Variable duplicada)\n");                   
                                  System.out.println("Variable Repetida: "+interfaz.lnombre.get(i)+" con "+interfaz.lnombre.get(indiceId)+"\n");
                    }
                }
         }  

 
public static void verificarParametros(Object id, ArrayList otraLista){
      System.out.println("\n***************Lo que se manda al Metodo ***************************");
        System.out.println("-> Elemento izquierdo: "+((Tokens)id).getIdentificador());
        System.out.println("\n-> Otra Lista :");
        for (int i = 0; i<= otraLista.size()-1;i++){
            System.out.println("otrlista"+i+" : "+otraLista.get(i).toString());
        }
        System.out.println("********************************************************************");
   
        
      // for(int i =0 ; i<otraLista.size();i++){
         //  JOptionPane.showMessageDialog(null,  ((Tokens)otraLista.get(i)).getIdentificador());
       //}
       
            //  JOptionPane.showMessageDialog(null,otraLista.size());
                        
      
      
      
        int contador=0;//Contador de la variable
        int contador2=0;//Contador de movimiento en el arraylist lparatemp
        int iterador = 0;
        if (verificarSiExisteElemento( ((Tokens)id).getIdentificador())==true){//Verificar  si existe el elemento 
            
            int indice = obtenerIndice(((Tokens)id).getIdentificador()); //Se busca el indice y se obtiene el puntero
                    System.out.println("-> Elemento izquierdo AMBITO: "+indice);
            if(!interfaz.ldimension.get(indice).toString().equals("1") || interfaz.ldimension.get(indice).toString().equals("2")){
                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indice).toString())==true){ //Se verifica el alcance con el acance actual
                    for (int k=0;k<=interfaz.ltipopar.size()-1;k++)
                        {
                         System.out.println(""+k+"  "+interfaz.ltipopar.get(k));
                    }
                    if (interfaz.ltipo.get(indice).toString().equalsIgnoreCase("procedure") || interfaz.ltipo.get(indice).toString().equalsIgnoreCase("function")){ // SI es un procedure y esta al alcance
                      //********************************************************************************************************************************  
                      //JOptionPane.showMessageDialog(null,""+indice);
                         for(int i =0; i<=interfaz.ltipopar.size()-1;i++){
                             
                             if (contador<indice){
                                 if (interfaz.ltipopar.get(i).toString().equals("")){
                                     contador++;
                                     contador2++;
                                 }
                                 else if (interfaz.ltipopar.get(i).toString().equals("no hay")){
                                         contador++;
                                         contador2++;
                                         
                                     }
                                     else if (interfaz.ltipopar.get(i).toString().equals("no tiene")){
                                         contador++;
                                         contador2++;
                                         
                                     }
                                 else if (interfaz.ltipopar.get(i).toString().equals("bloque"))
                                 {   
                                     contador2++;
                                 } 
                                 else {
                                        contador++;
                                        while (interfaz.ltipopar.get(i).toString().toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(i).toString().toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(i).toString().toString().equalsIgnoreCase("boolean"))
                                              {
                                                contador2++;
                                                i++;
                                              }
                                        i--;
                                 }
   
                             }
                             }
                         
                             //JOptionPane.showMessageDialog(null, "contador: "+contador);
                             //JOptionPane.showMessageDialog(null, "contador 2:    "+contador2);
                      //JOptionPane.showMessageDialog(null,"iterador :"+iterador + "con interfaz.lnombre: "+ interfaz.lnombre.get(indice)+"indice :"+indice)  ;                     
                        
                        
       
                    
                        int numeroParametros = 0;
                        iterador = contador2 + 1;
                        
                        int contador3 = iterador;
                        
                        
                        while (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("bloque")==false){
                          //   JOptionPane.showMessageDialog(null, "parametros: "+numeroParametros);
                              if (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("boolean")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("Function")){
                                   numeroParametros++;
                                 }
                              
                              iterador++;
                        }
                       // JOptionPane.showMessageDialog(null, "parametros: "+numeroParametros);
                        
                       // JOptionPane.showMessageDialog(null,numeroParametros+" otralista: "+otraLista.get(0).toString());
                        if(numeroParametros!=0 && otraLista.get(0).toString().equals("0")){
                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" ( No tienen los mismos parametros )\n";        
                            } else if (numeroParametros==0 && otraLista.get(0).toString().equals("0")){ }//no hacer nada     
                      else if (numeroParametros == otraLista.size() && !otraLista.get(0).toString().equals("0")){
                           //JOptionPane.showMessageDialog(null, "IGUAL NUMERO DE PARAMETROS");
                        
                        
                            //Se comparan los tipos de la otraLista
                            for(int i = 0;i<=otraLista.size()-1;i++){            
                                   if(otraLista.get(i).toString().equalsIgnoreCase("Integer") || otraLista.get(i).toString().equalsIgnoreCase("Float") || otraLista.get(i).toString().equalsIgnoreCase("Boolean")){
                                            if(interfaz.ltipopar.get(contador3).equals("Integer") && !(otraLista.get(i).toString().equals("Integer"))){
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Universal."+otraLista.get(i).toString()+"'\n";   
                                             }
                                            if(interfaz.ltipopar.get(contador3).equals("Float") && !(otraLista.get(i).toString().equals("Float"))){
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Float'\n";
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Universal."+otraLista.get(i).toString()+"'\n";  
                                            }
                                            if(interfaz.ltipopar.get(contador3).equals("Boolean") && !(otraLista.get(i).toString().equals("Boolean"))){
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Boolean'\n";
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Universal."+otraLista.get(i).toString()+"'\n"; 
                                             }
                                     }

                        else{      
                                    if (verificarSiExisteElemento( ((Tokens)otraLista.get(i)).getIdentificador() )==true){
                                        
                                        
                                        int indice2 = obtenerIndice( ((Tokens)otraLista.get(i)).getIdentificador() ); //Se busca el indice y se obtiene el puntero
                                               System.out.println(""+i+" AMBITO : "+indice2);
        
                                            if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indice2).toString())==true){ //Se verifica el alcance con el acance actual
                                              //  JOptionPane.showMessageDialog(null, "Variable "+interfaz.lnombre.get(indice2)+" tipo "+interfaz.ltipo.get(indice2).toString());
                                                if (interfaz.ltipo.get(indice2).toString().equalsIgnoreCase("Procedure")){
                                                       interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (No tiene retorno)\n";        
                                                   //JOptionPane.showMessageDialog(null, "LA VARIABLE "+interfaz.lnombre.get(indice2)+" ES UN PROCEDURE","Error",JOptionPane.ERROR_MESSAGE);
                                                }
                                                else if (interfaz.ltipo.get(indice2).toString().equalsIgnoreCase("Function")){
                                                        if (interfaz.ltiporeturn.get(indice2).toString().equalsIgnoreCase(interfaz.ltipopar.get(contador3).toString())){

                                                        }
                                                        else {  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otraLista.get(i)).getFila()+":"+((Tokens)otraLista.get(i)).getColumna()+": expected type 'Standar."+interfaz.ltipopar.get(contador3).toString()+"'\n";   
                                                              interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otraLista.get(i)).getFila()+":"+((Tokens)otraLista.get(i)).getColumna()+": found type 'Standar."+interfaz.ltipo.get(indice2).toString()+"'\n";   
                                                     }
                                                }
                                                else {
                                                      if (interfaz.ltipo.get(indice2).toString().equalsIgnoreCase(interfaz.ltipopar.get(contador3).toString())){
                                                        
                                                         }
                                                      else{   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (Distinto tipo)\n";        
                                                           //JOptionPane.showMessageDialog(null,""+interfaz.ltipo.get(indice2).toString()+"  con  "+interfaz.ltipopar.get(iterador).toString() );       
                                                      // JOptionPane.showMessageDialog(null, "Tipos de Variables distintos "+interfaz.ltipo.get(indice2).toString()+" con "+interfaz.ltipopar.get(iterador).toString(),"Error",JOptionPane.ERROR_MESSAGE);
                                                            }
                                                    }
                                            }
                                            else {
                                                      interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (No esta al alcance)\n";        
                                                    //JOptionPane.showMessageDialog(null, "LA VARIABLE "+interfaz.lnombre.get(indice2)+" NO ESTA AL ALCANCE ACTUAL","Error",JOptionPane.ERROR_MESSAGE);
                                                }
                                        
                                    }
                                    else{//JOptionPane.showMessageDialog(null,"NO EXISTE LA VARIABLE "+((Tokens)otraLista.get(i)).getIdentificador(),"Error",JOptionPane.ERROR_MESSAGE);
                                        
                                      interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (No esta declarada)\n";        
                                                    
                                    
                                    }
                                }
                                contador3++;
                            }
                        }
                        
                        else{
                            //JOptionPane.showMessageDialog(null, "NO TIENEN EL MISMO NUMERO DE PARAMETROS","Error",JOptionPane.ERROR_MESSAGE);
                            // interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No tienen los mismos parametros )\n";        
                             interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)id).getFila()+":"+((Tokens)id).getColumna()+": missing argument in call to"+((Tokens)id).getIdentificador().toString()+ " declarated at line "+((Tokens)id).getFila()+"\n";        
                            

                            } 
                }
                  else {
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No es Procedure o Function)\n";        
                           
                        //JOptionPane.showMessageDialog(null, "LA VARIABLE NO ES NI UN PROCEDURE NI UN FUNCTION","Error",JOptionPane.ERROR_MESSAGE);
                        }    
                }
                  else {
                      interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No esta al alcance )\n";        
                           
                    //JOptionPane.showMessageDialog(null, "LA VARIABLE NO ESTA AL ALCANCE ACTUAL","Error",JOptionPane.ERROR_MESSAGE);
                }
             }
        }
        else{
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No esta declarda )\n";        
                  
            //JOptionPane.showMessageDialog(null,"NO EXISTE LA VARIABLE "+id,"Error",JOptionPane.ERROR_MESSAGE);
}
    
       
    }



//**************************************limpiar variables********************************************************
public void limpiar(){
             tipopara.clear();
            nombreid.clear();
            tipo_return ="";
            tipotemp="";
            paratemp="";
            metodo="";
            dimension =0;
            AmbitoPila.clear();
            AmbitoLista.clear();
            nombreAmbito = "";
            ambitoActual = "";
            AmbitoPila = new ArrayList();

}
//*****************iniciar variables**********************************************
 public void inicializarvariables()
{
            llinea = new ArrayList();
            lcolumna = new ArrayList();
            nombrePadre = new ArrayList();
            Actual = new ArrayList();
            siguiente = new ArrayList();
            siguientetemp = new ArrayList();
            nombreAmbitoPadre = "";
            ambitoPadre1 = "";
            idcuerpo= new ArrayList();
            banderaasi = false;
            comparadores = new ArrayList();
            funproc = new ArrayList();
            funprocid = new ArrayList();
            
//**********************Ambito***************************************
     AmbitoPila = new ArrayList();
     AmbitoLista = new ArrayList();
     nombreAmbito = "";
     ambitoActual = "";
//***************************AmbitoPadre***************************************
     ArrayList nombrePadre = new ArrayList();
     ArrayList Actual = new ArrayList();
     ArrayList siguiente = new ArrayList();
     siguientetemp = new ArrayList();
String nombreAmbitoPadre = "";
String ambitoPadre1 = "";
//**************************************comparador de tipos ****************************************
 comp = "";
//***********************Retorno*********************
retornos = new ArrayList();

}


:};


/*Palabras reservadas*/
terminal ID,ARRAY,BOOLEAN,FLOAT,ENTERO,NUMERO,REAL,OF,IGUAL;
terminal PROCEDURE,FUNCTION,IS,BEGIN,END,RETURN;
terminal FOR,IN,LOOP,OUT,INOUT,PUT,GET;
terminal MAS,MENOS,POR,ENTRE,TRUE,FALSE,TYPE;

/*Simbolos*/
terminal PAR1,PAR2,PUNTO,FIN,COMA,DOSPUNTOS,COMILLA,NEWLINE;
terminal IF,ELSE, THEN, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL,NOT;
terminal AND,OR,DISTINTO,EXIT,WHEN,WHILE; 

/*Producciones*/
non terminal declaracion,declaracion2,declaracion_tipo,declaracion_tipo2,declaraciones,procedimiento2sig,procedimientoa21sig;
non terminal declaracion_arreglo, declaracion_arreglo2,declaracion_arreglo3,declaracion_arreglo4,declaracion_arreglo5,programa,procedimientoa,procedimientoa2,procedimientoa21,masvariables;
non terminal tipo,procedimiento,procedimiento2,procedimientofun,parametros,id,cuerpo,for,asignacion,masvariablesfun;
non terminal ciclos,expresiones,final,operacion,asignar,boolean,leer_escribir,put2,finlees,operacion2,metodo,asignarsig;
non terminal declaracion_par,declaracion_tipo2_par,declaracion_tipo_par,par,arreglo,arreglo2;
non terminal cadena,llamarmetodos,operacion3,operacion4,operacion5,parametrosig,declaracionsig,procedimientofun2,procedimientofun21;
non terminal condicion,relacion,if,f1,condicion2,while,loop,parentesis,procedimientofunb,parametros_funsig,procedimiento2sig2;
non terminal llamadaproc,return ,cuerpo2,cuerpofun,if_fun,f1_fun,loop2,loop3, exit,parametros_fun,declaracion_par_fun, declaracion_tipo_par_fun,declaracion_tipo2_par_fun,ff;

/*Precedencia*/
precedence left MAS, MENOS;
precedence left POR, ENTRE;
precedence left IGUAL;


start with programa ;



programa ::= {: inicializarvariables();  limpiar(); :} procedimiento  {:  :};



tipo ::= ENTERO{:RESULT = "Integer";
         
            :}|
         FLOAT {:  RESULT = "Float" ;
                    
             :}|  

        BOOLEAN{:RESULT = "Boolean" ;
     :} ;

id ::= ID:id {: if(desarrollos ==true){ 
 if( verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                        //     interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                               }  idcuerpo.add(id); 
                            }  RESULT = id ;
         :} |
       NUMERO:t {: RESULT ="null"; 
            if(banderaasi==true && banderaasi2==true&& banderaarr==true && desarrollos ==true){
                   
                      lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                    comparadores.add("Integer");}
                    if(ret==true && desarrollos ==true){
                    retornos.add("Integer");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                       if(banderafunproc==true && desarrollos ==true){  
                           lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                           funproc.add("Integer"); 
                          }
                   if(banderafunproc==true && desarrollos ==true && funprocint>1){
                            lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                             pararr.add("Integer");  }
                   if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }   
                               :} | 
       REAL:t {: RESULT ="null"; 
            if(banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                   
                    comparadores.add("Float");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                    if(ret==true && desarrollos ==true){
                    retornos.add("Float");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                        if(banderafunproc==true && desarrollos ==true ){
                           // pararr.add("Float");
                           lineavalor= ((Tokens) t).getFila();
                            columnavalor=((Tokens) t).getColumna();
                             funproc.add("Float"); 
                    }
                     if(banderafunproc==true && desarrollos ==true && funprocint>1){
                              lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                               pararr.add("Float");  }
                       if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }

                :} | 
       arreglo:arr {: RESULT = "null"; :} |
       ID:id PAR1 PAR2 {:if(desarrollos ==true){ contarr++; int indice=0;
               idcuerpo.add(id);
             if(banderaasi==true && banderaasi2==true && banderaarr==true){
                         comparadores.add(id);} 
             if(ret==true){
                 retornos.add(id);
                           } 
                       if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add("11a"); pararr.add(id); pararr.add("1a");pararr.add("0a"); pararr.add("bloque");
                                }  
                        if(verificarSiExisteElemento(((Tokens)id).getIdentificador())==true){
                                indice=obtenerIndice( ((Tokens)id).getIdentificador() );
                                if(!interfaz.ltipo.get(indice).equals("Procedure") && !interfaz.ltipo.get(indice).equals("Function")){
                        /****************************************************************/
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Rango no existe)\n";        
                                }
                            }
      
                }        
            RESULT = "null"; :};

par ::= IN {: RESULT = "In"; :} |
        OUT {: RESULT = "Out"; :} | 
        INOUT {: RESULT = "In Out"; :} ;

ff ::= IN {:RESULT = "In"; :} ;

boolean ::= TRUE:t{: if(banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                
                    comparadores.add("Boolean");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                        }
                    if(ret==true && desarrollos ==true){
                    retornos.add("Boolean");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                        if(banderafunproc==true && desarrollos ==true){ 
                           // pararr.add("Booelan");
                           lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                            funproc.add("Boolean");
                      } 
                      if(banderafunproc==true && desarrollos ==true && funprocint>1){
                            lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                             pararr.add("Boolean");  }
                   if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }   
                    
                :}  
            |   FALSE:t{:
            if(banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                    
                    comparadores.add("Boolean");
                          lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();                     
                            }
                    if(ret==true && desarrollos ==true){
                    retornos.add("Boolean");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                        }
                        if(banderafunproc==true && desarrollos ==true){
                           // pararr.add("Booelan");
                              lineavalor= ((Tokens) t).getFila();
                        columnavalor=((Tokens) t).getColumna();
                             funproc.add("Boolean");
                                }
                   if(banderafunproc==true && desarrollos ==true && funprocint>1){
                            lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                             pararr.add("Boolean");  }
                   if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }   
                       
                :}  ;


relacion ::= MENOR | MAYOR | MENORIGUAL | MAYORIGUAL | IGUAL | DISTINTO | NOT ;

final ::= END ID:id FIN {: idcuerpo.add(id);  begin();  BeginPadre();   if(compararfun.size()>1){
                     compararfun.remove(compararfun.size()-1);
                 }
                         if(! ((Tokens) id).getIdentificador().equals( ((Tokens)inimain.get(inimain.size()-1)).getIdentificador()  )  ){
                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Procedure o Function no Identificada)\n";        
                       } inimain.remove(inimain.size()-1);
               :}| 
          END ID error | END error FIN;

arreglo ::=  ID:id   PAR1 
            {:  
                 if(desarrollos ==true){
                 
                    funprocint++;
                    if(banderaasi==true && banderaarr==true && banderaasi2==true ){
                               comparadores.add(id); banderaasi=false;}
                if(funprocid.isEmpty()){
                funprocid.add(id); funproc.add("1a");
                    }else{
                funprocid.add(id); funproc.add(id); funproc.add("1a"); }
             banderafunproc=true ;   banderaasi=true; banderaasi2 = false ;
                if(funprocint>1){
                    pararr.add("11a");pararr.add(id); pararr.add("1a");}
                    }
            
:}
  arreglo2  PAR2 
             {:   banderaasi2=true; int con=0,con2=0,indice=0;; 
                  if(desarrollos ==true){  
                   idcuerpo.add(id);
                          funprocint--;
                         //   JOptionPane.showMessageDialog(null,"--->: "+funprocint);
                          funproc.add("0a");
                  if (funprocint>0) { pararr.add("0a");}
                       // funproc.add("bloque");
 con=0; con2=0;
                        System.out.println("------>");
                   }               
                    if (funprocint == 0){
                     if(!pararr.get(pararr.size()-1).equals("bloque")) {      pararr.add("bloque");}
                             banderafunproc=false;
                             banderaasi=true;
                             if(verificarSiExisteElemento(((Tokens)id).getIdentificador())==true){
                                indice=obtenerIndice( ((Tokens)id).getIdentificador() );
                                if(!interfaz.ltipo.get(indice).equals("Procedure") && !interfaz.ltipo.get(indice).equals("Function")){
                        /****************************************************************/
                        if (!pararr.isEmpty()) {
                        System.out.println("**************lista marco*************************");
                        for(int i = 0 ; i<pararr.size();i++){
                            System.out.println( pararr.get(i).toString() );
                               }   
                        System.out.println("****************lista marco***********************");
                            //JOptionPane.showMessageDialog(null,"id es : "+(Tokens)comparadorarr).getIdentificador() );
                             Arrayrango(id,pararr);
                            pararr= new ArrayList();}else{
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Rango no existe)\n";        
                                }
                     }else{
                      if(!funprocid.isEmpty()){ 
                   //   JOptionPane.showMessageDialog(null,"id es : "+((Tokens)id).getIdentificador() );
                      VerificarParametrosGrande(funprocid,funproc);
                      funprocid = new ArrayList();
                      funproc= new ArrayList();}
                    }    
                     funproc= new ArrayList();
                      pararr= new ArrayList(); funprocid= new ArrayList(); }
    }
                      
                     RESULT = id ; 
 :} ;
                                
arreglo2 ::= asignar COMA arreglo2 | asignar ;

/******************************************************** PROCEDIMIENTO ***************************************************************/

    procedimiento ::= PROCEDURE ID:id {: 
                                        // JOptionPane.showMessageDialog(null,"agrego");
                                         metodo=((Tokens) id).getIdentificador(); 
                                         procedure1=((Tokens) id).getIdentificador();
                                         lineatemp=((Tokens) id).getFila();
                                         columnatemp=((Tokens) id).getColumna();
                                         getambito(metodo.toString()); 
                                          ambitoPadre(metodo.toString());
                                          inimain.add(id);
                                       :} procedimiento2   ;
                    
procedimientofun21::= cuerpo2 return final;

procedimientofun2::=  declaraciones BEGIN  procedimientofun21 | 
                      BEGIN  procedimientofun21 ;
                
procedimientofun ::=  PAR1 parametros_fun PAR2 RETURN tipo:tp IS 
                    {:
                                tipo_return=tp.toString();
                                
                                  dimension=0;
                                  tipo_return="";
                                  comprobarFunctionProcedure(metodo.toString());
                      :} procedimientofun2 |

                      RETURN tipo:tp IS
                     {:
                                tipo_return=tp.toString();   

                                  dimension=0;
                                   tipo_return="";
                                   comprobarFunctionProcedure(metodo.toString());
                      :} procedimientofun2 ;


/**************************************************** PARAMATEROS DE UN FUNCTION ************************************************************/
parametros_funsig ::= FIN parametros_fun | ;

parametros_fun ::= ID:id declaracion_par_fun
                   {:           
                                
                                            variableDuplicada(id);

                          nombreid.clear(); tipotemp=""; paratemp=""; dimension=0;
                      :}

                    parametros_funsig ;
                    
             
declaracion_par_fun ::= declaracion_tipo_par_fun ;

declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS IGUAL NUMERO |
                            declaracion_tipo2_par_fun                         ;

masvariablesfun::=declaracion_tipo2_par_fun  ;

declaracion_tipo2_par_fun ::=   COMA ID:id 
                               {: nombreid.add(id);
                                    
                                    //llinea.add(((Tokens) id).getFila());
                                    //lcolumna.add(((Tokens) id).getColumna());
                                :}
                                masvariablesfun
                                    |

                             DOSPUNTOS ff:para tipo:tp 
                                  {:  paratemp=para.toString();  tipotemp=tp.toString(); 

                                       for (int i = 0; i < nombreid.size(); i++){
                                           tipopara.add(tp.toString());
                                       }
                                       tipopara.add(tp.toString());
                                   :}   
                                 |
                                       
                                DOSPUNTOS ff:para ID:id
                                        {:paratemp=para.toString(); tipotemp=((Tokens) id).getIdentificador();tipopara.add(((Tokens) id).getIdentificador());
                                            for(int i=0;i<nombreid.size();i++){
                                                tipopara.add(tipotemp);      
                                                 } 
                                            tipopara.add(tipotemp);   //JOptionPane.showMessageDialog(null,tp.toString());  
                                                                idcuerpo.add(id); :}    
                                ;



                            


/*************************************************************** PROCEDIMIENTO ***********************************************************************/

cuerpo2 ::=  expresiones cuerpo2 | for cuerpo2 | if_fun cuerpo2 | while cuerpo2 | loop cuerpo2 |
             expresiones         | for         | if_fun         | while         | loop         ; 

cuerpofun ::=  expresiones cuerpofun | for cuerpofun | if_fun cuerpofun | while cuerpofun | loop cuerpofun |
               expresiones           | for           | if_fun           | while           | loop           | 
               return                ;               

return ::= RETURN FIN                | 
           RETURN {: ret = true;  :} asignar 
                 {:     ret = false; 
                    
                     compararRetorno(compararfun,retornos); retornos = new ArrayList(); 
                 
                :}FIN ;
                    

procedimiento2sig ::= cuerpo END ID:id FIN {: 
 for(int i =0;i<interfaz.larreglo.size();i++){System.out.println(interfaz.larreglo.get(i).toString());}
     if(! ((Tokens) id).getIdentificador().equals( ((Tokens)inimain.get(0)).getIdentificador()  )  ){
                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Procedure o Function no Identificada)\n";        
                       } inimain = new ArrayList();
 :}
 ;


procedimiento2sig2 ::= declaraciones BEGIN   procedimiento2sig | 
                       BEGIN   procedimiento2sig ;
                        

procedimiento2 ::= PAR1 parametros PAR2 IS 
                    {:          tipopara.clear();  
                                 :}     
                    procedimiento2sig2   |
                   
                   IS  {: 
                                 :} procedimiento2sig2 ;
              
procedimientoa21sig ::= cuerpo final ;

procedimientoa21 ::=declaraciones BEGIN 
                    {://JOptionPane.showMessageDialog(null,"fin"); 
                          
                    :} procedimientoa21sig | 

                    BEGIN  {: //JOptionPane.showMessageDialog(null,"fin");
                               
                            :} procedimientoa21sig;
 
                                                              
procedimientoa2 ::= PAR1 parametros PAR2 IS
                     {: 
                            comprobarFunctionProcedure(metodo.toString());
                                
                    :}    procedimientoa21 |

                    IS {: 
                                
                                    comprobarFunctionProcedure(metodo.toString());
                       :}  procedimientoa21  ;


/******************************************************* DECLARACION DE PARAMETROS *******************************************************************/
parametrosig ::= FIN parametros| FIN error | ;



parametros ::= ID:id  declaracion_par
                {: 
                              nombreid.add(id);
                             // llinea.add(((Tokens) id).getFila());
                              // lcolumna.add(((Tokens) id).getColumna());
                              int linea=((Tokens) id).getFila();
                            //   JOptionPane.showMessageDialog(null,linea);
                         nombreid.clear(); ;tipotemp=""; paratemp="";
                         dimension=0;
                         variableDuplicada(id);
                 :}   parametrosig ;

declaracion_par ::= declaracion_tipo_par ;   
          

declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS IGUAL NUMERO |
                         declaracion_tipo2_par                        ;



masvariables::= declaracion_tipo2_par ;


declaracion_tipo2_par ::= COMA ID:id  
                            {: 
                                          nombreid.add(id);
                                        //   llinea.add(((Tokens) id).getFila());
                                       //lcolumna.add(((Tokens) id).getColumna());
                                      //   JOptionPane.showMessageDialog(null, nombreid.size());
                             :} masvariables |

                             DOSPUNTOS par:para tipo:tp 
                            {:  
                                paratemp=para.toString();  tipotemp=tp.toString();
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tp.toString());      
                                     } 
                                tipopara.add(tp.toString());   //JOptionPane.showMessageDialog(null,tp.toString());  
                            
                            :} |
                                DOSPUNTOS par:para ID:id
                            {:paratemp=para.toString(); tipotemp=((Tokens) id).getIdentificador();tipopara.add(((Tokens) id).getIdentificador());
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tipotemp);      
                                     } for(int i = interfaz.lnombre.size()-1 ;i>=0;i--){
                                        if(tipotemp.toString().equals(interfaz.lnombre.get(i).toString())){
                                               dimension=Integer.parseInt(interfaz.ldimension.get(i).toString()); break;     
                                                    }
                                                   }
                                                    idcuerpo.add(id); :}    
                                 ;


/**************************************************************** DECLARACION DE VARIABLES ************************************************************/

declaracionsig ::= declaraciones | ;

declaracion ::= TYPE ID:id IS declaracion_arreglo  FIN
                 
                 {:        


                            variableDuplicada(id);
                                  nombreid.clear();
                                  tipotemp="";
                                  dimension=0;
                  :}  
                declaracionsig |
    
                ID:id declaracion2 FIN
                 {:         variableDuplicada(id);
                                  nombreid.clear();
                                  tipotemp="";
                                  dimension=0;
                  :}  
                declaracionsig     |

       ID:id DOSPUNTOS ARRAY PAR1 NUMERO:n1 PUNTO PUNTO NUMERO:n2 PAR2 OF tipo:tp FIN declaracionsig |
                          
     ID:id DOSPUNTOS ARRAY PAR1 NUMERO:n1 PUNTO PUNTO NUMERO:n2 COMA NUMERO:n3 PUNTO PUNTO NUMERO:n4 PAR2 OF tipo:tp FIN declaracionsig ;
        


declaracion2 ::= declaracion_tipo ;
                 

declaracion_tipo2 ::= COMA ID:id
                     {:  interfaz.ltipopar.add("no hay");
                            nombreid.add(id);
                            //llinea.add(((Tokens) id).getFila());
                            //lcolumna.add(((Tokens) id).getColumna());
                      :} declaracion_tipo2 | 

                      DOSPUNTOS tipo:tp {: tipotemp=tp.toString(); :}
                        | 

                      DOSPUNTOS ID:tp {: tipotemp=((Tokens) tp).getIdentificador();
                                       if ( verificarSiExisteElemento(tipotemp)==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)tp).getFila()+", Columna"+((Tokens)tp).getColumna()+" (El tipo no exitse)\n";        
                                                             }else{
                                                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) tp).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)tp).getFila()+", Columna"+((Tokens)tp).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                                            dms = (obtenerIndice(tipotemp));
                                                dimension = Integer.parseInt(interfaz.ldimension.get(dms).toString());
                                        }
                                            
    
    
             :};

declaracion_tipo ::= declaracion_tipo2 DOSPUNTOS IGUAL NUMERO | 
                     declaracion_tipo2 ; 

declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 OF tipo:tp  {: tipotemp=tp.toString(); :}  ;


                        
declaraciones ::=  declaracion | procedimientoa ;


procedimientofunb ::=declaraciones |;

procedimientoa ::=  FUNCTION ID:id 
                    {: //if (interfaz.ltipopar.get(interfaz.ltipopar.size()-1).toString().equals("no")){interfaz.ltipopar.remove(interfaz.ltipopar.size()-1);}
                       metodo=((Tokens) id).getIdentificador(); 
                      lineatemp=((Tokens) id).getFila();
                      columnatemp=((Tokens) id).getColumna();
                      getambito(((Tokens) id).getIdentificador());
                      ambitoPadre(((Tokens) id).getIdentificador()); 
                  //  JOptionPane.showMessageDialog(null,"ambito actual es "+ambitoActual);
                   compararfun.add(id) ;
                   inimain.add(id);
                        :} procedimientofun  procedimientofunb |

                    PROCEDURE ID:id 
                    {: //if (interfaz.ltipopar.get(interfaz.ltipopar.size()-1).toString().equals("no")){interfaz.ltipopar.remove(interfaz.ltipopar.size()-1);}
                            metodo=((Tokens) id).getIdentificador(); getambito(((Tokens) id).getIdentificador());
                          //      JOptionPane.showMessageDialog(null,"ambito actual es "+ambitoActual);
                            lineatemp=((Tokens) id).getFila();
                            ambitoPadre(((Tokens) id).getIdentificador());
                            columnatemp=((Tokens) id).getColumna();
                            //JOptionPane.showMessageDialog(null,metodo);  
                            inimain.add(id);
                    :} procedimientoa2   procedimientofunb  ;

declaracion_arreglo2::=  NUMERO:n PUNTO PUNTO  declaracion_arreglo3 {: interfaz.larreglo.add(n); interfaz.larreglo.add("bloque"); :}    ;

declaracion_arreglo3::=  NUMERO:n {: dimension=1;  interfaz.larreglo.add("bloque");  interfaz.larreglo.add(n); :} | NUMERO:n  COMA declaracion_arreglo4 {: interfaz.larreglo.add(n); :};

                      
declaracion_arreglo4 ::= NUMERO:n PUNTO PUNTO declaracion_arreglo5 {: interfaz.larreglo.add(n); :} ;

declaracion_arreglo5::= NUMERO:n {:  interfaz.larreglo.add("bloque"); interfaz.larreglo.add(n);  dimension = 2; :};

/********************************************************************** CUERPO ***********************************************************************************/

cuerpo ::=  expresiones cuerpo | 
            ciclos cuerpo      | 
            expresiones        | 
            ciclos ;

/*****************************a*************************************** EXPRESIONES *******************************************************************************/

expresiones ::= asignacion {: :} | leer_escribir | llamarmetodos ; 
                 

put2::= cadena COMILLA PAR2 FIN finlees  {: desarrollos =true; :} ;

               
finlees ::=NEWLINE FIN|; 
leer_escribir ::= GET PAR1 ID:id PAR2 FIN    
                    {: 
                         if( verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  RESULT = id ; idcuerpo.add(id); 
                    :} |
                    GET PAR1 arreglo:id  PAR2 FIN   
                     {:
                             if( verificarSiExisteElemento(((Tokens) id).getIdentificador())==false ){
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                        if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                        }
                                  }  RESULT = "null"; :} |

                    GET PAR1 ID:id PAR1 PAR2  PAR2 FIN 
                    {:   if (verificarSiExisteElementoProcedimiento(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                               }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  idcuerpo.add(id);  
                         RESULT = "null";
                    :}  |


                   PUT PAR1 COMILLA {: desarrollos =false; :}  put2      |
     
                    PUT PAR1 ID:id PAR2 FIN finlees    
                    {: 
                         if( verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  RESULT = id ; idcuerpo.add(id); 
                    :} |
                    PUT PAR1 arreglo:id  PAR2 FIN finlees   
                     {:
                             if( verificarSiExisteElemento(((Tokens) id).getIdentificador())==false ){
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                        if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                        }
                                  }  RESULT = "null"; :} |

                    PUT PAR1 ID:id PAR1 PAR2  PAR2 FIN finlees
                    {:   if (verificarSiExisteElementoProcedimiento(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                               }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  idcuerpo.add(id);  
                         RESULT = "null";
                    :}  ;

cadena::= asignar cadena |  
          asignar        ;

asignarsig ::= asignar:asi {:
                     banderaasi =false;contarr=0;
                     banderaarr=false; 
                            comparadorizq = null;
                            compizq = false ;
                            

                     :} FIN  ;


asignacion ::=  ID:id DOSPUNTOS IGUAL 
                {:       if (verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                 } 
                        banderaasi=true;   banderaarr=true;  comparadorizq = id ; compizq=true; 
                :} asignarsig 
                {:
                        comp=((Tokens) id).getIdentificador().toString(); 
                        lineacomp=((Tokens) id).getFila();
                        columnacomp=((Tokens) id).getColumna();
                        idcuerpo.add(id);   cuerpo();
                        
                            compararTipo(id,comparadores); 
                            comparadores = new ArrayList();
                            compizq=false; 
                                 

               :} |
 arreglo:arr DOSPUNTOS IGUAL {:
                            if (verificarSiExisteElementoProcedimiento(((Tokens) arr).getIdentificador())==false ){
                                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)arr).getFila()+", Columna"+((Tokens)arr).getColumna()+" (Variable no declarada )\n";        
                                   }

                                      banderaasi=true;   banderaarr=true;  comparadorizq = arr ; compizq=true;
                       System.out.println("**************lista marco*************************");
                            for(int i = 0 ; i<pararr.size();i++){
                                System.out.println(pararr.get(i).toString());
                                }   
                        System.out.println("****************lista marco***********************");
                        if (!pararr.isEmpty()) {
                           // Arrayrango(comparadorarr,pararr);
                            pararr= new ArrayList();}
                        pararr= new ArrayList();
                        
                                    
                                   
                            banderaasi=true; 
                           banderaarr=true;
                           compizq=true;
              :} asignarsig 
              {: 
                    comp=((Tokens) arr).getIdentificador().toString();
                    lineacomp=((Tokens) arr).getFila();
                    columnacomp=((Tokens) arr).getColumna();
                    idcuerpo.add(arr); cuerpo(); 
                       compararTipo(arr,comparadores);
                        comparadores = new ArrayList();
                            compizq=false;
                              
            
             :} ;
asignar ::= operacion {: :}  | boolean {: RESULT = "null";
                                   if(compizq==true){compararBooleans(comparadorizq);} :} ;

operacion ::= operacion MAS  operacion2      | operacion2 ;
operacion2 ::= operacion2 MENOS operacion3   | operacion3;
operacion3 ::= operacion3 POR operacion4     | operacion4 ;
operacion4 ::= operacion4 ENTRE operacion5   | operacion5;
operacion5 ::= id:ids 
                {: if((!(ids.toString().equals("null"))) && banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                    comparadores.add(ids);  } 
                     if((!(ids.toString().equals("null"))) && ret==true && desarrollos ==true){
                          retornos.add(ids); } 
                    if((!(ids.toString().equals("null"))) && banderafunproc==true  && desarrollos ==true){
                    funproc.add(ids); } 
                         if((!(ids.toString().equals("null"))) && banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(ids);      pararr.add("bloque");
                         } else if((!(ids.toString().equals("null"))) && banderafunproc==true  && desarrollos == true && funprocint>1) {
                       pararr.add(ids);        } 
                    
                      
                :} ; 

                 
 /******************************************************* LLAMADAS A PROCEDIMIENTOS Y FUNCIONES *********************************************************/   


llamarmetodos ::= metodo FIN  {:      :};

metodo ::=  llamadaproc    ;
            
 
llamadaproc ::=  arreglo:id {:
 int indiceId = 0;
            if (verificarSiExisteElemento(((Tokens)id).getIdentificador()) == true){ 
                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId).toString() )==true){
                    indiceId =obtenerIndice( ((Tokens)id).getIdentificador() );
                       if(interfaz.ltipo.get(indiceId).toString().equals("Function")){
                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Retorno de Function,no se le asigna a un Identificador)\n";        
                        }
                    }
                }
        
        
:}      
    |
                ID:id  {:  int indiceId = 0; ArrayList nada = new ArrayList(); nada.add(0);
                        if (verificarSiExisteElemento(((Tokens)id).getIdentificador()) == true){ 
                            if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId).toString() )==true){
                                indiceId =obtenerIndice( ((Tokens)id).getIdentificador() );
                                   if(!interfaz.ltipo.get(indiceId).toString().equals("Procedure")){
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Retorno de Function,no se le asigna a un Identificador)\n";        
                                    }else{
                                        verificarParametros(id,nada);
                                         }
                                }
                            }

                  :} ;

/************************************************************************ CICLOS ************************************************************************/

ciclos ::= for   |
           if    |
           while |
           loop  ;

/*Condiciones*/
parentesis ::= PAR1 parentesis PAR2 condicion2 {:         :} |
               condicion    {:      :}     ;

condicion ::= id relacion id condicion2     |
              ID:id IGUAL boolean condicion2 {: compararBooleans(id);:}   |
              boolean condicion2            |
              ID:id       {: compararBooleans(id);:}                     ;



condicion2 ::= AND  parentesis | 
               OR parentesis   |  ;

/*If-Else*/
 if ::= IF parentesis THEN f1           | 
        IF parentesis THEN cuerpo f1    ;

 f1 ::= ELSE cuerpo f1 |
        END IF FIN     ;
if_fun ::= IF parentesis THEN cuerpofun f1_fun {:  :}   ;
           

 f1_fun ::= END IF FIN             |
            ELSE cuerpofun f1_fun  ;

/*For*/
 for ::=  FOR ID:id {: exitwhen = true;  :} IN NUMERO PUNTO PUNTO NUMERO LOOP  loop2 END LOOP FIN {: idcuerpo.add(id); :}   ;

/*While*/
while ::= WHILE parentesis {: exitwhen = true;  :} LOOP loop2 END LOOP FIN ;

/*Loop*/
loop ::= LOOP {: exitwhen = true;  :} loop3;
loop3 ::= loop2 END LOOP FIN |
            error END LOOP FIN|
            loop2 error LOOP FIN|
            loop2 END error FIN;
    
loop2 ::= expresiones loop2 |     
          expresiones       |
          ciclos loop2      |
          ciclos            |
          exit loop2        |
          exit              ;

exit ::= EXIT:e WHEN parentesis FIN 
{:  if(exitwhen == true){exitwhen = false;}else{
   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)e).getFila()+", Columna"+((Tokens)e).getColumna()+" (Ya existe una salida a Loop)\n";        
     } :};



  