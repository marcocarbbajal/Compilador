
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 17 16:36:32 CST 2012
//----------------------------------------------------

package Lexico_Sintactico_Semantico;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 17 16:36:32 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\002\002\004\000\002\121\002\000\002\016" +
    "\004\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\120\003\000\002\042" +
    "\003\000\002\042\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\055\006\000\002\056" +
    "\005\000\002\056\003\000\002\122\002\000\002\024\006" +
    "\000\002\024\005\000\002\024\005\000\002\067\005\000" +
    "\002\067\005\000\002\067\005\000\002\067\005\000\002" +
    "\066\005\000\002\066\004\000\002\066\010\000\002\066" +
    "\006\000\002\123\002\000\002\026\012\000\002\124\002" +
    "\000\002\026\007\000\002\026\015\000\002\026\015\000" +
    "\002\026\015\000\002\026\015\000\002\026\014\000\002" +
    "\026\014\000\002\026\014\000\002\026\014\000\002\026" +
    "\014\000\002\026\011\000\002\026\011\000\002\026\011" +
    "\000\002\026\012\000\002\026\012\000\002\026\012\000" +
    "\002\101\004\000\002\101\004\000\002\101\002\000\002" +
    "\125\002\000\002\114\006\000\002\114\006\000\002\114" +
    "\006\000\002\114\006\000\002\114\004\000\002\114\004" +
    "\000\002\115\003\000\002\116\006\000\002\116\003\000" +
    "\002\116\006\000\002\116\006\000\002\034\003\000\002" +
    "\034\003\000\002\126\002\000\002\117\006\000\002\117" +
    "\005\000\002\117\005\000\002\117\005\000\002\117\005" +
    "\000\002\117\005\000\002\117\005\000\002\117\005\000" +
    "\002\117\005\000\002\117\005\000\002\105\004\000\002" +
    "\105\004\000\002\105\004\000\002\105\004\000\002\105" +
    "\004\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\106\004\000" +
    "\002\106\004\000\002\106\004\000\002\106\004\000\002" +
    "\106\004\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\104\004\000\002\104\005\000\002\007\006\000" +
    "\002\007\006\000\002\007\005\000\002\007\006\000\002" +
    "\007\006\000\002\102\005\000\002\102\004\000\002\102" +
    "\005\000\002\102\004\000\002\127\002\000\002\025\010" +
    "\000\002\130\002\000\002\025\005\000\002\025\012\000" +
    "\002\025\011\000\002\025\011\000\002\025\006\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\131" +
    "\002\000\002\021\006\000\002\132\002\000\002\021\005" +
    "\000\002\021\005\000\002\021\006\000\002\133\002\000" +
    "\002\020\010\000\002\134\002\000\002\020\005\000\002" +
    "\020\012\000\002\020\011\000\002\020\011\000\002\020" +
    "\006\000\002\064\004\000\002\064\004\000\002\064\002" +
    "\000\002\135\002\000\002\027\006\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\027\004\000\002" +
    "\027\004\000\002\051\003\000\002\053\006\000\002\053" +
    "\003\000\002\053\006\000\002\053\006\000\002\022\003" +
    "\000\002\022\003\000\002\136\002\000\002\052\006\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\065\003" +
    "\000\002\065\002\000\002\137\002\000\002\002\011\000" +
    "\002\140\002\000\002\002\007\000\002\141\002\000\002" +
    "\002\020\000\002\142\002\000\002\002\025\000\002\002" +
    "\017\000\002\002\017\000\002\002\017\000\002\002\017" +
    "\000\002\002\017\000\002\002\017\000\002\002\017\000" +
    "\002\002\017\000\002\002\017\000\002\002\017\000\002" +
    "\002\017\000\002\002\024\000\002\002\024\000\002\002" +
    "\024\000\002\002\024\000\002\002\024\000\002\002\024" +
    "\000\002\002\024\000\002\002\024\000\002\002\024\000" +
    "\002\002\024\000\002\002\024\000\002\002\024\000\002" +
    "\002\024\000\002\002\024\000\002\002\024\000\002\002" +
    "\024\000\002\002\006\000\002\002\006\000\002\002\006" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\007\000\002\002\007\000\002\002\007\000\002" +
    "\002\007\000\002\002\006\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\003\003\000\002\143\002" +
    "\000\002\005\006\000\002\005\004\000\002\005\004\000" +
    "\002\004\006\000\002\004\003\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\006\003\000\002\006\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\002\000" +
    "\002\144\002\000\002\017\007\000\002\145\002\000\002" +
    "\017\007\000\002\017\005\000\002\017\005\000\002\012" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\013\003\000\002\013\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\015" +
    "\003\000\002\015\003\000\002\031\004\000\002\031\004" +
    "\000\002\031\003\000\002\031\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\044\007\000\002" +
    "\044\007\000\002\044\007\000\002\044\007\000\002\045" +
    "\004\000\002\045\002\000\002\043\007\000\002\043\007" +
    "\000\002\043\011\000\002\146\002\000\002\043\007\000" +
    "\002\043\010\000\002\043\010\000\002\043\012\000\002" +
    "\043\007\000\002\043\007\000\002\043\007\000\002\043" +
    "\007\000\002\043\007\000\002\043\011\000\002\043\011" +
    "\000\002\043\011\000\002\043\011\000\002\043\011\000" +
    "\002\043\007\000\002\043\007\000\002\043\007\000\002" +
    "\043\007\000\002\043\007\000\002\043\012\000\002\043" +
    "\012\000\002\043\012\000\002\043\012\000\002\043\012" +
    "\000\002\043\006\000\002\043\006\000\002\043\006\000" +
    "\002\057\004\000\002\057\003\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\033\006\000\002\033" +
    "\006\000\002\033\007\000\002\041\003\000\002\041\003" +
    "\000\002\040\005\000\002\040\003\000\002\046\005\000" +
    "\002\046\003\000\002\061\005\000\002\061\003\000\002" +
    "\062\005\000\002\062\003\000\002\063\003\000\002\060" +
    "\004\000\002\047\003\000\002\103\003\000\002\103\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\077\006\000\002\077\003\000\002" +
    "\077\006\000\002\077\006\000\002\077\006\000\002\070" +
    "\006\000\002\070\006\000\002\070\004\000\002\070\003" +
    "\000\002\070\006\000\002\070\006\000\002\070\006\000" +
    "\002\074\004\000\002\074\004\000\002\074\002\000\002" +
    "\072\006\000\002\072\007\000\002\072\007\000\002\072" +
    "\007\000\002\072\007\000\002\072\007\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\107\007\000\002\107\007\000\002" +
    "\107\007\000\002\107\007\000\002\107\007\000\002\110" +
    "\005\000\002\110\005\000\002\110\005\000\002\110\005" +
    "\000\002\110\005\000\002\032\016\000\002\032\016\000" +
    "\002\032\016\000\002\032\016\000\002\032\016\000\002" +
    "\032\016\000\002\032\016\000\002\032\016\000\002\032" +
    "\016\000\002\032\016\000\002\032\016\000\002\032\016" +
    "\000\002\075\011\000\002\075\011\000\002\075\011\000" +
    "\002\075\011\000\002\075\011\000\002\075\011\000\002" +
    "\075\011\000\002\147\002\000\002\076\005\000\002\112" +
    "\006\000\002\112\006\000\002\112\006\000\002\112\006" +
    "\000\002\111\004\000\002\111\003\000\002\111\004\000" +
    "\002\111\003\000\002\111\004\000\002\111\003\000\002" +
    "\113\006\000\002\113\006\000\002\113\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0476\000\006\003\000\015\000\001\002\000\004\002" +
    "\u0478\001\002\000\006\003\007\015\006\001\002\000\006" +
    "\003\u0474\004\u0473\001\002\000\004\004\011\001\002\000" +
    "\004\002\uffff\001\002\000\010\003\012\017\014\041\015" +
    "\001\002\000\004\020\u0470\001\002\000\004\002\uffe1\001" +
    "\002\000\016\003\uff86\004\uff86\015\uff86\016\uff86\020\uff86" +
    "\040\uff86\001\002\000\006\003\020\004\016\001\002\000" +
    "\010\003\u0464\045\021\046\026\001\002\000\004\042\u0445" +
    "\001\002\000\012\003\025\042\027\045\021\046\026\001" +
    "\002\000\006\003\u043f\004\u043e\001\002\000\006\042\uff67" +
    "\044\u043b\001\002\000\012\003\uff63\042\uff63\044\uff63\046" +
    "\u0435\001\002\000\010\003\uff65\042\uff65\044\uff65\001\002" +
    "\000\012\004\u0430\024\u0427\026\u0426\027\u042a\001\002\000" +
    "\012\003\u0428\024\u0427\026\u0426\027\u042a\001\002\000\004" +
    "\017\030\001\002\000\016\003\036\004\035\015\031\016" +
    "\040\020\041\040\033\001\002\000\006\003\u03f3\004\u03f2" +
    "\001\002\000\004\020\u03ef\001\002\000\006\003\u03e0\004" +
    "\u03df\001\002\000\004\020\uff13\001\002\000\010\003\u03dd" +
    "\045\u0202\046\u03de\001\002\000\010\004\u03db\045\u0202\046" +
    "\u01fd\001\002\000\004\020\uff12\001\002\000\006\003\u01a9" +
    "\004\u01a8\001\002\000\020\004\052\023\062\025\047\030" +
    "\053\031\065\051\050\066\045\001\002\000\004\044\u01a7" +
    "\001\002\000\030\003\ufef7\004\052\021\ufef7\022\ufef7\023" +
    "\062\025\047\030\053\031\065\051\050\052\ufef7\066\045" +
    "\001\002\000\004\021\u01a0\001\002\000\020\003\u0184\004" +
    "\222\011\117\012\123\036\115\037\121\041\221\001\002" +
    "\000\032\003\ufef3\004\ufef3\021\ufef3\022\ufef3\023\ufef3\025" +
    "\ufef3\030\ufef3\031\ufef3\051\ufef3\052\ufef3\064\ufef3\066\ufef3" +
    "\001\002\000\024\003\ufe7b\004\ufe7b\023\ufe7b\025\ufe7b\030" +
    "\ufe7b\031\ufe7b\051\ufe7b\064\ufe7b\066\ufe7b\001\002\000\020" +
    "\003\u015b\004\222\011\117\012\123\036\115\037\121\041" +
    "\221\001\002\000\032\003\ufef5\004\ufef5\021\ufef5\022\ufef5" +
    "\023\ufef5\025\ufef5\030\ufef5\031\ufef5\051\ufef5\052\ufef5\064" +
    "\ufef5\066\ufef5\001\002\000\010\041\u0158\044\ufeb7\046\u0157" +
    "\001\002\000\006\003\u010d\041\u010e\001\002\000\006\044" +
    "\ufeb8\046\u0102\001\002\000\032\003\ufeb5\004\ufeb5\021\ufeb5" +
    "\022\ufeb5\023\ufeb5\025\ufeb5\030\ufeb5\031\ufeb5\051\ufeb5\052" +
    "\ufeb5\064\ufeb5\066\ufeb5\001\002\000\032\003\ufeb4\004\ufeb4" +
    "\021\ufeb4\022\ufeb4\023\ufeb4\025\ufeb4\030\ufeb4\031\ufeb4\051" +
    "\ufeb4\052\ufeb4\064\ufeb4\066\ufeb4\001\002\000\030\003\ufef6" +
    "\004\052\021\ufef6\022\ufef6\023\062\025\047\030\053\031" +
    "\065\051\050\052\ufef6\066\045\001\002\000\004\044\ufeb9" +
    "\001\002\000\032\003\ufeb6\004\ufeb6\021\ufeb6\022\ufeb6\023" +
    "\ufeb6\025\ufeb6\030\ufeb6\031\ufeb6\051\ufeb6\052\ufeb6\064\ufeb6" +
    "\066\ufeb6\001\002\000\006\003\174\004\173\001\002\000" +
    "\032\003\ufeb3\004\ufeb3\021\ufeb3\022\ufeb3\023\ufeb3\025\ufeb3" +
    "\030\ufeb3\031\ufeb3\051\ufeb3\052\ufeb3\064\ufeb3\066\ufeb3\001" +
    "\002\000\032\003\ufef4\004\ufef4\021\ufef4\022\ufef4\023\ufef4" +
    "\025\ufef4\030\ufef4\031\ufef4\051\ufef4\052\ufef4\064\ufef4\066" +
    "\ufef4\001\002\000\006\003\066\041\067\001\002\000\004" +
    "\004\161\001\002\000\006\003\071\004\070\001\002\000" +
    "\010\003\105\041\107\042\106\001\002\000\006\041\100" +
    "\042\077\001\002\000\006\003\073\042\074\001\002\000" +
    "\004\044\076\001\002\000\004\044\075\001\002\000\032" +
    "\003\ufeeb\004\ufeeb\021\ufeeb\022\ufeeb\023\ufeeb\025\ufeeb\030" +
    "\ufeeb\031\ufeeb\051\ufeeb\052\ufeeb\064\ufeeb\066\ufeeb\001\002" +
    "\000\032\003\ufee0\004\ufee0\021\ufee0\022\ufee0\023\ufee0\025" +
    "\ufee0\030\ufee0\031\ufee0\051\ufee0\052\ufee0\064\ufee0\066\ufee0" +
    "\001\002\000\004\044\104\001\002\000\004\042\101\001" +
    "\002\000\004\042\102\001\002\000\004\044\103\001\002" +
    "\000\032\003\ufede\004\ufede\021\ufede\022\ufede\023\ufede\025" +
    "\ufede\030\ufede\031\ufede\051\ufede\052\ufede\064\ufede\066\ufede" +
    "\001\002\000\032\003\ufee1\004\ufee1\021\ufee1\022\ufee1\023" +
    "\ufee1\025\ufee1\030\ufee1\031\ufee1\051\ufee1\052\ufee1\064\ufee1" +
    "\066\ufee1\001\002\000\006\042\156\044\155\001\002\000" +
    "\004\044\154\001\002\000\020\003\124\004\122\011\117" +
    "\012\123\036\115\037\121\042\120\001\002\000\034\003" +
    "\ufec0\004\ufec0\011\ufec0\012\ufec0\032\ufec0\033\ufec0\034\137" +
    "\036\ufec0\037\ufec0\042\ufec0\044\ufec0\045\ufec0\047\ufec0\001" +
    "\002\000\032\003\ufec2\004\ufec2\011\ufec2\012\ufec2\032\ufec2" +
    "\033\135\036\ufec2\037\ufec2\042\ufec2\044\ufec2\045\ufec2\047" +
    "\ufec2\001\002\000\006\042\uffe4\045\152\001\002\000\036" +
    "\003\ufebb\004\ufebb\011\ufebb\012\ufebb\032\ufebb\033\ufebb\034" +
    "\ufebb\035\ufebb\036\ufebb\037\ufebb\042\ufebb\044\ufebb\045\ufebb" +
    "\047\ufebb\001\002\000\064\003\ufff8\004\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\025\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\042\ufff8\044\ufff8\045\ufff8\047\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\001\002\000\036\003\ufff2\004\ufff2\011" +
    "\ufff2\012\ufff2\025\ufff2\036\ufff2\037\ufff2\042\ufff2\044\ufff2" +
    "\045\ufff2\047\ufff2\053\ufff2\061\ufff2\062\ufff2\001\002\000" +
    "\004\042\151\001\002\000\064\003\ufffa\004\ufffa\011\ufffa" +
    "\012\ufffa\014\ufffa\025\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\042\ufffa\044\ufffa\045\ufffa\047\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\001\002\000\006\003\145\042\146" +
    "\001\002\000\036\003\ufff1\004\ufff1\011\ufff1\012\ufff1\025" +
    "\ufff1\036\ufff1\037\ufff1\042\ufff1\044\ufff1\045\ufff1\047\ufff1" +
    "\053\ufff1\061\ufff1\062\ufff1\001\002\000\050\003\ufffb\004" +
    "\ufffb\011\ufffb\012\ufffb\025\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\041\143\042\ufffb\044\ufffb\045" +
    "\ufffb\047\ufffb\053\ufffb\061\ufffb\062\ufffb\001\002\000\064" +
    "\003\ufff9\004\ufff9\011\ufff9\012\ufff9\014\ufff9\025\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\042\ufff9" +
    "\044\ufff9\045\ufff9\047\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002" +
    "\000\004\042\141\001\002\000\030\003\ufec5\004\ufec5\011" +
    "\ufec5\012\ufec5\032\133\036\ufec5\037\ufec5\042\ufec5\044\ufec5" +
    "\045\ufec5\047\ufec5\001\002\000\036\003\ufebc\004\ufebc\011" +
    "\ufebc\012\ufebc\032\ufebc\033\ufebc\034\ufebc\035\ufebc\036\ufebc" +
    "\037\ufebc\042\ufebc\044\ufebc\045\ufebc\047\ufebc\001\002\000" +
    "\026\003\ufec4\004\ufec4\011\ufec4\012\ufec4\036\ufec4\037\ufec4" +
    "\042\ufec4\044\ufec4\045\ufec4\047\ufec4\001\002\000\036\003" +
    "\ufebe\004\ufebe\011\ufebe\012\ufebe\032\ufebe\033\ufebe\034\ufebe" +
    "\035\131\036\ufebe\037\ufebe\042\ufebe\044\ufebe\045\ufebe\047" +
    "\ufebe\001\002\000\010\004\122\011\117\012\123\001\002" +
    "\000\036\003\ufebd\004\ufebd\011\ufebd\012\ufebd\032\ufebd\033" +
    "\ufebd\034\ufebd\035\ufebd\036\ufebd\037\ufebd\042\ufebd\044\ufebd" +
    "\045\ufebd\047\ufebd\001\002\000\010\004\122\011\117\012" +
    "\123\001\002\000\032\003\ufec3\004\ufec3\011\ufec3\012\ufec3" +
    "\032\ufec3\033\135\036\ufec3\037\ufec3\042\ufec3\044\ufec3\045" +
    "\ufec3\047\ufec3\001\002\000\010\004\122\011\117\012\123" +
    "\001\002\000\034\003\ufec1\004\ufec1\011\ufec1\012\ufec1\032" +
    "\ufec1\033\ufec1\034\137\036\ufec1\037\ufec1\042\ufec1\044\ufec1" +
    "\045\ufec1\047\ufec1\001\002\000\010\004\122\011\117\012" +
    "\123\001\002\000\036\003\ufebf\004\ufebf\011\ufebf\012\ufebf" +
    "\032\ufebf\033\ufebf\034\ufebf\035\131\036\ufebf\037\ufebf\042" +
    "\ufebf\044\ufebf\045\ufebf\047\ufebf\001\002\000\004\044\142" +
    "\001\002\000\032\003\ufedc\004\ufedc\021\ufedc\022\ufedc\023" +
    "\ufedc\025\ufedc\030\ufedc\031\ufedc\051\ufedc\052\ufedc\064\ufedc" +
    "\066\ufedc\001\002\000\016\004\122\011\117\012\123\036" +
    "\115\037\121\042\144\001\002\000\064\003\ufff7\004\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\025\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\042\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000\004\044\150" +
    "\001\002\000\004\044\147\001\002\000\032\003\ufeea\004" +
    "\ufeea\021\ufeea\022\ufeea\023\ufeea\025\ufeea\030\ufeea\031\ufeea" +
    "\051\ufeea\052\ufeea\064\ufeea\066\ufeea\001\002\000\032\003" +
    "\ufedb\004\ufedb\021\ufedb\022\ufedb\023\ufedb\025\ufedb\030\ufedb" +
    "\031\ufedb\051\ufedb\052\ufedb\064\ufedb\066\ufedb\001\002\000" +
    "\066\003\uffe6\004\uffe6\011\uffe6\012\uffe6\014\uffe6\025\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\001\002\000\014\004\122\011\117\012\123\036\115" +
    "\037\121\001\002\000\004\042\uffe5\001\002\000\032\003" +
    "\ufeec\004\ufeec\021\ufeec\022\ufeec\023\ufeec\025\ufeec\030\ufeec" +
    "\031\ufeec\051\ufeec\052\ufeec\064\ufeec\066\ufeec\001\002\000" +
    "\032\003\ufee3\004\ufee3\021\ufee3\022\ufee3\023\ufee3\025\ufee3" +
    "\030\ufee3\031\ufee3\051\ufee3\052\ufee3\064\ufee3\066\ufee3\001" +
    "\002\000\004\042\157\001\002\000\004\044\160\001\002" +
    "\000\032\003\ufedd\004\ufedd\021\ufedd\022\ufedd\023\ufedd\025" +
    "\ufedd\030\ufedd\031\ufedd\051\ufedd\052\ufedd\064\ufedd\066\ufedd" +
    "\001\002\000\006\041\166\042\165\001\002\000\004\042" +
    "\163\001\002\000\004\044\164\001\002\000\032\003\ufee2" +
    "\004\ufee2\021\ufee2\022\ufee2\023\ufee2\025\ufee2\030\ufee2\031" +
    "\ufee2\051\ufee2\052\ufee2\064\ufee2\066\ufee2\001\002\000\004" +
    "\044\172\001\002\000\016\004\122\011\117\012\123\036" +
    "\115\037\121\042\167\001\002\000\004\042\170\001\002" +
    "\000\004\044\171\001\002\000\032\003\ufedf\004\ufedf\021" +
    "\ufedf\022\ufedf\023\ufedf\025\ufedf\030\ufedf\031\ufedf\051\ufedf" +
    "\052\ufedf\064\ufedf\066\ufedf\001\002\000\032\003\ufee4\004" +
    "\ufee4\021\ufee4\022\ufee4\023\ufee4\025\ufee4\030\ufee4\031\ufee4" +
    "\051\ufee4\052\ufee4\064\ufee4\066\ufee4\001\002\000\006\003" +
    "\301\024\300\001\002\000\004\024\175\001\002\000\004" +
    "\011\176\001\002\000\004\043\177\001\002\000\004\043" +
    "\200\001\002\000\004\011\201\001\002\000\004\025\202" +
    "\001\002\000\022\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\064\203\066\045\001\002\000\006\003\216" +
    "\065\217\001\002\000\026\003\ufe74\004\052\021\ufe74\023" +
    "\062\025\047\030\053\031\065\051\050\064\203\066\045" +
    "\001\002\000\004\021\212\001\002\000\026\003\ufe72\004" +
    "\052\021\ufe72\023\062\025\047\030\053\031\065\051\050" +
    "\064\203\066\045\001\002\000\026\003\ufe70\004\052\021" +
    "\ufe70\023\062\025\047\030\053\031\065\051\050\064\203" +
    "\066\045\001\002\000\006\003\ufe71\021\ufe71\001\002\000" +
    "\006\003\ufe73\021\ufe73\001\002\000\004\025\213\001\002" +
    "\000\004\044\214\001\002\000\032\003\ufe8d\004\ufe8d\021" +
    "\ufe8d\022\ufe8d\023\ufe8d\025\ufe8d\030\ufe8d\031\ufe8d\051\ufe8d" +
    "\052\ufe8d\064\ufe8d\066\ufe8d\001\002\000\006\003\ufe75\021" +
    "\ufe75\001\002\000\020\003\233\004\222\011\117\012\123" +
    "\036\115\037\121\041\221\001\002\000\020\003\224\004" +
    "\222\011\117\012\123\036\115\037\121\041\221\001\002" +
    "\000\020\014\236\054\243\055\235\056\244\057\237\060" +
    "\240\063\242\001\002\000\020\003\261\004\222\011\117" +
    "\012\123\036\115\037\121\041\221\001\002\000\034\003" +
    "\ufeaa\014\254\025\ufeaa\041\143\042\ufeaa\044\ufeaa\053\ufeaa" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\063\ufffb\001" +
    "\002\000\014\003\ufeb1\025\ufeb1\042\ufeb1\044\ufeb1\053\ufeb1" +
    "\001\002\000\040\003\233\004\222\011\117\012\123\014" +
    "\236\036\115\037\121\041\221\044\253\054\243\055\235" +
    "\056\244\057\237\060\240\063\242\001\002\000\020\003" +
    "\ufea4\025\ufea4\042\ufea4\044\ufea4\053\ufea4\061\230\062\232" +
    "\001\002\000\004\044\227\001\002\000\026\003\ufe6f\004" +
    "\ufe6f\021\ufe6f\023\ufe6f\025\ufe6f\030\ufe6f\031\ufe6f\051\ufe6f" +
    "\064\ufe6f\066\ufe6f\001\002\000\020\003\233\004\222\011" +
    "\117\012\123\036\115\037\121\041\221\001\002\000\014" +
    "\003\ufeab\025\ufeab\042\ufeab\044\ufeab\053\ufeab\001\002\000" +
    "\020\003\233\004\222\011\117\012\123\036\115\037\121" +
    "\041\221\001\002\000\036\003\233\004\222\011\117\012" +
    "\123\014\236\036\115\037\121\041\221\054\243\055\235" +
    "\056\244\057\237\060\240\063\242\001\002\000\014\003" +
    "\ufea5\025\ufea5\042\ufea5\044\ufea5\053\ufea5\001\002\000\012" +
    "\003\ufff0\004\ufff0\011\ufff0\012\ufff0\001\002\000\012\003" +
    "\uffec\004\uffec\011\uffec\012\uffec\001\002\000\012\003\uffee" +
    "\004\uffee\011\uffee\012\uffee\001\002\000\012\003\uffea\004" +
    "\uffea\011\uffea\012\uffea\001\002\000\004\042\250\001\002" +
    "\000\012\003\uffeb\004\uffeb\011\uffeb\012\uffeb\001\002\000" +
    "\012\003\uffef\004\uffef\011\uffef\012\uffef\001\002\000\012" +
    "\003\uffed\004\uffed\011\uffed\012\uffed\001\002\000\010\004" +
    "\122\011\117\012\123\001\002\000\020\003\ufea4\025\ufea4" +
    "\042\ufea4\044\ufea4\053\ufea4\061\230\062\232\001\002\000" +
    "\014\003\ufea9\025\ufea9\042\ufea9\044\ufea9\053\ufea9\001\002" +
    "\000\020\003\ufea4\025\ufea4\042\ufea4\044\ufea4\053\ufea4\061" +
    "\230\062\232\001\002\000\014\003\ufeb0\025\ufeb0\042\ufeb0" +
    "\044\ufeb0\053\ufeb0\001\002\000\014\003\ufea6\025\ufea6\042" +
    "\ufea6\044\ufea6\053\ufea6\001\002\000\026\003\ufe6d\004\ufe6d" +
    "\021\ufe6d\023\ufe6d\025\ufe6d\030\ufe6d\031\ufe6d\051\ufe6d\064" +
    "\ufe6d\066\ufe6d\001\002\000\010\003\256\036\115\037\121" +
    "\001\002\000\020\003\ufea4\025\ufea4\042\ufea4\044\ufea4\053" +
    "\ufea4\061\230\062\232\001\002\000\020\003\ufea4\025\ufea4" +
    "\042\ufea4\044\ufea4\053\ufea4\061\230\062\232\001\002\000" +
    "\014\003\ufea8\025\ufea8\042\ufea8\044\ufea8\053\ufea8\001\002" +
    "\000\014\003\ufeac\025\ufeac\042\ufeac\044\ufeac\053\ufeac\001" +
    "\002\000\040\003\233\004\222\011\117\012\123\014\236" +
    "\036\115\037\121\041\221\042\267\054\243\055\235\056" +
    "\244\057\237\060\240\063\242\001\002\000\006\003\263" +
    "\042\264\001\002\000\020\003\ufea4\025\ufea4\042\ufea4\044" +
    "\ufea4\053\ufea4\061\230\062\232\001\002\000\020\003\ufea4" +
    "\025\ufea4\042\ufea4\044\ufea4\053\ufea4\061\230\062\232\001" +
    "\002\000\014\003\ufeb2\025\ufeb2\042\ufeb2\044\ufeb2\053\ufeb2" +
    "\001\002\000\014\003\ufeae\025\ufeae\042\ufeae\044\ufeae\053" +
    "\ufeae\001\002\000\020\003\ufea4\025\ufea4\042\ufea4\044\ufea4" +
    "\053\ufea4\061\230\062\232\001\002\000\014\003\ufeaf\025" +
    "\ufeaf\042\ufeaf\044\ufeaf\053\ufeaf\001\002\000\012\003\272" +
    "\004\122\011\117\012\123\001\002\000\020\003\ufea4\025" +
    "\ufea4\042\ufea4\044\ufea4\053\ufea4\061\230\062\232\001\002" +
    "\000\020\003\ufea4\025\ufea4\042\ufea4\044\ufea4\053\ufea4\061" +
    "\230\062\232\001\002\000\014\003\ufead\025\ufead\042\ufead" +
    "\044\ufead\053\ufead\001\002\000\014\003\ufea7\025\ufea7\042" +
    "\ufea7\044\ufea7\053\ufea7\001\002\000\004\044\277\001\002" +
    "\000\026\003\ufe6e\004\ufe6e\021\ufe6e\023\ufe6e\025\ufe6e\030" +
    "\ufe6e\031\ufe6e\051\ufe6e\064\ufe6e\066\ufe6e\001\002\000\006" +
    "\003\314\011\313\001\002\000\004\011\302\001\002\000" +
    "\004\043\303\001\002\000\004\043\304\001\002\000\004" +
    "\011\305\001\002\000\004\025\306\001\002\000\022\004" +
    "\052\023\062\025\047\030\053\031\065\051\050\064\203" +
    "\066\045\001\002\000\004\021\310\001\002\000\004\025" +
    "\311\001\002\000\004\044\312\001\002\000\032\003\ufe8c" +
    "\004\ufe8c\021\ufe8c\022\ufe8c\023\ufe8c\025\ufe8c\030\ufe8c\031" +
    "\ufe8c\051\ufe8c\052\ufe8c\064\ufe8c\066\ufe8c\001\002\000\006" +
    "\003\326\043\325\001\002\000\004\043\315\001\002\000" +
    "\004\043\316\001\002\000\004\011\317\001\002\000\004" +
    "\025\320\001\002\000\022\004\052\023\062\025\047\030" +
    "\053\031\065\051\050\064\203\066\045\001\002\000\004" +
    "\021\322\001\002\000\004\025\323\001\002\000\004\044" +
    "\324\001\002\000\032\003\ufe8b\004\ufe8b\021\ufe8b\022\ufe8b" +
    "\023\ufe8b\025\ufe8b\030\ufe8b\031\ufe8b\051\ufe8b\052\ufe8b\064" +
    "\ufe8b\066\ufe8b\001\002\000\006\003\337\043\336\001\002" +
    "\000\004\043\327\001\002\000\004\011\330\001\002\000" +
    "\004\025\331\001\002\000\022\004\052\023\062\025\047" +
    "\030\053\031\065\051\050\064\203\066\045\001\002\000" +
    "\004\021\333\001\002\000\004\025\334\001\002\000\004" +
    "\044\335\001\002\000\032\003\ufe8a\004\ufe8a\021\ufe8a\022" +
    "\ufe8a\023\ufe8a\025\ufe8a\030\ufe8a\031\ufe8a\051\ufe8a\052\ufe8a" +
    "\064\ufe8a\066\ufe8a\001\002\000\006\003\347\011\346\001" +
    "\002\000\004\011\340\001\002\000\004\025\341\001\002" +
    "\000\022\004\052\023\062\025\047\030\053\031\065\051" +
    "\050\064\203\066\045\001\002\000\004\021\343\001\002" +
    "\000\004\025\344\001\002\000\004\044\345\001\002\000" +
    "\032\003\ufe89\004\ufe89\021\ufe89\022\ufe89\023\ufe89\025\ufe89" +
    "\030\ufe89\031\ufe89\051\ufe89\052\ufe89\064\ufe89\066\ufe89\001" +
    "\002\000\006\003\355\025\356\001\002\000\004\025\350" +
    "\001\002\000\022\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\064\203\066\045\001\002\000\004\021\352" +
    "\001\002\000\004\025\353\001\002\000\004\044\354\001" +
    "\002\000\032\003\ufe88\004\ufe88\021\ufe88\022\ufe88\023\ufe88" +
    "\025\ufe88\030\ufe88\031\ufe88\051\ufe88\052\ufe88\064\ufe88\066" +
    "\ufe88\001\002\000\022\004\052\023\062\025\047\030\053" +
    "\031\065\051\050\064\203\066\045\001\002\000\024\003" +
    "\360\004\052\023\062\025\047\030\053\031\065\051\050" +
    "\064\203\066\045\001\002\000\006\003\364\021\365\001" +
    "\002\000\004\021\361\001\002\000\004\025\362\001\002" +
    "\000\004\044\363\001\002\000\032\003\ufe86\004\ufe86\021" +
    "\ufe86\022\ufe86\023\ufe86\025\ufe86\030\ufe86\031\ufe86\051\ufe86" +
    "\052\ufe86\064\ufe86\066\ufe86\001\002\000\004\025\373\001" +
    "\002\000\006\003\366\025\367\001\002\000\004\044\372" +
    "\001\002\000\006\003\370\044\371\001\002\000\032\003" +
    "\ufe83\004\ufe83\021\ufe83\022\ufe83\023\ufe83\025\ufe83\030\ufe83" +
    "\031\ufe83\051\ufe83\052\ufe83\064\ufe83\066\ufe83\001\002\000" +
    "\032\003\ufe8e\004\ufe8e\021\ufe8e\022\ufe8e\023\ufe8e\025\ufe8e" +
    "\030\ufe8e\031\ufe8e\051\ufe8e\052\ufe8e\064\ufe8e\066\ufe8e\001" +
    "\002\000\032\003\ufe84\004\ufe84\021\ufe84\022\ufe84\023\ufe84" +
    "\025\ufe84\030\ufe84\031\ufe84\051\ufe84\052\ufe84\064\ufe84\066" +
    "\ufe84\001\002\000\004\044\374\001\002\000\032\003\ufe85" +
    "\004\ufe85\021\ufe85\022\ufe85\023\ufe85\025\ufe85\030\ufe85\031" +
    "\ufe85\051\ufe85\052\ufe85\064\ufe85\066\ufe85\001\002\000\004" +
    "\021\376\001\002\000\004\025\377\001\002\000\004\044" +
    "\u0100\001\002\000\032\003\ufe87\004\ufe87\021\ufe87\022\ufe87" +
    "\023\ufe87\025\ufe87\030\ufe87\031\ufe87\051\ufe87\052\ufe87\064" +
    "\ufe87\066\ufe87\001\002\000\012\003\ufef8\021\ufef8\022\ufef8" +
    "\052\ufef8\001\002\000\006\003\u0103\014\u0104\001\002\000" +
    "\014\004\122\011\117\012\123\036\115\037\121\001\002" +
    "\000\016\003\u0107\004\122\011\117\012\123\036\115\037" +
    "\121\001\002\000\006\003\u0109\044\u010a\001\002\000\032" +
    "\003\ufec7\004\ufec7\021\ufec7\022\ufec7\023\ufec7\025\ufec7\030" +
    "\ufec7\031\ufec7\051\ufec7\052\ufec7\064\ufec7\066\ufec7\001\002" +
    "\000\004\044\u0108\001\002\000\032\003\ufeca\004\ufeca\021" +
    "\ufeca\022\ufeca\023\ufeca\025\ufeca\030\ufeca\031\ufeca\051\ufeca" +
    "\052\ufeca\064\ufeca\066\ufeca\001\002\000\032\003\ufec9\004" +
    "\ufec9\021\ufec9\022\ufec9\023\ufec9\025\ufec9\030\ufec9\031\ufec9" +
    "\051\ufec9\052\ufec9\064\ufec9\066\ufec9\001\002\000\032\003" +
    "\ufecb\004\ufecb\021\ufecb\022\ufecb\023\ufecb\025\ufecb\030\ufecb" +
    "\031\ufecb\051\ufecb\052\ufecb\064\ufecb\066\ufecb\001\002\000" +
    "\004\044\u010c\001\002\000\032\003\ufec6\004\ufec6\021\ufec6" +
    "\022\ufec6\023\ufec6\025\ufec6\030\ufec6\031\ufec6\051\ufec6\052" +
    "\ufec6\064\ufec6\066\ufec6\001\002\000\006\004\u014a\047\u014b" +
    "\001\002\000\010\003\u0110\004\u010f\047\u0112\001\002\000" +
    "\010\003\u0135\041\u0137\042\u0136\001\002\000\020\004\122" +
    "\011\117\012\123\036\115\037\121\041\u012e\042\u012d\001" +
    "\002\000\006\003\u0128\042\u0129\001\002\000\016\003\u0114" +
    "\004\ufee9\011\ufee9\012\ufee9\036\ufee9\037\ufee9\001\002\000" +
    "\014\004\122\011\117\012\123\036\115\037\121\001\002" +
    "\000\032\003\ufece\004\ufece\021\ufece\022\ufece\023\ufece\025" +
    "\ufece\030\ufece\031\ufece\051\ufece\052\ufece\064\ufece\066\ufece" +
    "\001\002\000\020\003\ufecc\004\122\011\117\012\123\036" +
    "\115\037\121\047\ufecc\001\002\000\006\003\u0118\047\u0119" +
    "\001\002\000\032\003\ufee8\004\ufee8\021\ufee8\022\ufee8\023" +
    "\ufee8\025\ufee8\030\ufee8\031\ufee8\051\ufee8\052\ufee8\064\ufee8" +
    "\066\ufee8\001\002\000\004\042\u0124\001\002\000\006\003" +
    "\u011a\042\u011b\001\002\000\004\044\u0122\001\002\000\006" +
    "\003\u011c\044\u011d\001\002\000\034\003\ufeed\004\ufeed\021" +
    "\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed\031\ufeed\050\u011f" +
    "\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001\002\000\034\003" +
    "\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed" +
    "\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001" +
    "\002\000\032\003\ufef2\004\ufef2\021\ufef2\022\ufef2\023\ufef2" +
    "\025\ufef2\030\ufef2\031\ufef2\051\ufef2\052\ufef2\064\ufef2\066" +
    "\ufef2\001\002\000\004\044\u0120\001\002\000\032\003\ufeee" +
    "\004\ufeee\021\ufeee\022\ufeee\023\ufeee\025\ufeee\030\ufeee\031" +
    "\ufeee\051\ufeee\052\ufeee\064\ufeee\066\ufeee\001\002\000\032" +
    "\003\ufeef\004\ufeef\021\ufeef\022\ufeef\023\ufeef\025\ufeef\030" +
    "\ufeef\031\ufeef\051\ufeef\052\ufeef\064\ufeef\066\ufeef\001\002" +
    "\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025" +
    "\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed" +
    "\066\ufeed\001\002\000\032\003\ufef0\004\ufef0\021\ufef0\022" +
    "\ufef0\023\ufef0\025\ufef0\030\ufef0\031\ufef0\051\ufef0\052\ufef0" +
    "\064\ufef0\066\ufef0\001\002\000\004\044\u0125\001\002\000" +
    "\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025\ufeed" +
    "\030\ufeed\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed\066" +
    "\ufeed\001\002\000\032\003\ufef1\004\ufef1\021\ufef1\022\ufef1" +
    "\023\ufef1\025\ufef1\030\ufef1\031\ufef1\051\ufef1\052\ufef1\064" +
    "\ufef1\066\ufef1\001\002\000\006\003\ufecd\047\ufecd\001\002" +
    "\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025" +
    "\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed" +
    "\066\ufeed\001\002\000\004\044\u012a\001\002\000\034\003" +
    "\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed" +
    "\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001" +
    "\002\000\032\003\ufee6\004\ufee6\021\ufee6\022\ufee6\023\ufee6" +
    "\025\ufee6\030\ufee6\031\ufee6\051\ufee6\052\ufee6\064\ufee6\066" +
    "\ufee6\001\002\000\032\003\ufed6\004\ufed6\021\ufed6\022\ufed6" +
    "\023\ufed6\025\ufed6\030\ufed6\031\ufed6\051\ufed6\052\ufed6\064" +
    "\ufed6\066\ufed6\001\002\000\034\003\ufeed\004\ufeed\021\ufeed" +
    "\022\ufeed\023\ufeed\025\ufeed\030\ufeed\031\ufeed\050\u011f\051" +
    "\ufeed\052\ufeed\064\ufeed\066\ufeed\001\002\000\004\042\u0130" +
    "\001\002\000\032\003\ufecf\004\ufecf\021\ufecf\022\ufecf\023" +
    "\ufecf\025\ufecf\030\ufecf\031\ufecf\051\ufecf\052\ufecf\064\ufecf" +
    "\066\ufecf\001\002\000\004\042\u0131\001\002\000\004\044" +
    "\u0132\001\002\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed" +
    "\023\ufeed\025\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052" +
    "\ufeed\064\ufeed\066\ufeed\001\002\000\032\003\ufed4\004\ufed4" +
    "\021\ufed4\022\ufed4\023\ufed4\025\ufed4\030\ufed4\031\ufed4\051" +
    "\ufed4\052\ufed4\064\ufed4\066\ufed4\001\002\000\032\003\ufed7" +
    "\004\ufed7\021\ufed7\022\ufed7\023\ufed7\025\ufed7\030\ufed7\031" +
    "\ufed7\051\ufed7\052\ufed7\064\ufed7\066\ufed7\001\002\000\036" +
    "\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030" +
    "\ufeed\031\ufeed\042\u0146\050\u011f\051\ufeed\052\ufeed\064\ufeed" +
    "\066\ufeed\001\002\000\004\044\u0143\001\002\000\020\003" +
    "\u0139\004\122\011\117\012\123\036\115\037\121\042\u0138" +
    "\001\002\000\006\003\u013d\042\u013e\001\002\000\004\042" +
    "\u013a\001\002\000\004\044\u013b\001\002\000\034\003\ufeed" +
    "\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed\031" +
    "\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001\002" +
    "\000\032\003\ufed2\004\ufed2\021\ufed2\022\ufed2\023\ufed2\025" +
    "\ufed2\030\ufed2\031\ufed2\051\ufed2\052\ufed2\064\ufed2\066\ufed2" +
    "\001\002\000\004\044\u0141\001\002\000\004\044\u013f\001" +
    "\002\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed" +
    "\025\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052\ufeed\064" +
    "\ufeed\066\ufeed\001\002\000\032\003\ufee5\004\ufee5\021\ufee5" +
    "\022\ufee5\023\ufee5\025\ufee5\030\ufee5\031\ufee5\051\ufee5\052" +
    "\ufee5\064\ufee5\066\ufee5\001\002\000\034\003\ufeed\004\ufeed" +
    "\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed\031\ufeed\050" +
    "\u011f\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001\002\000\032" +
    "\003\ufed1\004\ufed1\021\ufed1\022\ufed1\023\ufed1\025\ufed1\030" +
    "\ufed1\031\ufed1\051\ufed1\052\ufed1\064\ufed1\066\ufed1\001\002" +
    "\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025" +
    "\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed" +
    "\066\ufeed\001\002\000\032\003\ufee7\004\ufee7\021\ufee7\022" +
    "\ufee7\023\ufee7\025\ufee7\030\ufee7\031\ufee7\051\ufee7\052\ufee7" +
    "\064\ufee7\066\ufee7\001\002\000\032\003\ufed9\004\ufed9\021" +
    "\ufed9\022\ufed9\023\ufed9\025\ufed9\030\ufed9\031\ufed9\051\ufed9" +
    "\052\ufed9\064\ufed9\066\ufed9\001\002\000\004\042\u0147\001" +
    "\002\000\004\044\u0148\001\002\000\034\003\ufeed\004\ufeed" +
    "\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed\031\ufeed\050" +
    "\u011f\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001\002\000\032" +
    "\003\ufed3\004\ufed3\021\ufed3\022\ufed3\023\ufed3\025\ufed3\030" +
    "\ufed3\031\ufed3\051\ufed3\052\ufed3\064\ufed3\066\ufed3\001\002" +
    "\000\006\041\u0151\042\u0150\001\002\000\014\004\122\011" +
    "\117\012\123\036\115\037\121\001\002\000\004\042\u014d" +
    "\001\002\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed\023" +
    "\ufeed\025\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052\ufeed" +
    "\064\ufeed\066\ufeed\001\002\000\032\003\ufed8\004\ufed8\021" +
    "\ufed8\022\ufed8\023\ufed8\025\ufed8\030\ufed8\031\ufed8\051\ufed8" +
    "\052\ufed8\064\ufed8\066\ufed8\001\002\000\032\003\ufed0\004" +
    "\ufed0\021\ufed0\022\ufed0\023\ufed0\025\ufed0\030\ufed0\031\ufed0" +
    "\051\ufed0\052\ufed0\064\ufed0\066\ufed0\001\002\000\034\003" +
    "\ufeed\004\ufeed\021\ufeed\022\ufeed\023\ufeed\025\ufeed\030\ufeed" +
    "\031\ufeed\050\u011f\051\ufeed\052\ufeed\064\ufeed\066\ufeed\001" +
    "\002\000\016\004\122\011\117\012\123\036\115\037\121" +
    "\042\u0152\001\002\000\004\042\u0153\001\002\000\004\044" +
    "\u0154\001\002\000\034\003\ufeed\004\ufeed\021\ufeed\022\ufeed" +
    "\023\ufeed\025\ufeed\030\ufeed\031\ufeed\050\u011f\051\ufeed\052" +
    "\ufeed\064\ufeed\066\ufeed\001\002\000\032\003\ufed5\004\ufed5" +
    "\021\ufed5\022\ufed5\023\ufed5\025\ufed5\030\ufed5\031\ufed5\051" +
    "\ufed5\052\ufed5\064\ufed5\066\ufed5\001\002\000\032\003\ufeda" +
    "\004\ufeda\021\ufeda\022\ufeda\023\ufeda\025\ufeda\030\ufeda\031" +
    "\ufeda\051\ufeda\052\ufeda\064\ufeda\066\ufeda\001\002\000\004" +
    "\014\u0159\001\002\000\014\004\122\011\117\012\123\036" +
    "\115\037\121\001\002\000\016\003\u0107\004\122\011\117" +
    "\012\123\036\115\037\121\001\002\000\032\003\ufec8\004" +
    "\ufec8\021\ufec8\022\ufec8\023\ufec8\025\ufec8\030\ufec8\031\ufec8" +
    "\051\ufec8\052\ufec8\064\ufec8\066\ufec8\001\002\000\040\003" +
    "\233\004\222\011\117\012\123\014\236\036\115\037\121" +
    "\041\221\053\u0172\054\243\055\235\056\244\057\237\060" +
    "\240\063\242\001\002\000\006\003\u015d\053\u015e\001\002" +
    "\000\020\004\052\023\062\025\047\030\053\031\065\051" +
    "\050\066\045\001\002\000\026\003\u0163\004\052\021\u0161" +
    "\023\062\025\047\030\053\031\065\051\050\052\u015f\066" +
    "\045\001\002\000\022\003\u016d\004\052\023\062\025\047" +
    "\030\053\031\065\051\050\066\045\001\002\000\010\003" +
    "\u016b\021\u0161\052\u015f\001\002\000\006\003\u0165\051\u0166" +
    "\001\002\000\032\003\ufea3\004\ufea3\021\ufea3\022\ufea3\023" +
    "\ufea3\025\ufea3\030\ufea3\031\ufea3\051\ufea3\052\ufea3\064\ufea3" +
    "\066\ufea3\001\002\000\006\021\u0161\052\u015f\001\002\000" +
    "\032\003\ufe9f\004\ufe9f\021\ufe9f\022\ufe9f\023\ufe9f\025\ufe9f" +
    "\030\ufe9f\031\ufe9f\051\ufe9f\052\ufe9f\064\ufe9f\066\ufe9f\001" +
    "\002\000\004\044\u0169\001\002\000\006\003\u0167\044\u0168" +
    "\001\002\000\032\003\ufe99\004\ufe99\021\ufe99\022\ufe99\023" +
    "\ufe99\025\ufe99\030\ufe99\031\ufe99\051\ufe99\052\ufe99\064\ufe99" +
    "\066\ufe99\001\002\000\032\003\ufe9c\004\ufe9c\021\ufe9c\022" +
    "\ufe9c\023\ufe9c\025\ufe9c\030\ufe9c\031\ufe9c\051\ufe9c\052\ufe9c" +
    "\064\ufe9c\066\ufe9c\001\002\000\032\003\ufe9a\004\ufe9a\021" +
    "\ufe9a\022\ufe9a\023\ufe9a\025\ufe9a\030\ufe9a\031\ufe9a\051\ufe9a" +
    "\052\ufe9a\064\ufe9a\066\ufe9a\001\002\000\032\003\ufea2\004" +
    "\ufea2\021\ufea2\022\ufea2\023\ufea2\025\ufea2\030\ufea2\031\ufea2" +
    "\051\ufea2\052\ufea2\064\ufea2\066\ufea2\001\002\000\032\003" +
    "\ufe9e\004\ufe9e\021\ufe9e\022\ufe9e\023\ufe9e\025\ufe9e\030\ufe9e" +
    "\031\ufe9e\051\ufe9e\052\ufe9e\064\ufe9e\066\ufe9e\001\002\000" +
    "\006\021\u0161\052\u015f\001\002\000\006\021\u0161\052\u015f" +
    "\001\002\000\032\003\ufe9b\004\ufe9b\021\ufe9b\022\ufe9b\023" +
    "\ufe9b\025\ufe9b\030\ufe9b\031\ufe9b\051\ufe9b\052\ufe9b\064\ufe9b" +
    "\066\ufe9b\001\002\000\032\003\ufe9d\004\ufe9d\021\ufe9d\022" +
    "\ufe9d\023\ufe9d\025\ufe9d\030\ufe9d\031\ufe9d\051\ufe9d\052\ufe9d" +
    "\064\ufe9d\066\ufe9d\001\002\000\006\021\u0161\052\u015f\001" +
    "\002\000\032\003\ufea0\004\ufea0\021\ufea0\022\ufea0\023\ufea0" +
    "\025\ufea0\030\ufea0\031\ufea0\051\ufea0\052\ufea0\064\ufea0\066" +
    "\ufea0\001\002\000\020\004\052\023\062\025\047\030\053" +
    "\031\065\051\050\066\045\001\002\000\006\021\u0161\052" +
    "\u015f\001\002\000\032\003\ufea1\004\ufea1\021\ufea1\022\ufea1" +
    "\023\ufea1\025\ufea1\030\ufea1\031\ufea1\051\ufea1\052\ufea1\064" +
    "\ufea1\066\ufea1\001\002\000\024\003\u0178\004\052\023\062" +
    "\025\047\030\053\031\065\051\050\064\203\066\045\001" +
    "\002\000\032\003\ufe7a\004\ufe7a\021\ufe7a\022\ufe7a\023\ufe7a" +
    "\025\ufe7a\030\ufe7a\031\ufe7a\051\ufe7a\052\ufe7a\064\ufe7a\066" +
    "\ufe7a\001\002\000\006\003\u017c\021\u017d\001\002\000\004" +
    "\021\u0179\001\002\000\004\025\u017a\001\002\000\004\044" +
    "\u017b\001\002\000\032\003\ufe78\004\ufe78\021\ufe78\022\ufe78" +
    "\023\ufe78\025\ufe78\030\ufe78\031\ufe78\051\ufe78\052\ufe78\064" +
    "\ufe78\066\ufe78\001\002\000\004\025\u0182\001\002\000\006" +
    "\003\u017e\025\u017f\001\002\000\004\044\u0181\001\002\000" +
    "\004\044\u0180\001\002\000\032\003\ufe79\004\ufe79\021\ufe79" +
    "\022\ufe79\023\ufe79\025\ufe79\030\ufe79\031\ufe79\051\ufe79\052" +
    "\ufe79\064\ufe79\066\ufe79\001\002\000\032\003\ufe76\004\ufe76" +
    "\021\ufe76\022\ufe76\023\ufe76\025\ufe76\030\ufe76\031\ufe76\051" +
    "\ufe76\052\ufe76\064\ufe76\066\ufe76\001\002\000\004\044\u0183" +
    "\001\002\000\032\003\ufe77\004\ufe77\021\ufe77\022\ufe77\023" +
    "\ufe77\025\ufe77\030\ufe77\031\ufe77\051\ufe77\052\ufe77\064\ufe77" +
    "\066\ufe77\001\002\000\040\003\233\004\222\011\117\012" +
    "\123\014\236\025\u019a\036\115\037\121\041\221\054\243" +
    "\055\235\056\244\057\237\060\240\063\242\001\002\000" +
    "\006\003\u0186\025\u0187\001\002\000\022\004\052\023\062" +
    "\025\047\030\053\031\065\051\050\064\203\066\045\001" +
    "\002\000\024\003\u0189\004\052\023\062\025\047\030\053" +
    "\031\065\051\050\064\203\066\045\001\002\000\006\003" +
    "\u018d\021\u018e\001\002\000\004\021\u018a\001\002\000\004" +
    "\025\u018b\001\002\000\004\044\u018c\001\002\000\032\003" +
    "\ufe7f\004\ufe7f\021\ufe7f\022\ufe7f\023\ufe7f\025\ufe7f\030\ufe7f" +
    "\031\ufe7f\051\ufe7f\052\ufe7f\064\ufe7f\066\ufe7f\001\002\000" +
    "\004\025\u0194\001\002\000\006\003\u018f\025\u0190\001\002" +
    "\000\004\044\u0193\001\002\000\006\003\u0191\044\u0192\001" +
    "\002\000\032\003\ufe7c\004\ufe7c\021\ufe7c\022\ufe7c\023\ufe7c" +
    "\025\ufe7c\030\ufe7c\031\ufe7c\051\ufe7c\052\ufe7c\064\ufe7c\066" +
    "\ufe7c\001\002\000\032\003\ufe82\004\ufe82\021\ufe82\022\ufe82" +
    "\023\ufe82\025\ufe82\030\ufe82\031\ufe82\051\ufe82\052\ufe82\064" +
    "\ufe82\066\ufe82\001\002\000\032\003\ufe7d\004\ufe7d\021\ufe7d" +
    "\022\ufe7d\023\ufe7d\025\ufe7d\030\ufe7d\031\ufe7d\051\ufe7d\052" +
    "\ufe7d\064\ufe7d\066\ufe7d\001\002\000\004\044\u0195\001\002" +
    "\000\032\003\ufe7e\004\ufe7e\021\ufe7e\022\ufe7e\023\ufe7e\025" +
    "\ufe7e\030\ufe7e\031\ufe7e\051\ufe7e\052\ufe7e\064\ufe7e\066\ufe7e" +
    "\001\002\000\004\021\u0197\001\002\000\004\025\u0198\001" +
    "\002\000\004\044\u0199\001\002\000\032\003\ufe80\004\ufe80" +
    "\021\ufe80\022\ufe80\023\ufe80\025\ufe80\030\ufe80\031\ufe80\051" +
    "\ufe80\052\ufe80\064\ufe80\066\ufe80\001\002\000\022\004\052" +
    "\023\062\025\047\030\053\031\065\051\050\064\203\066" +
    "\045\001\002\000\004\021\u019c\001\002\000\004\025\u019d" +
    "\001\002\000\004\044\u019e\001\002\000\032\003\ufe81\004" +
    "\ufe81\021\ufe81\022\ufe81\023\ufe81\025\ufe81\030\ufe81\031\ufe81" +
    "\051\ufe81\052\ufe81\064\ufe81\066\ufe81\001\002\000\004\002" +
    "\uff83\001\002\000\006\003\u01a2\004\u01a1\001\002\000\006" +
    "\003\u01a4\044\u01a5\001\002\000\004\044\u01a3\001\002\000" +
    "\020\002\uffe7\003\uffe7\004\uffe7\015\uffe7\016\uffe7\020\uffe7" +
    "\040\uffe7\001\002\000\020\002\uffe8\003\uffe8\004\uffe8\015" +
    "\uffe8\016\uffe8\020\uffe8\040\uffe8\001\002\000\020\002\uffe9" +
    "\003\uffe9\004\uffe9\015\uffe9\016\uffe9\020\uffe9\040\uffe9\001" +
    "\002\000\012\003\ufef9\021\ufef9\022\ufef9\052\ufef9\001\002" +
    "\000\032\003\ufeba\004\ufeba\021\ufeba\022\ufeba\023\ufeba\025" +
    "\ufeba\030\ufeba\031\ufeba\051\ufeba\052\ufeba\064\ufeba\066\ufeba" +
    "\001\002\000\010\003\uff0e\022\uff0e\041\uff0e\001\002\000" +
    "\010\003\u01ab\022\u01ac\041\u01ad\001\002\000\004\020\uff0a" +
    "\001\002\000\014\003\u037d\004\u01ae\006\u01b7\007\u01b6\010" +
    "\u01b8\001\002\000\012\003\u03a4\006\u01b7\007\u01b6\010\u01b8" +
    "\001\002\000\006\003\u01af\004\u01ae\001\002\000\010\003" +
    "\u0399\045\u0369\046\u036d\001\002\000\012\003\u036b\042\u036f" +
    "\045\u0369\046\u036d\001\002\000\004\042\u01b1\001\002\000" +
    "\006\003\u01b2\022\u01b3\001\002\000\010\006\u01b7\007\u01b6" +
    "\010\u01b8\001\002\000\012\003\u01b4\006\u01b7\007\u01b6\010" +
    "\u01b8\001\002\000\004\017\u0359\001\002\000\006\003\u01b9" +
    "\017\u01ba\001\002\000\014\003\ufffd\017\ufffd\042\ufffd\044" +
    "\ufffd\046\ufffd\001\002\000\014\003\ufffc\017\ufffc\042\ufffc" +
    "\044\ufffc\046\ufffc\001\002\000\014\003\ufffe\017\ufffe\042" +
    "\ufffe\044\ufffe\046\ufffe\001\002\000\016\003\036\004\035" +
    "\015\031\016\040\020\u0351\040\033\001\002\000\016\003" +
    "\uffd7\004\uffd7\015\uffd7\016\uffd7\020\uffd7\040\uffd7\001\002" +
    "\000\016\003\u01be\004\035\015\031\016\040\020\u01bf\040" +
    "\033\001\002\000\016\003\uffd6\004\uffd6\015\uffd6\016\uffd6" +
    "\020\uffd6\040\uffd6\001\002\000\004\020\u034e\001\002\000" +
    "\034\003\036\004\u0200\015\031\016\040\023\062\025\047" +
    "\030\053\031\065\040\033\045\u0202\046\u01fd\051\u01c1\066" +
    "\045\001\002\000\022\003\u01c4\004\052\023\062\025\047" +
    "\030\053\031\065\051\u01c1\066\045\001\002\000\024\003" +
    "\uffa3\004\052\022\uffa3\023\062\025\047\030\053\031\065" +
    "\051\u01c1\066\045\001\002\000\020\003\u01d8\004\222\011" +
    "\117\012\123\036\115\037\121\041\221\001\002\000\006" +
    "\003\u01d3\022\u01cc\001\002\000\024\003\uffa0\004\052\022" +
    "\uffa0\023\062\025\047\030\053\031\065\051\u01c1\066\045" +
    "\001\002\000\004\022\u01cc\001\002\000\024\003\uffa2\004" +
    "\052\022\uffa2\023\062\025\047\030\053\031\065\051\u01c1" +
    "\066\045\001\002\000\024\003\uffa1\004\052\022\uffa1\023" +
    "\062\025\047\030\053\031\065\051\u01c1\066\045\001\002" +
    "\000\024\003\uff9f\004\052\022\uff9f\023\062\025\047\030" +
    "\053\031\065\051\u01c1\066\045\001\002\000\016\003\uffda" +
    "\004\uffda\015\uffda\016\uffda\020\uffda\040\uffda\001\002\000" +
    "\006\003\uffa4\022\uffa4\001\002\000\006\003\uffa6\022\uffa6" +
    "\001\002\000\006\003\uffa7\022\uffa7\001\002\000\016\004" +
    "\122\011\117\012\123\036\115\037\121\044\u01d0\001\002" +
    "\000\004\021\u01a0\001\002\000\016\003\uffde\004\uffde\015" +
    "\uffde\016\uffde\020\uffde\040\uffde\001\002\000\004\044\u01d1" +
    "\001\002\000\010\003\uff93\021\uff93\052\uff93\001\002\000" +
    "\010\003\uff92\021\uff92\052\uff92\001\002\000\006\003\uffa5" +
    "\022\uffa5\001\002\000\004\021\u01a0\001\002\000\006\003" +
    "\u01d5\021\u01a0\001\002\000\016\003\uffdc\004\uffdc\015\uffdc" +
    "\016\uffdc\020\uffdc\040\uffdc\001\002\000\016\003\uffdf\004" +
    "\uffdf\015\uffdf\016\uffdf\020\uffdf\040\uffdf\001\002\000\016" +
    "\003\uffdd\004\uffdd\015\uffdd\016\uffdd\020\uffdd\040\uffdd\001" +
    "\002\000\040\003\233\004\222\011\117\012\123\014\236" +
    "\036\115\037\121\041\221\053\u01f9\054\243\055\235\056" +
    "\244\057\237\060\240\063\242\001\002\000\006\003\u01da" +
    "\053\u01db\001\002\000\022\004\052\022\u01cc\023\062\025" +
    "\047\030\053\031\065\051\u01c1\066\045\001\002\000\024" +
    "\003\u01df\004\052\022\u01cc\023\062\025\047\030\053\031" +
    "\065\051\u01c1\066\045\001\002\000\030\003\uff99\004\052" +
    "\021\uff99\022\u01cc\023\062\025\047\030\053\031\065\051" +
    "\u01c1\052\uff99\066\045\001\002\000\010\003\u01f4\021\u01e8" +
    "\052\u01e7\001\002\000\030\003\uff96\004\052\021\uff96\022" +
    "\u01cc\023\062\025\047\030\053\031\065\051\u01c1\052\uff96" +
    "\066\045\001\002\000\006\021\u01e8\052\u01e7\001\002\000" +
    "\010\003\uff94\021\uff94\052\uff94\001\002\000\030\003\uff98" +
    "\004\052\021\uff98\022\u01cc\023\062\025\047\030\053\031" +
    "\065\051\u01c1\052\uff98\066\045\001\002\000\030\003\uff97" +
    "\004\052\021\uff97\022\u01cc\023\062\025\047\030\053\031" +
    "\065\051\u01c1\052\uff97\066\045\001\002\000\030\003\uff95" +
    "\004\052\021\uff95\022\u01cc\023\062\025\047\030\053\031" +
    "\065\051\u01c1\052\uff95\066\045\001\002\000\010\003\uff9a" +
    "\021\uff9a\052\uff9a\001\002\000\010\003\uff9c\021\uff9c\052" +
    "\uff9c\001\002\000\010\003\uff9d\021\uff9d\052\uff9d\001\002" +
    "\000\024\003\u01f0\004\052\022\u01cc\023\062\025\047\030" +
    "\053\031\065\051\u01c1\066\045\001\002\000\006\003\u01ea" +
    "\051\u01eb\001\002\000\030\003\ufe95\004\ufe95\021\ufe95\022" +
    "\ufe95\023\ufe95\025\ufe95\030\ufe95\031\ufe95\051\ufe95\052\ufe95" +
    "\066\ufe95\001\002\000\004\044\u01ee\001\002\000\006\003" +
    "\u01ec\044\u01ed\001\002\000\030\003\ufe8f\004\ufe8f\021\ufe8f" +
    "\022\ufe8f\023\ufe8f\025\ufe8f\030\ufe8f\031\ufe8f\051\ufe8f\052" +
    "\ufe8f\066\ufe8f\001\002\000\030\003\ufe93\004\ufe93\021\ufe93" +
    "\022\ufe93\023\ufe93\025\ufe93\030\ufe93\031\ufe93\051\ufe93\052" +
    "\ufe93\066\ufe93\001\002\000\030\003\ufe90\004\ufe90\021\ufe90" +
    "\022\ufe90\023\ufe90\025\ufe90\030\ufe90\031\ufe90\051\ufe90\052" +
    "\ufe90\066\ufe90\001\002\000\006\021\u01e8\052\u01e7\001\002" +
    "\000\006\021\u01e8\052\u01e7\001\002\000\030\003\ufe91\004" +
    "\ufe91\021\ufe91\022\ufe91\023\ufe91\025\ufe91\030\ufe91\031\ufe91" +
    "\051\ufe91\052\ufe91\066\ufe91\001\002\000\030\003\ufe92\004" +
    "\ufe92\021\ufe92\022\ufe92\023\ufe92\025\ufe92\030\ufe92\031\ufe92" +
    "\051\ufe92\052\ufe92\066\ufe92\001\002\000\010\003\uff9b\021" +
    "\uff9b\052\uff9b\001\002\000\030\003\ufe94\004\ufe94\021\ufe94" +
    "\022\ufe94\023\ufe94\025\ufe94\030\ufe94\031\ufe94\051\ufe94\052" +
    "\ufe94\066\ufe94\001\002\000\030\003\ufe98\004\ufe98\021\ufe98" +
    "\022\ufe98\023\ufe98\025\ufe98\030\ufe98\031\ufe98\051\ufe98\052" +
    "\ufe98\066\ufe98\001\002\000\010\003\uff9e\021\uff9e\052\uff9e" +
    "\001\002\000\006\021\u01e8\052\u01e7\001\002\000\030\003" +
    "\ufe96\004\ufe96\021\ufe96\022\ufe96\023\ufe96\025\ufe96\030\ufe96" +
    "\031\ufe96\051\ufe96\052\ufe96\066\ufe96\001\002\000\022\004" +
    "\052\022\u01cc\023\062\025\047\030\053\031\065\051\u01c1" +
    "\066\045\001\002\000\006\021\u01e8\052\u01e7\001\002\000" +
    "\030\003\ufe97\004\ufe97\021\ufe97\022\ufe97\023\ufe97\025\ufe97" +
    "\030\ufe97\031\ufe97\051\ufe97\052\ufe97\066\ufe97\001\002\000" +
    "\006\003\uffa8\022\uffa8\001\002\000\014\004\u020f\005\u0339" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\006\003\uff20\044" +
    "\uff20\001\002\000\010\003\uff1a\044\uff1a\046\u0336\001\002" +
    "\000\016\003\u0217\005\u0214\041\u0158\044\ufeb7\045\u0202\046" +
    "\u0213\001\002\000\004\022\u01cc\001\002\000\004\004\u020b" +
    "\001\002\000\004\044\u0209\001\002\000\004\020\u0205\001" +
    "\002\000\020\004\052\023\062\025\047\030\053\031\065" +
    "\051\u01c1\066\045\001\002\000\004\022\u01cc\001\002\000" +
    "\004\021\u01a0\001\002\000\016\003\uffd9\004\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\040\uffd9\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\uff2b\040\033\001\002\000\004" +
    "\020\uff2e\001\002\000\006\045\uff1f\046\uff1f\001\002\000" +
    "\006\045\u0202\046\u020e\001\002\000\010\003\uff1e\044\uff1e" +
    "\046\uff1e\001\002\000\012\004\u020f\006\u01b7\007\u01b6\010" +
    "\u01b8\001\002\000\010\003\uff1c\044\uff1c\046\uff1c\001\002" +
    "\000\010\003\uff1d\044\uff1d\046\uff1d\001\002\000\004\021" +
    "\u01a0\001\002\000\016\003\uffd8\004\uffd8\015\uffd8\016\uffd8" +
    "\020\uffd8\040\uffd8\001\002\000\020\003\u0271\004\u020f\005" +
    "\u0272\006\u01b7\007\u01b6\010\u01b8\014\u0159\001\002\000\006" +
    "\003\u0260\041\u0261\001\002\000\006\003\u025b\044\u025c\001" +
    "\002\000\004\044\u0259\001\002\000\010\005\u0219\041\u021a" +
    "\044\u0218\001\002\000\016\003\036\004\035\015\031\016" +
    "\040\020\uff2a\040\033\001\002\000\004\041\u0243\001\002" +
    "\000\006\003\u021d\011\u021b\001\002\000\006\003\u023c\043" +
    "\u023b\001\002\000\004\042\u0238\001\002\000\004\043\u021e" +
    "\001\002\000\004\043\u021f\001\002\000\006\003\u0221\011" +
    "\u0220\001\002\000\010\003\u0235\042\uff04\045\u0234\001\002" +
    "\000\006\042\uff02\045\u0223\001\002\000\004\042\uff07\001" +
    "\002\000\006\003\u0225\011\u0224\001\002\000\006\003\u022d" +
    "\043\u022c\001\002\000\004\043\u0227\001\002\000\004\042" +
    "\uff01\001\002\000\004\043\u0228\001\002\000\006\003\u022a" +
    "\011\u0229\001\002\000\004\042\ufefb\001\002\000\004\042" +
    "\ufefa\001\002\000\004\042\ufefe\001\002\000\006\003\u0231" +
    "\043\u0230\001\002\000\004\043\u022e\001\002\000\006\003" +
    "\u022a\011\u0229\001\002\000\004\042\ufefd\001\002\000\006" +
    "\003\u022a\011\u0229\001\002\000\006\003\u022a\011\u0229\001" +
    "\002\000\004\042\ufefc\001\002\000\004\042\ufeff\001\002" +
    "\000\006\003\u0225\011\u0224\001\002\000\006\003\u0225\011" +
    "\u0224\001\002\000\004\042\uff00\001\002\000\004\042\uff03" +
    "\001\002\000\004\013\u0239\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\006\003\uff18\044\uff18\001\002" +
    "\000\006\003\u0240\043\u023f\001\002\000\004\043\u023d\001" +
    "\002\000\006\003\u0221\011\u0220\001\002\000\004\042\uff06" +
    "\001\002\000\006\003\u0221\011\u0220\001\002\000\006\003" +
    "\u0221\011\u0220\001\002\000\004\042\uff05\001\002\000\004" +
    "\042\uff08\001\002\000\004\011\u0244\001\002\000\004\043" +
    "\u0245\001\002\000\004\043\u0246\001\002\000\004\011\u0247" +
    "\001\002\000\006\042\u0249\045\u0248\001\002\000\004\011" +
    "\u024f\001\002\000\004\013\u024a\001\002\000\010\006\u01b7" +
    "\007\u01b6\010\u01b8\001\002\000\004\044\u024c\001\002\000" +
    "\016\003\036\004\035\015\031\016\040\020\uff52\040\033" +
    "\001\002\000\004\020\uff53\001\002\000\004\020\uff48\001" +
    "\002\000\004\043\u0250\001\002\000\004\043\u0251\001\002" +
    "\000\004\011\u0252\001\002\000\004\042\u0253\001\002\000" +
    "\004\013\u0254\001\002\000\010\006\u01b7\007\u01b6\010\u01b8" +
    "\001\002\000\004\044\u0256\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\uff52\040\033\001\002\000\004" +
    "\020\uff3d\001\002\000\004\020\uff2c\001\002\000\016\003" +
    "\036\004\035\015\031\016\040\020\uff24\040\033\001\002" +
    "\000\004\020\uff28\001\002\000\016\003\036\004\035\015" +
    "\031\016\040\020\uff29\040\033\001\002\000\016\003\uff4f" +
    "\004\uff4f\015\uff4f\016\uff4f\020\uff4f\040\uff4f\001\002\000" +
    "\016\003\036\004\035\015\031\016\040\020\uff52\040\033" +
    "\001\002\000\004\020\uff4e\001\002\000\004\020\uff2d\001" +
    "\002\000\006\003\u021d\011\u021b\001\002\000\006\003\u0263" +
    "\011\u021b\001\002\000\004\042\u0267\001\002\000\006\042" +
    "\u0264\043\u021e\001\002\000\004\013\u0265\001\002\000\010" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\006\003\uff16\044" +
    "\uff16\001\002\000\006\003\u0268\013\u0269\001\002\000\010" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\012\003\u026a\006" +
    "\u01b7\007\u01b6\010\u01b8\001\002\000\006\003\uff14\044\uff14" +
    "\001\002\000\006\003\uff19\044\uff19\001\002\000\006\003" +
    "\uff15\044\uff15\001\002\000\004\042\u026e\001\002\000\004" +
    "\013\u026f\001\002\000\010\006\u01b7\007\u01b6\010\u01b8\001" +
    "\002\000\006\003\uff17\044\uff17\001\002\000\004\041\u0322" +
    "\001\002\000\006\003\u0273\041\u0274\001\002\000\004\011" +
    "\u030f\001\002\000\006\003\u0276\011\u0275\001\002\000\006" +
    "\003\u028a\043\u0289\001\002\000\004\043\u0277\001\002\000" +
    "\004\043\u0278\001\002\000\004\011\u0279\001\002\000\006" +
    "\042\u027b\045\u027a\001\002\000\004\011\u0280\001\002\000" +
    "\004\013\u027c\001\002\000\010\006\u01b7\007\u01b6\010\u01b8" +
    "\001\002\000\004\044\u027e\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\uff52\040\033\001\002\000\004" +
    "\020\uff45\001\002\000\004\043\u0281\001\002\000\004\043" +
    "\u0282\001\002\000\004\011\u0283\001\002\000\004\042\u0284" +
    "\001\002\000\004\013\u0285\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\004\044\u0287\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\uff52\040\033\001" +
    "\002\000\004\020\uff3a\001\002\000\006\003\u029d\043\u029c" +
    "\001\002\000\004\043\u028b\001\002\000\004\011\u028c\001" +
    "\002\000\006\042\u028e\045\u028d\001\002\000\004\011\u0293" +
    "\001\002\000\004\013\u028f\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\004\044\u0291\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\uff52\040\033\001" +
    "\002\000\004\020\uff44\001\002\000\004\043\u0294\001\002" +
    "\000\004\043\u0295\001\002\000\004\011\u0296\001\002\000" +
    "\004\042\u0297\001\002\000\004\013\u0298\001\002\000\010" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\004\044\u029a\001" +
    "\002\000\016\003\036\004\035\015\031\016\040\020\uff52" +
    "\040\033\001\002\000\004\020\uff39\001\002\000\006\003" +
    "\u02af\011\u02ae\001\002\000\004\011\u029e\001\002\000\006" +
    "\042\u02a0\045\u029f\001\002\000\004\011\u02a5\001\002\000" +
    "\004\013\u02a1\001\002\000\010\006\u01b7\007\u01b6\010\u01b8" +
    "\001\002\000\004\044\u02a3\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\uff52\040\033\001\002\000\004" +
    "\020\uff43\001\002\000\004\043\u02a6\001\002\000\004\043" +
    "\u02a7\001\002\000\004\011\u02a8\001\002\000\004\042\u02a9" +
    "\001\002\000\004\013\u02aa\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\004\044\u02ac\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\uff52\040\033\001" +
    "\002\000\004\020\uff38\001\002\000\010\003\u02c0\042\u02c1" +
    "\045\u02bf\001\002\000\006\042\u02b1\045\u02b0\001\002\000" +
    "\004\011\u02b6\001\002\000\004\013\u02b2\001\002\000\010" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\004\044\u02b4\001" +
    "\002\000\016\003\036\004\035\015\031\016\040\020\uff52" +
    "\040\033\001\002\000\004\020\uff42\001\002\000\004\043" +
    "\u02b7\001\002\000\004\043\u02b8\001\002\000\004\011\u02b9" +
    "\001\002\000\004\042\u02ba\001\002\000\004\013\u02bb\001" +
    "\002\000\010\006\u01b7\007\u01b6\010\u01b8\001\002\000\004" +
    "\044\u02bd\001\002\000\016\003\036\004\035\015\031\016" +
    "\040\020\uff52\040\033\001\002\000\004\020\uff37\001\002" +
    "\000\006\003\u02dc\011\u02db\001\002\000\006\011\u02ce\013" +
    "\u02cf\001\002\000\006\003\u02c2\013\u02c3\001\002\000\010" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\012\003\u02c4\006" +
    "\u01b7\007\u01b6\010\u01b8\001\002\000\004\044\u02c9\001\002" +
    "\000\004\044\u02c6\001\002\000\016\003\uff4d\004\uff4d\015" +
    "\uff4d\016\uff4d\020\uff4d\040\uff4d\001\002\000\016\003\036" +
    "\004\035\015\031\016\040\020\uff52\040\033\001\002\000" +
    "\004\020\uff4c\001\002\000\016\003\036\004\035\015\031" +
    "\016\040\020\uff52\040\033\001\002\000\004\020\uff3f\001" +
    "\002\000\004\044\u02cc\001\002\000\016\003\036\004\035" +
    "\015\031\016\040\020\uff52\040\033\001\002\000\004\020" +
    "\uff40\001\002\000\004\043\u02d3\001\002\000\010\006\u01b7" +
    "\007\u01b6\010\u01b8\001\002\000\004\044\u02d1\001\002\000" +
    "\016\003\036\004\035\015\031\016\040\020\uff52\040\033" +
    "\001\002\000\004\020\uff41\001\002\000\004\043\u02d4\001" +
    "\002\000\004\011\u02d5\001\002\000\004\042\u02d6\001\002" +
    "\000\004\013\u02d7\001\002\000\010\006\u01b7\007\u01b6\010" +
    "\u01b8\001\002\000\004\044\u02d9\001\002\000\016\003\036" +
    "\004\035\015\031\016\040\020\uff52\040\033\001\002\000" +
    "\004\020\uff36\001\002\000\006\003\u02e6\043\u02e5\001\002" +
    "\000\004\043\u02dd\001\002\000\004\043\u02de\001\002\000" +
    "\004\011\u02df\001\002\000\004\042\u02e0\001\002\000\004" +
    "\013\u02e1\001\002\000\010\006\u01b7\007\u01b6\010\u01b8\001" +
    "\002\000\004\044\u02e3\001\002\000\016\003\036\004\035" +
    "\015\031\016\040\020\uff52\040\033\001\002\000\004\020" +
    "\uff35\001\002\000\006\003\u02ef\043\u02ee\001\002\000\004" +
    "\043\u02e7\001\002\000\004\011\u02e8\001\002\000\004\042" +
    "\u02e9\001\002\000\004\013\u02ea\001\002\000\010\006\u01b7" +
    "\007\u01b6\010\u01b8\001\002\000\004\044\u02ec\001\002\000" +
    "\016\003\036\004\035\015\031\016\040\020\uff52\040\033" +
    "\001\002\000\004\020\uff34\001\002\000\006\003\u02f7\011" +
    "\u02f6\001\002\000\004\011\u02f0\001\002\000\004\042\u02f1" +
    "\001\002\000\004\013\u02f2\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\004\044\u02f4\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\uff52\040\033\001" +
    "\002\000\004\020\uff33\001\002\000\006\003\u02fd\042\u02fe" +
    "\001\002\000\004\042\u02f8\001\002\000\004\013\u02f9\001" +
    "\002\000\010\006\u01b7\007\u01b6\010\u01b8\001\002\000\004" +
    "\044\u02fb\001\002\000\016\003\036\004\035\015\031\016" +
    "\040\020\uff52\040\033\001\002\000\004\020\uff32\001\002" +
    "\000\004\013\u030b\001\002\000\006\003\u02ff\013\u0300\001" +
    "\002\000\010\006\u01b7\007\u01b6\010\u01b8\001\002\000\012" +
    "\003\u0301\006\u01b7\007\u01b6\010\u01b8\001\002\000\004\044" +
    "\u0306\001\002\000\004\044\u0303\001\002\000\016\003\uff4b" +
    "\004\uff4b\015\uff4b\016\uff4b\020\uff4b\040\uff4b\001\002\000" +
    "\016\003\036\004\035\015\031\016\040\020\uff52\040\033" +
    "\001\002\000\004\020\uff4a\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\uff52\040\033\001\002\000\004" +
    "\020\uff2f\001\002\000\004\044\u0309\001\002\000\016\003" +
    "\036\004\035\015\031\016\040\020\uff52\040\033\001\002" +
    "\000\004\020\uff30\001\002\000\010\006\u01b7\007\u01b6\010" +
    "\u01b8\001\002\000\004\044\u030d\001\002\000\016\003\036" +
    "\004\035\015\031\016\040\020\uff52\040\033\001\002\000" +
    "\004\020\uff31\001\002\000\004\043\u0310\001\002\000\004" +
    "\043\u0311\001\002\000\004\011\u0312\001\002\000\006\042" +
    "\u0314\045\u0313\001\002\000\004\011\u0319\001\002\000\004" +
    "\013\u0315\001\002\000\010\006\u01b7\007\u01b6\010\u01b8\001" +
    "\002\000\004\044\u0317\001\002\000\016\003\036\004\035" +
    "\015\031\016\040\020\uff52\040\033\001\002\000\004\020" +
    "\uff46\001\002\000\004\043\u031a\001\002\000\004\043\u031b" +
    "\001\002\000\004\011\u031c\001\002\000\004\042\u031d\001" +
    "\002\000\004\013\u031e\001\002\000\010\006\u01b7\007\u01b6" +
    "\010\u01b8\001\002\000\004\044\u0320\001\002\000\016\003" +
    "\036\004\035\015\031\016\040\020\uff52\040\033\001\002" +
    "\000\004\020\uff3b\001\002\000\004\011\u0323\001\002\000" +
    "\004\043\u0324\001\002\000\004\043\u0325\001\002\000\004" +
    "\011\u0326\001\002\000\006\042\u0328\045\u0327\001\002\000" +
    "\004\011\u032d\001\002\000\004\013\u0329\001\002\000\010" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\004\044\u032b\001" +
    "\002\000\016\003\036\004\035\015\031\016\040\020\uff52" +
    "\040\033\001\002\000\004\020\uff47\001\002\000\004\043" +
    "\u032e\001\002\000\004\043\u032f\001\002\000\004\011\u0330" +
    "\001\002\000\004\042\u0331\001\002\000\004\013\u0332\001" +
    "\002\000\010\006\u01b7\007\u01b6\010\u01b8\001\002\000\004" +
    "\044\u0334\001\002\000\016\003\036\004\035\015\031\016" +
    "\040\020\uff52\040\033\001\002\000\004\020\uff3c\001\002" +
    "\000\004\014\u0337\001\002\000\004\011\u0338\001\002\000" +
    "\006\003\uff1b\044\uff1b\001\002\000\004\041\u033a\001\002" +
    "\000\004\011\u033b\001\002\000\004\043\u033c\001\002\000" +
    "\004\043\u033d\001\002\000\004\011\u033e\001\002\000\006" +
    "\042\u0340\045\u033f\001\002\000\004\011\u0345\001\002\000" +
    "\004\013\u0341\001\002\000\010\006\u01b7\007\u01b6\010\u01b8" +
    "\001\002\000\004\044\u0343\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\uff52\040\033\001\002\000\004" +
    "\020\uff49\001\002\000\004\043\u0346\001\002\000\004\043" +
    "\u0347\001\002\000\004\011\u0348\001\002\000\004\042\u0349" +
    "\001\002\000\004\013\u034a\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\004\044\u034c\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\uff52\040\033\001" +
    "\002\000\004\020\uff3e\001\002\000\022\003\u01c4\004\052" +
    "\023\062\025\047\030\053\031\065\051\u01c1\066\045\001" +
    "\002\000\016\003\uffdb\004\uffdb\015\uffdb\016\uffdb\020\uffdb" +
    "\040\uffdb\001\002\000\004\020\u0355\001\002\000\020\004" +
    "\052\023\062\025\047\030\053\031\065\051\u01c1\066\045" +
    "\001\002\000\004\022\u01cc\001\002\000\004\021\u01a0\001" +
    "\002\000\016\003\uffcb\004\uffcb\015\uffcb\016\uffcb\020\uffcb" +
    "\040\uffcb\001\002\000\020\004\052\023\062\025\047\030" +
    "\053\031\065\051\050\066\045\001\002\000\004\022\u01cc" +
    "\001\002\000\004\021\u01a0\001\002\000\016\003\uffd0\004" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\040\uffd0\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\u035b\040\033\001" +
    "\002\000\004\020\u035f\001\002\000\020\004\052\023\062" +
    "\025\047\030\053\031\065\051\u01c1\066\045\001\002\000" +
    "\004\022\u01cc\001\002\000\004\021\u01a0\001\002\000\016" +
    "\003\uffcc\004\uffcc\015\uffcc\016\uffcc\020\uffcc\040\uffcc\001" +
    "\002\000\020\004\052\023\062\025\047\030\053\031\065" +
    "\051\050\066\045\001\002\000\004\022\u01cc\001\002\000" +
    "\004\021\u01a0\001\002\000\016\003\uffd1\004\uffd1\015\uffd1" +
    "\016\uffd1\020\uffd1\040\uffd1\001\002\000\004\017\u0364\001" +
    "\002\000\004\020\u0365\001\002\000\020\004\052\023\062" +
    "\025\047\030\053\031\065\051\u01c1\066\045\001\002\000" +
    "\004\022\u01cc\001\002\000\004\021\u01a0\001\002\000\016" +
    "\003\uffcd\004\uffcd\015\uffcd\016\uffcd\020\uffcd\040\uffcd\001" +
    "\002\000\006\003\u0393\004\u0392\001\002\000\010\003\uffba" +
    "\042\uffba\044\uffba\001\002\000\006\004\u038d\024\u037f\001" +
    "\002\000\012\003\uffb8\042\uffb8\044\uffb8\046\u0387\001\002" +
    "\000\006\003\u0381\024\u037f\001\002\000\006\042\uffbc\044" +
    "\u037c\001\002\000\004\022\u0370\001\002\000\010\006\u01b7" +
    "\007\u01b6\010\u01b8\001\002\000\004\017\u0372\001\002\000" +
    "\016\003\036\004\035\015\031\016\040\020\u0374\040\033" +
    "\001\002\000\004\020\u0378\001\002\000\020\004\052\023" +
    "\062\025\047\030\053\031\065\051\u01c1\066\045\001\002" +
    "\000\004\022\u01cc\001\002\000\004\021\u01a0\001\002\000" +
    "\016\003\uffce\004\uffce\015\uffce\016\uffce\020\uffce\040\uffce" +
    "\001\002\000\020\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\066\045\001\002\000\004\022\u01cc\001\002" +
    "\000\004\021\u01a0\001\002\000\016\003\uffd2\004\uffd2\015" +
    "\uffd2\016\uffd2\020\uffd2\040\uffd2\001\002\000\006\003\u037d" +
    "\004\u01ae\001\002\000\010\003\u036b\045\u0369\046\u036d\001" +
    "\002\000\004\042\uffbf\001\002\000\014\003\ufff3\004\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\001\002\000\014\003\u0385\004" +
    "\u0384\006\u01b7\007\u01b6\010\u01b8\001\002\000\012\004\u0382" +
    "\006\u01b7\007\u01b6\010\u01b8\001\002\000\012\003\uffa9\042" +
    "\uffa9\044\uffa9\046\uffa9\001\002\000\012\003\uffac\042\uffac" +
    "\044\uffac\046\uffac\001\002\000\012\003\uffb0\042\uffb0\044" +
    "\uffb0\046\uffb0\001\002\000\012\003\uffab\042\uffab\044\uffab" +
    "\046\uffab\001\002\000\012\003\uffb1\042\uffb1\044\uffb1\046" +
    "\uffb1\001\002\000\006\003\u0388\014\u0389\001\002\000\004" +
    "\011\u038c\001\002\000\006\003\u038b\011\u038a\001\002\000" +
    "\010\003\uffb9\042\uffb9\044\uffb9\001\002\000\010\003\uffb6" +
    "\042\uffb6\044\uffb6\001\002\000\010\003\uffb7\042\uffb7\044" +
    "\uffb7\001\002\000\010\003\u036b\045\u0369\046\u036d\001\002" +
    "\000\012\004\u038f\006\u01b7\007\u01b6\010\u01b8\001\002\000" +
    "\012\003\uffaa\042\uffaa\044\uffaa\046\uffaa\001\002\000\012" +
    "\003\uffad\042\uffad\044\uffad\046\uffad\001\002\000\012\003" +
    "\uffaf\042\uffaf\044\uffaf\046\uffaf\001\002\000\010\003\uffb3" +
    "\045\uffb3\046\uffb3\001\002\000\010\003\u036b\045\u0369\046" +
    "\u036d\001\002\000\012\003\uffae\042\uffae\044\uffae\046\uffae" +
    "\001\002\000\010\003\u0398\045\u0369\046\u036d\001\002\000" +
    "\012\003\uffb2\042\uffb2\044\uffb2\046\uffb2\001\002\000\012" +
    "\003\uffb5\042\uffb5\044\uffb5\046\uffb5\001\002\000\016\003" +
    "\uffb4\004\u038d\024\u037f\042\uffb4\044\uffb4\046\uffb4\001\002" +
    "\000\012\004\u038d\024\u037f\042\uffbb\044\u03a2\001\002\000" +
    "\010\003\u039b\042\uffc1\044\uffc1\001\002\000\006\003\u037d" +
    "\004\u01ae\001\002\000\006\042\uffc2\044\u039d\001\002\000" +
    "\006\003\u039f\004\u01ae\001\002\000\004\042\uffc0\001\002" +
    "\000\012\003\u036b\042\uffc3\045\u0369\046\u036d\001\002\000" +
    "\004\042\uffc4\001\002\000\004\042\uffbd\001\002\000\006" +
    "\003\u037d\004\u01ae\001\002\000\004\042\uffbe\001\002\000" +
    "\004\017\u03b3\001\002\000\006\003\u03a6\017\u03a7\001\002" +
    "\000\016\003\036\004\035\015\031\016\040\020\u03ab\040" +
    "\033\001\002\000\016\003\uffd5\004\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\040\uffd5\001\002\000\016\003\u01be\004\035\015" +
    "\031\016\040\020\u01bf\040\033\001\002\000\016\003\uffd4" +
    "\004\uffd4\015\uffd4\016\uffd4\020\uffd4\040\uffd4\001\002\000" +
    "\004\020\u03af\001\002\000\020\004\052\023\062\025\047" +
    "\030\053\031\065\051\u01c1\066\045\001\002\000\004\022" +
    "\u01cc\001\002\000\004\021\u01a0\001\002\000\016\003\uffc8" +
    "\004\uffc8\015\uffc8\016\uffc8\020\uffc8\040\uffc8\001\002\000" +
    "\020\004\052\023\062\025\047\030\053\031\065\051\u01c1" +
    "\066\045\001\002\000\004\022\u01cc\001\002\000\004\021" +
    "\u01a0\001\002\000\016\003\uffc5\004\uffc5\015\uffc5\016\uffc5" +
    "\020\uffc5\040\uffc5\001\002\000\016\003\036\004\035\015" +
    "\031\016\040\020\u03b5\040\033\001\002\000\004\020\u03b9" +
    "\001\002\000\020\004\052\023\062\025\047\030\053\031" +
    "\065\051\u01c1\066\045\001\002\000\004\022\u01cc\001\002" +
    "\000\004\021\u01a0\001\002\000\016\003\uffc9\004\uffc9\015" +
    "\uffc9\016\uffc9\020\uffc9\040\uffc9\001\002\000\020\004\052" +
    "\023\062\025\047\030\053\031\065\051\u01c1\066\045\001" +
    "\002\000\004\022\u01cc\001\002\000\004\021\u01a0\001\002" +
    "\000\016\003\uffc6\004\uffc6\015\uffc6\016\uffc6\020\uffc6\040" +
    "\uffc6\001\002\000\004\017\u03cc\001\002\000\004\042\u03bf" +
    "\001\002\000\004\022\u03c0\001\002\000\010\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\004\017\u03c2\001\002\000\016" +
    "\003\036\004\035\015\031\016\040\020\u03c4\040\033\001" +
    "\002\000\004\020\u03c8\001\002\000\020\004\052\023\062" +
    "\025\047\030\053\031\065\051\u01c1\066\045\001\002\000" +
    "\004\022\u01cc\001\002\000\004\021\u01a0\001\002\000\016" +
    "\003\uffcf\004\uffcf\015\uffcf\016\uffcf\020\uffcf\040\uffcf\001" +
    "\002\000\020\004\052\023\062\025\047\030\053\031\065" +
    "\051\050\066\045\001\002\000\004\022\u01cc\001\002\000" +
    "\004\021\u01a0\001\002\000\016\003\uffd3\004\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\040\uffd3\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\u03ce\040\033\001\002\000\004" +
    "\020\u03d2\001\002\000\020\004\052\023\062\025\047\030" +
    "\053\031\065\051\u01c1\066\045\001\002\000\004\022\u01cc" +
    "\001\002\000\004\021\u01a0\001\002\000\016\003\uffca\004" +
    "\uffca\015\uffca\016\uffca\020\uffca\040\uffca\001\002\000\020" +
    "\004\052\023\062\025\047\030\053\031\065\051\u01c1\066" +
    "\045\001\002\000\004\022\u01cc\001\002\000\004\021\u01a0" +
    "\001\002\000\016\003\uffc7\004\uffc7\015\uffc7\016\uffc7\020" +
    "\uffc7\040\uffc7\001\002\000\010\003\u01ab\022\u01ac\041\u01ad" +
    "\001\002\000\016\003\u03da\004\035\015\031\016\040\020" +
    "\uff0f\040\033\001\002\000\004\020\uff0d\001\002\000\004" +
    "\020\uff11\001\002\000\012\004\u03db\020\uff10\045\u0202\046" +
    "\u01fd\001\002\000\006\003\u03dc\005\u0214\001\002\000\004" +
    "\041\u021a\001\002\000\006\005\u0219\044\u0218\001\002\000" +
    "\016\003\u0271\004\u020f\005\u0272\006\u01b7\007\u01b6\010\u01b8" +
    "\001\002\000\010\003\u03e4\005\u0214\017\u03e5\001\002\000" +
    "\006\003\u03dc\005\u0214\001\002\000\004\044\u03e2\001\002" +
    "\000\016\003\036\004\035\015\031\016\040\020\uff23\040" +
    "\033\001\002\000\004\020\uff27\001\002\000\006\041\u021a" +
    "\044\u03ed\001\002\000\006\003\u03dc\005\u0214\001\002\000" +
    "\004\003\u03e7\001\002\000\016\003\036\004\035\015\031" +
    "\016\040\020\uff21\040\033\001\002\000\004\020\uff26\001" +
    "\002\000\004\044\u03ea\001\002\000\016\003\uff51\004\uff51" +
    "\015\uff51\016\uff51\020\uff51\040\uff51\001\002\000\016\003" +
    "\036\004\035\015\031\016\040\020\uff52\040\033\001\002" +
    "\000\004\020\uff50\001\002\000\016\003\036\004\035\015" +
    "\031\016\040\020\uff22\040\033\001\002\000\004\020\uff25" +
    "\001\002\000\020\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\066\045\001\002\000\004\021\u01a0\001\002" +
    "\000\004\002\uff84\001\002\000\010\003\uff0c\017\uff0c\041" +
    "\uff0c\001\002\000\010\003\u03f5\017\u03f6\041\u03f7\001\002" +
    "\000\004\020\uff09\001\002\000\004\020\u0420\001\002\000" +
    "\016\003\uff75\004\uff75\015\uff75\016\uff75\020\uff75\040\uff75" +
    "\001\002\000\006\003\u03f9\004\016\001\002\000\004\042" +
    "\u0403\001\002\000\012\003\025\042\u03fa\045\021\046\026" +
    "\001\002\000\004\017\u03fb\001\002\000\016\003\036\004" +
    "\035\015\031\016\040\020\u03fd\040\033\001\002\000\004" +
    "\020\u0400\001\002\000\020\004\052\023\062\025\047\030" +
    "\053\031\065\051\050\066\045\001\002\000\004\021\u01a0" +
    "\001\002\000\016\003\uff72\004\uff72\015\uff72\016\uff72\020" +
    "\uff72\040\uff72\001\002\000\020\004\052\023\062\025\047" +
    "\030\053\031\065\051\050\066\045\001\002\000\004\021" +
    "\u01a0\001\002\000\016\003\uff73\004\uff73\015\uff73\016\uff73" +
    "\020\uff73\040\uff73\001\002\000\006\003\u0404\017\u0405\001" +
    "\002\000\004\020\u041b\001\002\000\016\003\uff77\004\uff77" +
    "\015\uff77\016\uff77\020\uff77\040\uff77\001\002\000\016\003" +
    "\u0409\004\035\015\031\016\040\020\u040a\040\033\001\002" +
    "\000\016\003\uff76\004\uff76\015\uff76\016\uff76\020\uff76\040" +
    "\uff76\001\002\000\004\020\u0418\001\002\000\026\004\u0413" +
    "\020\u0414\023\062\025\047\030\053\031\065\045\u0202\046" +
    "\u01fd\051\050\066\045\001\002\000\022\003\uff7b\004\uff7b" +
    "\023\uff7b\025\uff7b\030\uff7b\031\uff7b\051\uff7b\066\uff7b\001" +
    "\002\000\022\003\u040d\004\052\023\062\025\047\030\053" +
    "\031\065\051\050\066\045\001\002\000\006\003\u0410\021" +
    "\u01a0\001\002\000\004\021\u01a0\001\002\000\016\003\uff7a" +
    "\004\uff7a\015\uff7a\016\uff7a\020\uff7a\040\uff7a\001\002\000" +
    "\016\003\uff7f\004\uff7f\015\uff7f\016\uff7f\020\uff7f\040\uff7f" +
    "\001\002\000\016\003\uff7e\004\uff7e\015\uff7e\016\uff7e\020" +
    "\uff7e\040\uff7e\001\002\000\016\003\uff80\004\uff80\015\uff80" +
    "\016\uff80\020\uff80\040\uff80\001\002\000\004\021\u01a0\001" +
    "\002\000\014\003\u03dc\005\u0214\041\u0158\044\ufeb7\046\u0157" +
    "\001\002\000\020\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\066\045\001\002\000\004\021\u01a0\001\002" +
    "\000\016\003\uff78\004\uff78\015\uff78\016\uff78\020\uff78\040" +
    "\uff78\001\002\000\016\003\uff79\004\uff79\015\uff79\016\uff79" +
    "\020\uff79\040\uff79\001\002\000\022\003\uff7d\004\uff7d\023" +
    "\uff7d\025\uff7d\030\uff7d\031\uff7d\051\uff7d\066\uff7d\001\002" +
    "\000\022\003\u040d\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\066\045\001\002\000\016\003\uff7c\004\uff7c" +
    "\015\uff7c\016\uff7c\020\uff7c\040\uff7c\001\002\000\020\004" +
    "\052\023\062\025\047\030\053\031\065\051\050\066\045" +
    "\001\002\000\004\021\u01a0\001\002\000\016\003\uff71\004" +
    "\uff71\015\uff71\016\uff71\020\uff71\040\uff71\001\002\000\016" +
    "\003\u0409\004\035\015\031\016\040\020\u040a\040\033\001" +
    "\002\000\016\003\uff74\004\uff74\015\uff74\016\uff74\020\uff74" +
    "\040\uff74\001\002\000\020\004\052\023\062\025\047\030" +
    "\053\031\065\051\050\066\045\001\002\000\004\021\u01a0" +
    "\001\002\000\016\003\uff70\004\uff70\015\uff70\016\uff70\020" +
    "\uff70\040\uff70\001\002\000\010\003\u03f5\017\u03f6\041\u03f7" +
    "\001\002\000\016\003\u03da\004\035\015\031\016\040\020" +
    "\uff0f\040\033\001\002\000\004\020\uff0b\001\002\000\014" +
    "\003\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\001\002\000" +
    "\014\003\ufff6\004\ufff6\006\ufff6\007\ufff6\010\ufff6\001\002" +
    "\000\012\004\u042e\006\u01b7\007\u01b6\010\u01b8\001\002\000" +
    "\014\003\u042c\004\u042b\006\u01b7\007\u01b6\010\u01b8\001\002" +
    "\000\014\003\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4\001" +
    "\002\000\012\003\uff5b\042\uff5b\044\uff5b\046\uff5b\001\002" +
    "\000\012\003\uff54\042\uff54\044\uff54\046\uff54\001\002\000" +
    "\012\003\uff5c\042\uff5c\044\uff5c\046\uff5c\001\002\000\012" +
    "\003\uff59\042\uff59\044\uff59\046\uff59\001\002\000\012\003" +
    "\uff55\042\uff55\044\uff55\046\uff55\001\002\000\010\003\025" +
    "\045\021\046\026\001\002\000\012\004\u0432\006\u01b7\007" +
    "\u01b6\010\u01b8\001\002\000\012\003\uff5a\042\uff5a\044\uff5a" +
    "\046\uff5a\001\002\000\012\003\uff56\042\uff56\044\uff56\046" +
    "\uff56\001\002\000\012\003\uff58\042\uff58\044\uff58\046\uff58" +
    "\001\002\000\006\003\u0436\014\u0437\001\002\000\004\011" +
    "\u043a\001\002\000\006\003\u0439\011\u0438\001\002\000\010" +
    "\003\uff64\042\uff64\044\uff64\001\002\000\010\003\uff61\042" +
    "\uff61\044\uff61\001\002\000\010\003\uff62\042\uff62\044\uff62" +
    "\001\002\000\006\003\u043d\004\016\001\002\000\004\042" +
    "\uff6a\001\002\000\010\003\025\045\021\046\026\001\002" +
    "\000\010\003\uff5e\045\uff5e\046\uff5e\001\002\000\010\003" +
    "\025\045\021\046\026\001\002\000\012\003\uff57\042\uff57" +
    "\044\uff57\046\uff57\001\002\000\010\003\u0443\045\021\046" +
    "\026\001\002\000\012\003\uff60\042\uff60\044\uff60\046\uff60" +
    "\001\002\000\022\003\uff5f\004\u0430\024\u0427\026\u0426\027" +
    "\u042a\042\uff5f\044\uff5f\046\uff5f\001\002\000\012\003\uff5d" +
    "\042\uff5d\044\uff5d\046\uff5d\001\002\000\006\003\u0446\017" +
    "\u0447\001\002\000\004\020\u0460\001\002\000\016\003\uff88" +
    "\004\uff88\015\uff88\016\uff88\020\uff88\040\uff88\001\002\000" +
    "\016\003\u044b\004\035\015\031\016\040\020\u044c\040\033" +
    "\001\002\000\004\020\u045e\001\002\000\004\002\uff87\001" +
    "\002\000\030\003\u044f\004\u0413\020\u045c\023\062\025\047" +
    "\030\053\031\065\045\u0202\046\u01fd\051\050\066\045\001" +
    "\002\000\022\003\u044f\004\052\023\062\025\047\030\053" +
    "\031\065\051\050\066\045\001\002\000\006\003\u0453\021" +
    "\u0454\001\002\000\004\002\uff8b\001\002\000\004\021\u0450" +
    "\001\002\000\004\004\u0451\001\002\000\004\044\u0452\001" +
    "\002\000\004\002\uff90\001\002\000\004\004\u045a\001\002" +
    "\000\006\003\u0456\004\u0455\001\002\000\006\003\u0458\044" +
    "\u0459\001\002\000\004\044\u0457\001\002\000\004\002\uff8e" +
    "\001\002\000\004\002\uff8d\001\002\000\004\002\uff91\001" +
    "\002\000\004\002\uff8f\001\002\000\004\002\uff89\001\002" +
    "\000\022\003\u044f\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\066\045\001\002\000\004\002\uff8a\001\002" +
    "\000\022\003\u044f\004\052\023\062\025\047\030\053\031" +
    "\065\051\050\066\045\001\002\000\004\002\uff8c\001\002" +
    "\000\020\004\052\023\062\025\047\030\053\031\065\051" +
    "\050\066\045\001\002\000\004\021\u01a0\001\002\000\004" +
    "\002\uff82\001\002\000\010\003\u0467\042\uff6c\044\uff6c\001" +
    "\002\000\016\004\u0430\024\u0427\026\u0426\027\u042a\042\uff66" +
    "\044\u0465\001\002\000\006\003\u043d\004\016\001\002\000" +
    "\004\042\uff69\001\002\000\006\003\u043d\004\016\001\002" +
    "\000\006\042\uff6d\044\u046a\001\002\000\004\042\uff6b\001" +
    "\002\000\006\003\u046c\004\016\001\002\000\004\042\uff6f" +
    "\001\002\000\012\003\025\042\uff6e\045\021\046\026\001" +
    "\002\000\004\042\uff68\001\002\000\016\003\u044b\004\035" +
    "\015\031\016\040\020\u044c\040\033\001\002\000\004\002" +
    "\uff85\001\002\000\020\004\052\023\062\025\047\030\053" +
    "\031\065\051\050\066\045\001\002\000\004\021\u01a0\001" +
    "\002\000\004\002\uff81\001\002\000\010\003\uffe3\017\uffe3" +
    "\041\uffe3\001\002\000\010\003\012\017\014\041\015\001" +
    "\002\000\004\002\uffe0\001\002\000\010\003\012\017\014" +
    "\041\015\001\002\000\004\002\uffe2\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0476\000\006\016\003\121\004\001\001\000\002\001" +
    "\001\000\004\024\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\130\u046d\001\001" +
    "\000\004\027\016\001\001\000\010\051\u0462\052\022\053" +
    "\023\001\001\000\002\001\001\000\010\051\021\052\022" +
    "\053\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u0430\001\001" +
    "\000\004\054\u0428\001\001\000\002\001\001\000\010\002" +
    "\033\006\031\017\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\u0214\004\u01fd\005\u01fe\001\001\000\010\003\u0202\004\u01fd" +
    "\005\u01fe\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\031\043\032\060\033\050\035\056\036\042\043\063" +
    "\047\041\055\053\060\045\072\054\075\055\076\062\103" +
    "\057\001\001\000\002\001\001\000\034\031\u01a5\032\060" +
    "\033\050\035\056\036\042\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\001\001\000\004" +
    "\037\u019e\001\001\000\014\030\217\042\224\055\113\070" +
    "\222\077\u0184\001\001\000\002\001\001\000\004\147\u0174" +
    "\001\001\000\014\030\217\042\224\055\113\070\222\077" +
    "\u015b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\031\u0100\032\060\033\050\035\056\036\042" +
    "\043\063\047\041\055\053\060\045\072\054\075\055\076" +
    "\062\103\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\161\001\001\000\004\055\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\030" +
    "\112\040\124\041\111\042\126\046\110\055\113\056\115" +
    "\061\107\062\127\063\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\112\055\113\063\131\001\001\000\002\001\001\000" +
    "\016\030\112\046\133\055\113\061\107\062\127\063\125" +
    "\001\001\000\002\001\001\000\014\030\112\055\113\061" +
    "\135\062\127\063\125\001\001\000\002\001\001\000\012" +
    "\030\112\055\113\062\137\063\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\030\112" +
    "\040\124\041\111\042\126\046\110\055\113\056\115\061" +
    "\107\062\127\063\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\030\112\040\124\041\111" +
    "\042\126\046\110\055\113\056\152\061\107\062\127\063" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\030\112\040" +
    "\124\041\111\042\126\046\110\055\113\056\115\061\107" +
    "\062\127\063\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\032\060\033\050\035\205\036\203\043\063\047\041\055" +
    "\053\060\045\072\054\075\055\076\062\103\057\111\204" +
    "\113\206\001\001\000\002\001\001\000\036\032\060\033" +
    "\050\035\205\036\203\043\063\047\041\055\053\060\045" +
    "\072\054\075\055\076\062\103\057\111\214\113\206\001" +
    "\001\000\002\001\001\000\036\032\060\033\050\035\205" +
    "\036\203\043\063\047\041\055\053\060\045\072\054\075" +
    "\055\076\062\103\057\111\210\113\206\001\001\000\036" +
    "\032\060\033\050\035\205\036\203\043\063\047\041\055" +
    "\053\060\045\072\054\075\055\076\062\103\057\111\207" +
    "\113\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\217\042\224\055\113\070\222\077" +
    "\275\001\001\000\014\030\217\042\224\055\113\070\222" +
    "\077\225\001\001\000\004\071\270\001\001\000\014\030" +
    "\217\042\224\055\113\070\222\077\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\030\217\042\224\055" +
    "\113\070\222\071\244\077\240\001\001\000\004\074\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\030" +
    "\217\042\224\055\113\070\222\077\251\001\001\000\002" +
    "\001\001\000\014\030\217\042\224\055\113\070\222\077" +
    "\233\001\001\000\016\030\217\042\224\055\113\070\222" +
    "\071\244\077\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\245\055\113\001\001\000\004" +
    "\074\246\001\001\000\002\001\001\000\004\074\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\254\001\001\000\004\074\257\001\001\000" +
    "\004\074\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\217\042\224\055\113\070\222\071\244\077" +
    "\240\001\001\000\002\001\001\000\004\074\265\001\001" +
    "\000\004\074\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\267\001\001\000\002\001\001\000\006" +
    "\030\272\055\113\001\001\000\004\074\274\001\001\000" +
    "\004\074\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\032\060\033\050\035" +
    "\205\036\203\043\063\047\041\055\053\060\045\072\054" +
    "\075\055\076\062\103\057\111\306\113\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\032\060" +
    "\033\050\035\205\036\203\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\111\320\113\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\032\060\033" +
    "\050\035\205\036\203\043\063\047\041\055\053\060\045" +
    "\072\054\075\055\076\062\103\057\111\331\113\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\032\060\033\050\035\205\036\203" +
    "\043\063\047\041\055\053\060\045\072\054\075\055\076" +
    "\062\103\057\111\341\113\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\032\060\033\050" +
    "\035\205\036\203\043\063\047\041\055\053\060\045\072" +
    "\054\075\055\076\062\103\057\111\350\113\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\032\060\033\050\035\205\036\203" +
    "\043\063\047\041\055\053\060\045\072\054\075\055\076" +
    "\062\103\057\111\374\113\206\001\001\000\036\032\060" +
    "\033\050\035\205\036\203\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\111\356\113\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\030\112\040\124\041\u010a\042" +
    "\126\046\110\055\113\061\107\062\127\063\125\001\001" +
    "\000\026\030\112\040\124\041\u0104\042\126\046\110\050" +
    "\u0105\055\113\061\107\062\127\063\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u014b\001\001\000\004\055" +
    "\u0110\001\001\000\002\001\001\000\030\030\112\040\124" +
    "\041\u0114\042\126\044\u012e\046\110\055\113\057\u0115\061" +
    "\107\062\127\063\125\001\001\000\002\001\001\000\004" +
    "\146\u0112\001\001\000\030\030\112\040\124\041\u0114\042" +
    "\126\044\u0116\046\110\055\113\057\u0115\061\107\062\127" +
    "\063\125\001\001\000\002\001\001\000\026\030\112\040" +
    "\124\041\u0114\042\126\046\110\055\113\057\u0126\061\107" +
    "\062\127\063\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0120\001\001\000\004\045" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u012b\001" +
    "\001\000\002\001\001\000\004\045\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u0144\001\001\000\002\001\001" +
    "\000\026\030\112\040\124\041\111\042\126\046\110\055" +
    "\113\056\115\061\107\062\127\063\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u013f\001\001\000\002\001\001\000" +
    "\004\045\u0141\001\001\000\002\001\001\000\004\045\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u0148\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\030\112\040\124\041" +
    "\u0114\042\126\044\u014e\046\110\055\113\057\u0115\061\107" +
    "\062\127\063\125\001\001\000\002\001\001\000\004\045" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u0155\001\001\000\026\030\112\040\124\041\111\042" +
    "\126\046\110\055\113\056\115\061\107\062\127\063\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\030\112\040\124\041\111\042\126\046" +
    "\110\055\113\056\115\061\107\062\127\063\125\001\001" +
    "\000\026\030\112\040\124\041\u0104\042\126\046\110\050" +
    "\u0159\055\113\061\107\062\127\063\125\001\001\000\002" +
    "\001\001\000\016\030\217\042\224\055\113\070\222\071" +
    "\244\077\240\001\001\000\002\001\001\000\034\031\u016f" +
    "\032\060\033\050\035\056\036\042\043\063\047\041\055" +
    "\053\060\045\072\054\075\055\076\062\103\057\001\001" +
    "\000\036\031\u015f\032\060\033\050\035\056\036\042\043" +
    "\063\047\041\055\053\060\045\072\054\073\u0161\075\055" +
    "\076\062\103\057\001\001\000\034\031\u016b\032\060\033" +
    "\050\035\056\036\042\043\063\047\041\055\053\060\045" +
    "\072\054\075\055\076\062\103\057\001\001\000\004\073" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\u0163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\u016e\001\001\000\004\073\u016d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\u0170\001\001\000\002\001" +
    "\001\000\034\031\u0172\032\060\033\050\035\056\036\042" +
    "\043\063\047\041\055\053\060\045\072\054\075\055\076" +
    "\062\103\057\001\001\000\004\073\u0173\001\001\000\002" +
    "\001\001\000\040\032\060\033\050\035\205\036\203\043" +
    "\063\047\041\055\053\060\045\072\054\075\055\076\062" +
    "\103\057\111\u0176\112\u0175\113\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\217\042\224\055\113\070\222\071\244" +
    "\077\240\001\001\000\002\001\001\000\036\032\060\033" +
    "\050\035\205\036\203\043\063\047\041\055\053\060\045" +
    "\072\054\075\055\076\062\103\057\111\u0195\113\206\001" +
    "\001\000\036\032\060\033\050\035\205\036\203\043\063" +
    "\047\041\055\053\060\045\072\054\075\055\076\062\103" +
    "\057\111\u0187\113\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\032\060\033\050\035\205\036\203\043\063" +
    "\047\041\055\053\060\045\072\054\075\055\076\062\103" +
    "\057\111\u019a\113\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\u03d5\001\001" +
    "\000\004\026\u01a9\001\001\000\002\001\001\000\006\023" +
    "\u03bc\114\u03bd\001\001\000\004\023\u03a4\001\001\000\004" +
    "\114\u01af\001\001\000\010\115\u0399\116\u0369\117\u036b\001" +
    "\001\000\010\115\u036d\116\u0369\117\u036b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0362\001\001\000" +
    "\004\023\u01b4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\033\006\u034f\017\036\001\001\000\004\123\u01ba" +
    "\001\001\000\012\002\033\006\u01bc\017\036\066\u01bb\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\033" +
    "\003\u0202\004\u01fd\005\u01fe\006\u0203\017\036\032\u01c4\033" +
    "\050\036\u01bf\043\063\047\041\055\053\060\045\075\u01c2" +
    "\076\u01c6\103\057\105\u0200\107\u01c5\001\001\000\034\032" +
    "\u01c4\033\050\036\u01bf\043\063\047\041\055\053\060\045" +
    "\067\u01c7\075\u01c2\076\u01c6\103\057\105\u01c1\107\u01c5\001" +
    "\001\000\032\032\u01c4\033\050\036\u01bf\043\063\047\041" +
    "\055\053\060\045\075\u01c2\076\u01c6\103\057\105\u01fb\107" +
    "\u01c5\001\001\000\014\030\217\042\224\055\113\070\222" +
    "\077\u01d8\001\001\000\004\104\u01d3\001\001\000\032\032" +
    "\u01c4\033\050\036\u01bf\043\063\047\041\055\053\060\045" +
    "\075\u01c2\076\u01c6\103\057\105\u01d1\107\u01c5\001\001\000" +
    "\004\104\u01cc\001\001\000\032\032\u01c4\033\050\036\u01bf" +
    "\043\063\047\041\055\053\060\045\075\u01c2\076\u01c6\103" +
    "\057\105\u01ca\107\u01c5\001\001\000\032\032\u01c4\033\050" +
    "\036\u01bf\043\063\047\041\055\053\060\045\075\u01c2\076" +
    "\u01c6\103\057\105\u01c9\107\u01c5\001\001\000\032\032\u01c4" +
    "\033\050\036\u01bf\043\063\047\041\055\053\060\045\075" +
    "\u01c2\076\u01c6\103\057\105\u01c8\107\u01c5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\030\112\040\124\041\u01ce\042\126\046\110" +
    "\055\113\061\107\062\127\063\125\001\001\000\004\037" +
    "\u01cd\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u01d6\001\001\000\004\037\u01d5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\030\217\042" +
    "\224\055\113\070\222\071\244\077\240\001\001\000\002" +
    "\001\001\000\034\032\u01e0\033\050\036\u01db\043\063\047" +
    "\041\055\053\060\045\075\u01dd\076\u01e2\103\057\104\u01df" +
    "\106\u01f6\107\u01e1\001\001\000\034\032\u01e0\033\050\036" +
    "\u01db\043\063\047\041\055\053\060\045\075\u01dd\076\u01e2" +
    "\103\057\104\u01df\106\u01dc\107\u01e1\001\001\000\034\032" +
    "\u01e0\033\050\036\u01db\043\063\047\041\055\053\060\045" +
    "\075\u01dd\076\u01e2\103\057\104\u01df\106\u01f5\107\u01e1\001" +
    "\001\000\004\110\u01f4\001\001\000\034\032\u01e0\033\050" +
    "\036\u01db\043\063\047\041\055\053\060\045\075\u01dd\076" +
    "\u01e2\103\057\104\u01df\106\u01f2\107\u01e1\001\001\000\004" +
    "\110\u01e8\001\001\000\002\001\001\000\034\032\u01e0\033" +
    "\050\036\u01db\043\063\047\041\055\053\060\045\075\u01dd" +
    "\076\u01e2\103\057\104\u01df\106\u01e5\107\u01e1\001\001\000" +
    "\034\032\u01e0\033\050\036\u01db\043\063\047\041\055\053" +
    "\060\045\075\u01dd\076\u01e2\103\057\104\u01df\106\u01e4\107" +
    "\u01e1\001\001\000\034\032\u01e0\033\050\036\u01db\043\063" +
    "\047\041\055\053\060\045\075\u01dd\076\u01e2\103\057\104" +
    "\u01df\106\u01e3\107\u01e1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\032\u01e0\033\050\036" +
    "\u01db\043\063\047\041\055\053\060\045\075\u01dd\076\u01e2" +
    "\103\057\104\u01df\106\u01ee\107\u01e1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\u01f1\001\001\000\004\110\u01f0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\u01f7" +
    "\001\001\000\002\001\001\000\034\032\u01e0\033\050\036" +
    "\u01db\043\063\047\041\055\053\060\045\075\u01dd\076\u01e2" +
    "\103\057\104\u01df\106\u01f9\107\u01e1\001\001\000\004\110" +
    "\u01fa\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u020f\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\u0214\004\u01fd\005\u01fe\011\u0215\001\001\000\004" +
    "\104\u0210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\032\u01c4\033\050\036\u01bf\043\063" +
    "\047\041\055\053\060\045\075\u01c2\076\u01c6\103\057\105" +
    "\u0205\107\u01c5\001\001\000\004\104\u0206\001\001\000\004" +
    "\037\u0207\001\001\000\002\001\001\000\010\002\033\006" +
    "\u0209\017\036\001\001\000\002\001\001\000\004\143\u020b" +
    "\001\001\000\004\005\u020c\001\001\000\002\001\001\000" +
    "\004\023\u020f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0211\001\001\000\002\001\001\000\004\023" +
    "\u020f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\033\006\u0257\017" +
    "\036\001\001\000\002\001\001\000\004\012\u021b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u022a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u022e\001\001\000\002\001" +
    "\001\000\004\015\u0232\001\001\000\004\015\u0231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0236\001" +
    "\001\000\004\014\u0235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0239\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u023d\001\001\000\002\001\001\000\004\013\u0241\001" +
    "\001\000\004\013\u0240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u024a\001\001\000\002\001" +
    "\001\000\012\002\033\006\u024c\017\036\065\u024d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0254\001\001\000\002\001\001\000" +
    "\012\002\033\006\u024c\017\036\065\u0256\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\033\006\u0259\017" +
    "\036\001\001\000\002\001\001\000\010\002\033\006\u025e" +
    "\017\036\001\001\000\004\140\u025c\001\001\000\012\002" +
    "\033\006\u024c\017\036\065\u025d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u026c\001\001\000\004\012" +
    "\u0261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0265\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u026b\001\001\000\004\023\u026a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u026f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u027c\001\001\000\002\001\001\000\012\002\033\006" +
    "\u024c\017\036\065\u027e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0285\001\001\000\002" +
    "\001\001\000\012\002\033\006\u024c\017\036\065\u0287\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u028f\001\001\000\002\001\001" +
    "\000\012\002\033\006\u024c\017\036\065\u0291\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0298\001\001\000\002\001\001\000\012\002\033\006\u024c" +
    "\017\036\065\u029a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u02a1\001\001\000\002\001" +
    "\001\000\012\002\033\006\u024c\017\036\065\u02a3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u02aa\001\001\000\002\001\001\000\012\002\033\006" +
    "\u024c\017\036\065\u02ac\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u02b2\001\001\000\002\001\001\000\012" +
    "\002\033\006\u024c\017\036\065\u02b4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u02bb\001" +
    "\001\000\002\001\001\000\012\002\033\006\u024c\017\036" +
    "\065\u02bd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u02ca\001\001" +
    "\000\004\023\u02c4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\141\u02c6\001\001\000\012\002\033\006\u024c" +
    "\017\036\065\u02c7\001\001\000\002\001\001\000\012\002" +
    "\033\006\u024c\017\036\065\u02c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\033\006\u024c\017\036\065" +
    "\u02cc\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u02cf\001\001\000\002\001\001\000\012\002\033\006" +
    "\u024c\017\036\065\u02d1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u02d7\001\001\000\002\001\001\000\012" +
    "\002\033\006\u024c\017\036\065\u02d9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u02e1\001\001\000\002\001\001\000\012\002\033" +
    "\006\u024c\017\036\065\u02e3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u02ea\001\001\000" +
    "\002\001\001\000\012\002\033\006\u024c\017\036\065\u02ec" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u02f2" +
    "\001\001\000\002\001\001\000\012\002\033\006\u024c\017" +
    "\036\065\u02f4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u02f9\001" +
    "\001\000\002\001\001\000\012\002\033\006\u024c\017\036" +
    "\065\u02fb\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0307\001\001\000\004\023\u0301" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\142" +
    "\u0303\001\001\000\012\002\033\006\u024c\017\036\065\u0304" +
    "\001\001\000\002\001\001\000\012\002\033\006\u024c\017" +
    "\036\065\u0306\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\033\006\u024c\017\036\065\u0309\001\001\000" +
    "\002\001\001\000\004\023\u030b\001\001\000\002\001\001" +
    "\000\012\002\033\006\u024c\017\036\065\u030d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0315\001\001\000\002\001\001\000\012" +
    "\002\033\006\u024c\017\036\065\u0317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u031e\001" +
    "\001\000\002\001\001\000\012\002\033\006\u024c\017\036" +
    "\065\u0320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0329\001\001\000\002\001\001\000\012\002\033\006\u024c" +
    "\017\036\065\u032b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0332\001\001\000\002\001" +
    "\001\000\012\002\033\006\u024c\017\036\065\u0334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0341" +
    "\001\001\000\002\001\001\000\012\002\033\006\u024c\017" +
    "\036\065\u0343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u034a\001\001\000\002\001\001" +
    "\000\012\002\033\006\u024c\017\036\065\u034c\001\001\000" +
    "\002\001\001\000\034\032\u01c4\033\050\036\u01bf\043\063" +
    "\047\041\055\053\060\045\067\u034e\075\u01c2\076\u01c6\103" +
    "\057\105\u01c1\107\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\032\u01c4\033\050\036\u01bf\043\063\047" +
    "\041\055\053\060\045\075\u01c2\076\u01c6\103\057\105\u0351" +
    "\107\u01c5\001\001\000\004\104\u0352\001\001\000\004\037" +
    "\u0353\001\001\000\002\001\001\000\034\031\u0355\032\060" +
    "\033\050\035\056\036\042\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\001\001\000\004" +
    "\104\u0356\001\001\000\004\037\u0357\001\001\000\002\001" +
    "\001\000\010\002\033\006\u0359\017\036\001\001\000\002" +
    "\001\001\000\032\032\u01c4\033\050\036\u01bf\043\063\047" +
    "\041\055\053\060\045\075\u01c2\076\u01c6\103\057\105\u035b" +
    "\107\u01c5\001\001\000\004\104\u035c\001\001\000\004\037" +
    "\u035d\001\001\000\002\001\001\000\034\031\u035f\032\060" +
    "\033\050\035\056\036\042\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\001\001\000\004" +
    "\104\u0360\001\001\000\004\037\u0361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\032\u01c4" +
    "\033\050\036\u01bf\043\063\047\041\055\053\060\045\075" +
    "\u01c2\076\u01c6\103\057\105\u0365\107\u01c5\001\001\000\004" +
    "\104\u0366\001\001\000\004\037\u0367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\120\u038d" +
    "\001\001\000\002\001\001\000\004\120\u037f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0370\001\001" +
    "\000\002\001\001\000\010\002\033\006\u0372\017\036\001" +
    "\001\000\002\001\001\000\032\032\u01c4\033\050\036\u01bf" +
    "\043\063\047\041\055\053\060\045\075\u01c2\076\u01c6\103" +
    "\057\105\u0374\107\u01c5\001\001\000\004\104\u0375\001\001" +
    "\000\004\037\u0376\001\001\000\002\001\001\000\034\031" +
    "\u0378\032\060\033\050\035\056\036\042\043\063\047\041" +
    "\055\053\060\045\072\054\075\055\076\062\103\057\001" +
    "\001\000\004\104\u0379\001\001\000\004\037\u037a\001\001" +
    "\000\002\001\001\000\004\114\u037d\001\001\000\010\115" +
    "\u036d\116\u0369\117\u036b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0385\001\001\000\004\023\u0382\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\117\u0390\001\001\000" +
    "\004\023\u038f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u0394\001\001\000\004\117" +
    "\u0393\001\001\000\002\001\001\000\006\034\u0395\117\u0396" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\u038d\001\001\000\004\120\u038d\001\001\000\004\125\u039b" +
    "\001\001\000\004\114\u03a0\001\001\000\004\101\u039d\001" +
    "\001\000\004\114\u039f\001\001\000\002\001\001\000\010" +
    "\115\u036d\116\u0369\117\u036b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\114\u03a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\033\006" +
    "\u03a9\017\036\001\001\000\004\124\u03a7\001\001\000\012" +
    "\002\033\006\u01bc\017\036\066\u03a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\032\u01c4\033\050\036\u01bf" +
    "\043\063\047\041\055\053\060\045\075\u01c2\076\u01c6\103" +
    "\057\105\u03ab\107\u01c5\001\001\000\004\104\u03ac\001\001" +
    "\000\004\037\u03ad\001\001\000\002\001\001\000\032\032" +
    "\u01c4\033\050\036\u01bf\043\063\047\041\055\053\060\045" +
    "\075\u01c2\076\u01c6\103\057\105\u03af\107\u01c5\001\001\000" +
    "\004\104\u03b0\001\001\000\004\037\u03b1\001\001\000\002" +
    "\001\001\000\010\002\033\006\u03b3\017\036\001\001\000" +
    "\002\001\001\000\032\032\u01c4\033\050\036\u01bf\043\063" +
    "\047\041\055\053\060\045\075\u01c2\076\u01c6\103\057\105" +
    "\u03b5\107\u01c5\001\001\000\004\104\u03b6\001\001\000\004" +
    "\037\u03b7\001\001\000\002\001\001\000\032\032\u01c4\033" +
    "\050\036\u01bf\043\063\047\041\055\053\060\045\075\u01c2" +
    "\076\u01c6\103\057\105\u03b9\107\u01c5\001\001\000\004\104" +
    "\u03ba\001\001\000\004\037\u03bb\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u03c0\001\001\000\002\001\001\000\010\002\033" +
    "\006\u03c2\017\036\001\001\000\002\001\001\000\032\032" +
    "\u01c4\033\050\036\u01bf\043\063\047\041\055\053\060\045" +
    "\075\u01c2\076\u01c6\103\057\105\u03c4\107\u01c5\001\001\000" +
    "\004\104\u03c5\001\001\000\004\037\u03c6\001\001\000\002" +
    "\001\001\000\034\031\u03c8\032\060\033\050\035\056\036" +
    "\042\043\063\047\041\055\053\060\045\072\054\075\055" +
    "\076\062\103\057\001\001\000\004\104\u03c9\001\001\000" +
    "\004\037\u03ca\001\001\000\002\001\001\000\010\002\033" +
    "\006\u03cc\017\036\001\001\000\002\001\001\000\032\032" +
    "\u01c4\033\050\036\u01bf\043\063\047\041\055\053\060\045" +
    "\075\u01c2\076\u01c6\103\057\105\u03ce\107\u01c5\001\001\000" +
    "\004\104\u03cf\001\001\000\004\037\u03d0\001\001\000\002" +
    "\001\001\000\032\032\u01c4\033\050\036\u01bf\043\063\047" +
    "\041\055\053\060\045\075\u01c2\076\u01c6\103\057\105\u03d2" +
    "\107\u01c5\001\001\000\004\104\u03d3\001\001\000\004\037" +
    "\u03d4\001\001\000\002\001\001\000\004\026\u03d6\001\001" +
    "\000\012\002\033\006\u03d8\017\036\100\u03d7\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\u0202\004\u01fd" +
    "\005\u01fe\001\001\000\004\011\u0215\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u020f\001\001\000\004" +
    "\011\u03e5\001\001\000\004\011\u03e0\001\001\000\002\001" +
    "\001\000\010\002\033\006\u03e2\017\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u03e8\001\001\000" +
    "\002\001\001\000\010\002\033\006\u03e7\017\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\137\u03ea\001" +
    "\001\000\012\002\033\006\u024c\017\036\065\u03eb\001\001" +
    "\000\002\001\001\000\010\002\033\006\u03ed\017\036\001" +
    "\001\000\002\001\001\000\034\031\u03ef\032\060\033\050" +
    "\035\056\036\042\043\063\047\041\055\053\060\045\072" +
    "\054\075\055\076\062\103\057\001\001\000\004\037\u03f0" +
    "\001\001\000\002\001\001\000\004\145\u0422\001\001\000" +
    "\004\020\u03f3\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\134\u041d\001\001\000\004\027\u03f7\001\001\000" +
    "\002\001\001\000\010\051\021\052\022\053\023\001\001" +
    "\000\002\001\001\000\010\002\033\006\u03fb\017\036\001" +
    "\001\000\002\001\001\000\034\031\u03fd\032\060\033\050" +
    "\035\056\036\042\043\063\047\041\055\053\060\045\072" +
    "\054\075\055\076\062\103\057\001\001\000\004\037\u03fe" +
    "\001\001\000\002\001\001\000\034\031\u0400\032\060\033" +
    "\050\035\056\036\042\043\063\047\041\055\053\060\045" +
    "\072\054\075\055\076\062\103\057\001\001\000\004\037" +
    "\u0401\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u0405\001\001\000\012\002\033\006" +
    "\u0407\017\036\021\u0406\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\u0202\004\u01fd\005\u01fe\031\u0411\032" +
    "\060\033\050\035\056\036\042\043\063\047\041\055\053" +
    "\060\045\072\054\075\055\076\062\103\057\001\001\000" +
    "\004\132\u040a\001\001\000\036\010\u040d\031\u040b\032\060" +
    "\033\050\035\056\036\042\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\001\001\000\004" +
    "\037\u0410\001\001\000\004\037\u040e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0416\001\001\000\004\011\u0215\001\001\000" +
    "\034\031\u0414\032\060\033\050\035\056\036\042\043\063" +
    "\047\041\055\053\060\045\072\054\075\055\076\062\103" +
    "\057\001\001\000\004\037\u0415\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\u0418\001\001\000\036\010" +
    "\u0419\031\u040b\032\060\033\050\035\056\036\042\043\063" +
    "\047\041\055\053\060\045\072\054\075\055\076\062\103" +
    "\057\001\001\000\002\001\001\000\034\031\u041b\032\060" +
    "\033\050\035\056\036\042\043\063\047\041\055\053\060" +
    "\045\072\054\075\055\076\062\103\057\001\001\000\004" +
    "\037\u041c\001\001\000\002\001\001\000\012\002\033\006" +
    "\u0407\017\036\021\u041e\001\001\000\002\001\001\000\034" +
    "\031\u0420\032\060\033\050\035\056\036\042\043\063\047" +
    "\041\055\053\060\045\072\054\075\055\076\062\103\057" +
    "\001\001\000\004\037\u0421\001\001\000\002\001\001\000" +
    "\004\020\u0423\001\001\000\012\002\033\006\u03d8\017\036" +
    "\100\u0424\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u042e\001\001\000\004\023\u042c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u0433\001\001\000\004\023\u0432\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u043b" +
    "\001\001\000\002\001\001\000\010\051\021\052\022\053" +
    "\023\001\001\000\004\136\u0440\001\001\000\004\052\u043f" +
    "\001\001\000\002\001\001\000\006\022\u0443\052\u0441\001" +
    "\001\000\002\001\001\000\004\054\u0430\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\u0447\001\001\000\012\002\033\006\u0448\017\036\102\u0449" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\u0202\004\u01fd\005\u01fe\007\u045a\031\u044c\032\060\033\050" +
    "\035\056\036\042\043\063\047\041\055\053\060\045\072" +
    "\054\075\055\076\062\103\057\001\001\000\036\007\u044d" +
    "\031\u044c\032\060\033\050\035\056\036\042\043\063\047" +
    "\041\055\053\060\045\072\054\075\055\076\062\103\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\u045c\031\u044c\032\060\033\050\035\056\036\042\043\063" +
    "\047\041\055\053\060\045\072\054\075\055\076\062\103" +
    "\057\001\001\000\002\001\001\000\036\007\u045e\031\u044c" +
    "\032\060\033\050\035\056\036\042\043\063\047\041\055" +
    "\053\060\045\072\054\075\055\076\062\103\057\001\001" +
    "\000\002\001\001\000\034\031\u0460\032\060\033\050\035" +
    "\056\036\042\043\063\047\041\055\053\060\045\072\054" +
    "\075\055\076\062\103\057\001\001\000\004\037\u0461\001" +
    "\001\000\002\001\001\000\004\135\u0467\001\001\000\004" +
    "\054\u0430\001\001\000\004\027\u0465\001\001\000\002\001" +
    "\001\000\004\027\u046c\001\001\000\004\064\u0468\001\001" +
    "\000\002\001\001\000\004\027\u046a\001\001\000\002\001" +
    "\001\000\010\051\021\052\022\053\023\001\001\000\002" +
    "\001\001\000\012\002\033\006\u0448\017\036\102\u046e\001" +
    "\001\000\002\001\001\000\034\031\u0470\032\060\033\050" +
    "\035\056\036\042\043\063\047\041\055\053\060\045\072" +
    "\054\075\055\076\062\103\057\001\001\000\004\037\u0471" +
    "\001\001\000\002\001\001\000\004\122\u0475\001\001\000" +
    "\004\025\u0474\001\001\000\002\001\001\000\004\025\u0476" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  



    public void unrecovered_syntax_error(Symbol s)
    {
    
        System.out.println("Error de Sintaxis grave. Error Desconocido. Compilacion Detenida");
        interfaz.resultado=interfaz.resultado+"Error de Sintaxis grave. Error Desconocido. Compilacion Detenida";
    
    }

    public void syntax_error(Symbol cur_token)
    {
        int linea = ( (Tokens)(cur_token.value) ).getFila();
        int columna = ( (Tokens)(cur_token.value) ).getColumna();
        String mensaje = new String("");
        if(cur_token.sym == 0)
        {
            mensaje = "\nERROR: Error sintactico, no se esperaba el token: (EOF), Linea: "
                        + linea
                        + ", Columna: "
                        + columna
                        + "\n" ;
        }
        else 
        {
            mensaje = "\nERROR: Error sintactico, no se esperaba el token: ("
                        + ( (Tokens)(cur_token.value) ).getIdentificador()
                        + "), Linea: "
                        + linea
                        + ", Columna: "
                        + columna
                        + "\n";
        }
        System.out.println(mensaje);
         interfaz.resultado=interfaz.resultado+mensaje;
    
       
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



//********************************Tabla de Simbolos*****************************
static  ArrayList <Integer>llinea = new ArrayList();
static  ArrayList <Integer>lcolumna = new ArrayList();
static Object n1=null,n2=null,n3=null,n4=null;
static Integer profundidad = 0;
static Integer offset = 0;
static Integer an1 = 0;
static Integer an2 = 0;
static Integer an3 = 0;
static Integer an4 = 0;
//*************************************Simbolos*******************************************
static ArrayList tipopara = new ArrayList();
static ArrayList nombreid = new ArrayList();
static String tipo_return ="";
static String tipotemp="";
static String paratemp="";
static String metodo="";
static int lineatemp=0;
static int columnatemp=0;
static int dimension =0;
static int dms = 0;
//**********************Ambito***************************************
     static ArrayList AmbitoPila = new ArrayList();
     static ArrayList AmbitoLista = new ArrayList();
     static String nombreAmbito = "";
     static String ambitoActual = "";
//***************************AmbitoPadre***************************************
     private static ArrayList nombrePadre = new ArrayList();
     private static ArrayList Actual = new ArrayList();
     private static ArrayList siguiente = new ArrayList();
     private static ArrayList siguientetemp = new ArrayList();
     private static String nombreAmbitoPadre = "";
     private static String ambitoPadre1 = "";
      
    public static boolean verificarSiExisteElemento(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())){
                return true;
            }
        }
        return false;
    }
      public static boolean verificarSiExisteElementoVariable(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())&& interfaz.ldimension.get(i).toString().equals("0")  ){
              //  JOptionPane.showMessageDialog(null, elemento+"---->"+interfaz.ldimension.get(i));
                    return true;
            }
        }
        return false;
    }

                 public static boolean verificarSiExisteElementoProcedimiento(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())&&(interfaz.ltipo.get(i).toString().equalsIgnoreCase("Procedure")==false||interfaz.ltipo.get(i).toString().equalsIgnoreCase("Function")==false) && (interfaz.ldimension.get(i).toString().equals("1") || interfaz.ldimension.get(i).toString().equals("2"))  ){
                return true;
            }
        }
        return false;
    }
    public static int obtenerIndice(String elemento){
         int indice = 0;
         boolean bandera = false;
        for (int i = 0;i<=interfaz.lnombre.size()-1;i++)
        {  
            if (elemento.equals(interfaz.lnombre.get(i).toString())&&bandera==false){
                indice = i;
                bandera = true;
            }
            else if (elemento.equals(interfaz.lnombre.get(i).toString())&&alcanceAmbito(ambitoActual,interfaz.lambito.get(i).toString())==true&&bandera==true&&alcanceAmbito(interfaz.lambito.get(i).toString(),interfaz.lambito.get(indice).toString())==true){
                    indice = i;
            }
            else{}
        }
        System.out.print("Variable:"+interfaz.lnombre.get(indice).toString()+"  Ambito: "+interfaz.lambito.get(indice).toString()+"\n");
        return indice;
  }
    
        public static boolean alcanceAmbito(String grande, String pequeno)
        {//JOptionPane.showMessageDialog(null,"grande es : "+grande+"    pequeño es :"+pequeno);
            if (grande.contains(pequeno) || grande.equals(pequeno)){
               // JOptionPane.showMessageDialog(null,"grande o igual");
                    return true;
            }
           //     JOptionPane.showMessageDialog(null,"NO ES");
            return false;
         }

//*****************************Funcion Ambito Padre *******************************************
public static void ambitoPadre(String nombreToken)
{      
          if (Actual.size()==0){
              nombrePadre.add(nombreToken);
              ambitoPadre1 = ambitoPadre1 + nombrePadre.get(nombrePadre.size()-1);
              siguiente.add(ambitoPadre1);
              Actual.add(ambitoPadre1);
              System.out.println("Token "+nombrePadre.get(nombrePadre.size()-1)+"   Ambito: "+ambitoPadre1);
          }
          else{
            
                   nombreAmbitoPadre = nombreToken;
                   
                            
                            nombrePadre.add(nombreAmbitoPadre);
                            Actual.add(siguiente.get(siguiente.size()-1));
                            siguiente.add(siguiente.get(siguiente.size()-1)+"."+nombreAmbitoPadre);
                            siguientetemp.add(siguiente.get(siguiente.size()-1));
                            ambitoPadre1 = Actual.get(Actual.size()-1).toString();
                            System.out.println("Token "+nombrePadre.get(nombrePadre.size()-1)+"   Ambito: "+ambitoPadre1);                      
  
         }
        
 }  
public static void BeginPadre()
    {
            siguiente.remove(siguiente.size()-1);
            System.out.print("\n"+siguiente.get(siguiente.size()-1)+"\n");
    }
        
        
        
    public static boolean verificarSiExistePadre(String ambito)
{
        for (int i =siguientetemp.size()-1;i>=0;i--)
        {
            if (siguientetemp.get(i).equals(ambito))
            {
                return true;
            }
            
        }
        return false;
}

//***************************************Ambito Hijas********************************************
public void getambito(String nombre)
{

                 if (AmbitoPila.size()==0){
                              ambitoActual = ambitoActual + nombre;
                              AmbitoLista.add(ambitoActual);
                              AmbitoPila.add(ambitoActual);
                        //JOptionPane.showMessageDialog(null,"entro");
                          }
                else {

                           if (verificarSiExiste(ambitoActual +"." +nombre)==true){
                              // interfaz.resultado="Procedure o Function Dupliada2"; 
                                    ambitoActual = ambitoActual +"." +nombre;
                                    AmbitoLista.add(ambitoActual);
                                    AmbitoPila.add(ambitoActual);
                                }
                           else{
                                    ambitoActual = ambitoActual +"." +nombre;
                                    AmbitoLista.add(ambitoActual);
                                    AmbitoPila.add(ambitoActual);
                            //JOptionPane.showMessageDialog(null,"entro");
                                   }
               }

 }

public void begin()
{
            if(!AmbitoPila.isEmpty()){
            //JOptionPane.showMessageDiialog(null,"salio");
                AmbitoPila.remove(AmbitoPila.size()-1);
                ambitoActual = AmbitoPila.get(AmbitoPila.size()-1).toString();}
                       }
            public static boolean verificarSiExiste(String ambito){
                    for (int i =AmbitoLista.size()-1;i>=0;i--)
                    {
                        if (AmbitoLista.get(i).equals(ambito))
                        {
                            return true;
                        }

                    }
                    return false;
}
          public static void variableDuplicada(Object id)
        {
            int indiceId = obtenerIndice(((Tokens) id).getIdentificador());
           // JOptionPane.showMessageDialog(null,"entro--->"+((Tokens) id).getIdentificador());
            
                for (int i = 0;i<=interfaz.lambito.size()-1;i++){
                    if (interfaz.lambito.get(i).toString().equals(interfaz.lambito.get(indiceId))&&indiceId!=i&&interfaz.lnombre.get(indiceId).equals(interfaz.lnombre.get(i)))
                    { 
                    //JOptionPane.showMessageDialog(null,"entro a if ");
                  
     interfaz.resultado=interfaz.resultado+("\nError Semantico en la Linea "+((Tokens) id).getFila()+", Columna "+((Tokens) id).getColumna()+" (Variable duplicada)\n");                   
                                  System.out.println("Variable Repetida: "+interfaz.lnombre.get(i)+" con "+interfaz.lnombre.get(indiceId)+"\n");
                    }
                }
         }  

 

//**************************************limpiar variables********************************************************
public void limpiar(){
             tipopara.clear();
            nombreid.clear();
            tipo_return ="";
            tipotemp="";
            paratemp="";
            metodo="";
            dimension =0;
            AmbitoPila.clear();
            AmbitoLista.clear();
            nombreAmbito = "";
            ambitoActual = "";
            AmbitoPila = new ArrayList();

}
//*****************iniciar variables**********************************************
 public void inicializarvariables()
{
            interfaz.ltipo = new ArrayList();
            interfaz.lnombre = new ArrayList();
            interfaz.lparametro = new ArrayList();
            interfaz.ldimension = new ArrayList();
            interfaz.ltipopar = new ArrayList();
            interfaz.ltiporeturn = new ArrayList();
             interfaz.lambito = new ArrayList();
            llinea = new ArrayList();
            lcolumna = new ArrayList();
             nombrePadre = new ArrayList();
            Actual = new ArrayList();
            siguiente = new ArrayList();
            siguientetemp = new ArrayList();
            nombreAmbitoPadre = "";
            ambitoPadre1 = "";
            interfaz.larreglo= new ArrayList();
            profundidad = 0;
//**********************Ambito***************************************
     AmbitoPila = new ArrayList();
     AmbitoLista = new ArrayList();
     nombreAmbito = "";
     ambitoActual = "";
//***************************AmbitoPadre***************************************
     ArrayList nombrePadre = new ArrayList();
     ArrayList Actual = new ArrayList();
     ArrayList siguiente = new ArrayList();
     siguientetemp = new ArrayList();
String nombreAmbitoPadre = "";
String ambitoPadre1 = "";

}



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // exit ::= EXIT WHEN error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // exit ::= EXIT error parentesis FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // exit ::= EXIT WHEN parentesis FIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // loop2 ::= exit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // loop2 ::= exit loop2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // loop2 ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // loop2 ::= ciclos loop2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // loop2 ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // loop2 ::= expresiones loop2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // loop3 ::= loop2 END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // loop3 ::= loop2 error LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // loop3 ::= error END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // loop3 ::= loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // loop ::= LOOP NT$22 loop3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // NT$22 ::= 
            {
              Object RESULT =null;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // while ::= WHILE parentesis LOOP loop2 END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // while ::= WHILE parentesis LOOP loop2 END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // while ::= WHILE parentesis LOOP loop2 error LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // while ::= WHILE parentesis LOOP error END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // while ::= WHILE parentesis error loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // while ::= WHILE error LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // while ::= WHILE parentesis LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO LOOP loop2 END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO LOOP loop2 END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO LOOP loop2 error LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO LOOP error END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO error loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // for ::= FOR ID IN NUMERO PUNTO PUNTO error LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // for ::= FOR ID IN NUMERO PUNTO error NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // for ::= FOR ID IN NUMERO error PUNTO NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // for ::= FOR ID IN error PUNTO PUNTO NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // for ::= FOR ID error NUMERO PUNTO PUNTO NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // for ::= FOR error IN NUMERO PUNTO PUNTO NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // f1_fun ::= END IF error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // f1_fun ::= END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // f1_fun ::= ELSE error f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // f1_fun ::= ELSE cuerpofun f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // f1_fun ::= END IF FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // if_fun ::= IF parentesis THEN cuerpofun error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // if_fun ::= IF parentesis THEN error f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // if_fun ::= IF parentesis error cuerpofun f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // if_fun ::= IF error THEN cuerpofun f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // if_fun ::= IF parentesis THEN cuerpofun f1_fun 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // f1 ::= END IF error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // f1 ::= END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // f1 ::= ELSE error f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // f1 ::= END IF FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // f1 ::= ELSE cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // if ::= IF parentesis THEN cuerpo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // if ::= IF parentesis THEN error f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // if ::= IF parentesis error cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // if ::= IF error THEN cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // if ::= IF parentesis THEN cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // if ::= IF parentesis THEN f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // condicion2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // condicion2 ::= OR parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // condicion2 ::= AND parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // condicion ::= id relacion error condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // condicion ::= ID IGUAL error condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // condicion ::= error relacion id condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // condicion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // condicion ::= boolean condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // condicion ::= ID IGUAL boolean condicion2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // condicion ::= id relacion id condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // parentesis ::= PAR1 parentesis error condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // parentesis ::= PAR1 error PAR2 condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // parentesis ::= error parentesis PAR2 condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // parentesis ::= condicion 
            {
              Object RESULT =null;
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // parentesis ::= PAR1 parentesis PAR2 condicion2 
            {
              Object RESULT =null;
		         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ciclos ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ciclos ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ciclos ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ciclos ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // llamadaproc ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaproc",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // llamadaproc ::= arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaproc",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // metodo ::= llamadaproc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // llamarmetodos ::= metodo FIN 
            {
              Object RESULT =null;
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamarmetodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // operacion5 ::= id 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion5",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // operacion4 ::= operacion5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // operacion4 ::= operacion4 ENTRE operacion5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // operacion3 ::= operacion4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // operacion3 ::= operacion3 POR operacion4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // operacion2 ::= operacion3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // operacion2 ::= operacion2 MENOS operacion3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // operacion ::= operacion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // operacion ::= operacion MAS operacion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // asignar ::= boolean 
            {
              Object RESULT =null;
		 RESULT = "booelan";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // asignar ::= operacion 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // asignacion ::= arreglo DOSPUNTOS error asignar FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // asignacion ::= arreglo DOSPUNTOS IGUAL asignarsig 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // asignacion ::= ID DOSPUNTOS IGUAL asignarsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // asignarsig ::= asignar error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // asignarsig ::= error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // asignarsig ::= asignar FIN 
            {
              Object RESULT =null;
		int asileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // cadena ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // cadena ::= asignar cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // leer_escribir ::= PUT PAR1 COMILLA error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // leer_escribir ::= PUT PAR1 error put2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // leer_escribir ::= PUT error COMILLA put2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // leer_escribir ::= PUT PAR1 ID PAR1 PAR2 error FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // leer_escribir ::= PUT PAR1 ID PAR1 error PAR2 FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // leer_escribir ::= PUT PAR1 ID error PAR2 PAR2 FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // leer_escribir ::= PUT PAR1 error PAR1 PAR2 PAR2 FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // leer_escribir ::= PUT error ID PAR1 PAR2 PAR2 FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // leer_escribir ::= PUT PAR1 arreglo error finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // leer_escribir ::= PUT PAR1 error PAR2 finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // leer_escribir ::= PUT error arreglo PAR2 finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // leer_escribir ::= PUT PAR1 ID error finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // leer_escribir ::= PUT error ID PAR2 finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // leer_escribir ::= GET PAR1 ID PAR1 PAR2 error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // leer_escribir ::= GET PAR1 ID PAR1 error PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // leer_escribir ::= GET PAR1 ID error PAR2 PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // leer_escribir ::= GET PAR1 error PAR1 PAR2 PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // leer_escribir ::= GET error ID PAR1 PAR2 PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // leer_escribir ::= GET PAR1 arreglo error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // leer_escribir ::= GET PAR1 error PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // leer_escribir ::= GET error arreglo PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // leer_escribir ::= GET PAR1 ID error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // leer_escribir ::= GET error ID PAR2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // leer_escribir ::= PUT PAR1 ID PAR1 PAR2 PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // leer_escribir ::= PUT PAR1 arreglo PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // leer_escribir ::= PUT PAR1 ID PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // leer_escribir ::= PUT PAR1 COMILLA NT$21 put2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NT$21 ::= 
            {
              Object RESULT =null;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // leer_escribir ::= GET PAR1 ID PAR1 PAR2 PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // leer_escribir ::= GET PAR1 arreglo PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // leer_escribir ::= GET PAR1 ID PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // finlees ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finlees",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // finlees ::= NEWLINE FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finlees",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // put2 ::= cadena COMILLA PAR2 error finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // put2 ::= cadena COMILLA error FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // put2 ::= cadena error PAR2 FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // put2 ::= cadena COMILLA PAR2 FIN finlees 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expresiones ::= llamarmetodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expresiones ::= leer_escribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expresiones ::= asignacion 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // cuerpo ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // cuerpo ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // cuerpo ::= ciclos cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // cuerpo ::= expresiones cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // declaracion_arreglo5 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // declaracion_arreglo5 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 an4=an1 =Integer.parseInt( ((Tokens)n).getIdentificador()  ); interfaz.larreglo.add("bloque"); interfaz.larreglo.add(n);  dimension = 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // declaracion_arreglo4 ::= NUMERO PUNTO error declaracion_arreglo5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // declaracion_arreglo4 ::= NUMERO error PUNTO declaracion_arreglo5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // declaracion_arreglo4 ::= error PUNTO PUNTO declaracion_arreglo5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // declaracion_arreglo4 ::= NUMERO PUNTO PUNTO declaracion_arreglo5 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		an3 = an1 =Integer.parseInt( ((Tokens)n).getIdentificador()  ); interfaz.larreglo.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // declaracion_arreglo3 ::= NUMERO error declaracion_arreglo4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // declaracion_arreglo3 ::= error COMA declaracion_arreglo4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // declaracion_arreglo3 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // declaracion_arreglo3 ::= NUMERO COMA declaracion_arreglo4 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 an1 =Integer.parseInt( ((Tokens)n).getIdentificador()  );interfaz.larreglo.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // declaracion_arreglo3 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dimension=1;  an2 =an1 =Integer.parseInt( ((Tokens)n).getIdentificador()  ); interfaz.larreglo.add("bloque");  interfaz.larreglo.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // declaracion_arreglo2 ::= NUMERO PUNTO error declaracion_arreglo3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // declaracion_arreglo2 ::= NUMERO error PUNTO declaracion_arreglo3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // declaracion_arreglo2 ::= error PUNTO PUNTO declaracion_arreglo3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // declaracion_arreglo2 ::= NUMERO PUNTO PUNTO declaracion_arreglo3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 an1 =Integer.parseInt( ((Tokens)n).getIdentificador()  );  interfaz.larreglo.add(n); interfaz.larreglo.add("bloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // procedimientoa ::= PROCEDURE error procedimientoa2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // procedimientoa ::= FUNCTION error procedimientofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // procedimientoa ::= PROCEDURE ID NT$20 procedimientoa2 procedimientofunb 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$20 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //if (interfaz.ltipopar.get(interfaz.ltipopar.size()-1).toString().equals("no")){interfaz.ltipopar.remove(interfaz.ltipopar.size()-1);}
                            metodo=((Tokens) id).getIdentificador(); getambito(((Tokens) id).getIdentificador());
                          //      JOptionPane.showMessageDialog(null,"ambito actual es "+ambitoActual);
                            lineatemp=((Tokens) id).getFila();
                            ambitoPadre(((Tokens) id).getIdentificador());
                            columnatemp=((Tokens) id).getColumna();
                            //JOptionPane.showMessageDialog(null,metodo);  
                            profundidad = profundidad + 1;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // procedimientoa ::= FUNCTION ID NT$19 procedimientofun procedimientofunb 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$19 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //if (interfaz.ltipopar.get(interfaz.ltipopar.size()-1).toString().equals("no")){interfaz.ltipopar.remove(interfaz.ltipopar.size()-1);}
                       metodo=((Tokens) id).getIdentificador(); 
                      lineatemp=((Tokens) id).getFila();
                      columnatemp=((Tokens) id).getColumna();
                      getambito(((Tokens) id).getIdentificador());
                      ambitoPadre(((Tokens) id).getIdentificador()); 
                      profundidad = profundidad + 1;
                  //  JOptionPane.showMessageDialog(null,"ambito actual es "+ambitoActual);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // procedimientofunb ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // procedimientofunb ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // procedimientofunb ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // declaraciones ::= procedimientoa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 OF error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 error tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // declaracion_arreglo ::= ARRAY PAR1 error PAR2 OF tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // declaracion_arreglo ::= ARRAY error declaracion_arreglo2 PAR2 OF tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // declaracion_arreglo ::= error PAR1 declaracion_arreglo2 PAR2 OF tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 OF tipo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tipotemp=tp.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // declaracion_tipo ::= declaracion_tipo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // declaracion_tipo ::= declaracion_tipo2 DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // declaracion_tipo2 ::= DOSPUNTOS ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tipotemp=((Tokens) tp).getIdentificador(); 
                             if ( verificarSiExisteElemento(tipotemp)==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)tp).getFila()+", Columna"+((Tokens)tp).getColumna()+" (El tipo no exitse)\n";        
                                                             }else{
                                                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) tp).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)tp).getFila()+", Columna"+((Tokens)tp).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                                            dms = (obtenerIndice(tipotemp));
                                                dimension = Integer.parseInt(interfaz.ldimension.get(dms).toString());
                                        }    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // declaracion_tipo2 ::= DOSPUNTOS tipo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tipotemp=tp.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // declaracion_tipo2 ::= COMA ID NT$18 declaracion_tipo2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$18 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  interfaz.ltipopar.add("no hay");
                            nombreid.add(id);
                            //llinea.add(((Tokens) id).getFila());
                            //lcolumna.add(((Tokens) id).getColumna());
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // declaracion2 ::= declaracion_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // declaracion ::= TYPE ID declaracion_arreglo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // declaracion ::= TYPE ID error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // declaracion ::= TYPE error declaracion_arreglo FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // declaracion ::= error ID declaracion_arreglo FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // declaracion ::= TYPE ID error FIN declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // declaracion ::= TYPE ID declaracion_arreglo error declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // declaracion ::= TYPE error declaracion_arreglo FIN declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // declaracion ::= error ID declaracion_arreglo FIN declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // declaracion ::= ID declaracion2 error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // declaracion ::= ID error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // declaracion ::= error declaracion2 FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // declaracion ::= ID error FIN declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // declaracion ::= ID declaracion2 error declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // declaracion ::= error declaracion2 FIN declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF error FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 error tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO error OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO error PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO error NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO error PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA error PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO error NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO error COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO error NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO error PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 error PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // declaracion ::= ID DOSPUNTOS ARRAY error NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // declaracion ::= ID DOSPUNTOS error PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // declaracion ::= ID error ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // declaracion ::= error DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF error FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 error tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO error OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO error PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO error NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO error PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 error PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaracion ::= ID DOSPUNTOS ARRAY error NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // declaracion ::= ID DOSPUNTOS error PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // declaracion ::= ID error ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // declaracion ::= error DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN NT$17 declaracionsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$17 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
   
                nombreid.clear();
                    interfaz.ltipopar.add("no hay");
                    interfaz.ltipopar.add("bloque");
                     nombreid.add(id);
                      int num1 = Integer.parseInt(((Tokens)n1).getIdentificador());
                      int num2 = Integer.parseInt(((Tokens)n2).getIdentificador());
                      int num3 = Integer.parseInt(((Tokens)n3).getIdentificador());
                      int num4 = Integer.parseInt(((Tokens)n4).getIdentificador());
                      interfaz.larreglo.add("bloque");
                      interfaz.larreglo.add(n4);
                      interfaz.larreglo.add(n3);
                      interfaz.larreglo.add(n2);
                      interfaz.larreglo.add(n1);
                      interfaz.larreglo.add("bloque");
                          for(int i=0;i<nombreid.size();i++){
                            interfaz.lnombre.add(((Tokens)(nombreid.get(i))).getIdentificador());
                            llinea.add(((Tokens)(nombreid.get(i))).getFila());
                            lcolumna.add(((Tokens)(nombreid.get(i))).getColumna()); 
                            interfaz.ltipo.add(tp.toString());interfaz.ldimension.add("2");interfaz.lambito.add(ambitoActual);        
                            interfaz.lparametro.add(""); 
                            interfaz.ltiporeturn.add(null);      
                            interfaz.lprofundidad.add(profundidad);
                            System.out.println("entro----"+((Tokens)(nombreid.get(i))).getIdentificador());
                           // interfaz.ltipopar.add("");      
                            }     nombreid.clear();
                                if(tp.equals("Integer") || tp.equals("Float")){
                                                interfaz.loffset.add(offset);
                                                offset += ((num2-num1)+(num3-num4))*4 ;
                                            }else if(tp.equals("Boolean")){
                                                interfaz.loffset.add(offset);
                                                offset += ((num2-num1)+(num3-num4))*1 ;
                                               }                                
                                  dimension=0;
                                   an1=0;an2=0;an3=0;an4=0;
             if(interfaz.ldimension.get(interfaz.ldimension.size()-1).toString().equals("1")){
                                    if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-3)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }  
                                        }
                           else if(interfaz.ldimension.get(interfaz.ldimension.size()-1).toString().equals("2")){
                                if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-3)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }
                                    
                                    if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-5)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }
                                        
                                        }
                                        
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN NT$16 declaracionsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$16 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  nombreid.clear();
                    interfaz.ltipopar.add("no hay");
                    interfaz.ltipopar.add("bloque");
                     nombreid.add(id);
                      int num1 = Integer.parseInt(((Tokens)n1).getIdentificador());
                      int num2 = Integer.parseInt(((Tokens)n2).getIdentificador());
                      interfaz.larreglo.add("bloque");
                      interfaz.larreglo.add(n2);
                      interfaz.larreglo.add(n1);
                      interfaz.larreglo.add("bloque");
                          for(int i=0;i<nombreid.size();i++){
                            interfaz.lnombre.add(((Tokens)(nombreid.get(i))).getIdentificador());
                            llinea.add(((Tokens)(nombreid.get(i))).getFila());
                            lcolumna.add(((Tokens)(nombreid.get(i))).getColumna()); 
                            interfaz.ltipo.add(tp.toString());interfaz.ldimension.add("1");interfaz.lambito.add(ambitoActual);        
                            interfaz.lparametro.add(""); 
                            interfaz.ltiporeturn.add(null);      
                            interfaz.lprofundidad.add(profundidad);
                            System.out.println("entro----"+((Tokens)(nombreid.get(i))).getIdentificador());
                           // interfaz.ltipopar.add("");      
                            }     nombreid.clear();
                                if(tp.equals("Integer") || tp.equals("Float")){
                                                interfaz.loffset.add(offset);
                                                offset += (num2-num1)*4 ;
                                            }else if(tp.equals("Boolean")){
                                                interfaz.loffset.add(offset);
                                                offset += (num2-num1)*1 ;
                                               }                                
                                  dimension=0;
                                   an1=0;an2=0;an3=0;an4=0;
             if(interfaz.ldimension.get(interfaz.ldimension.size()-1).toString().equals("1")){
                                    if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-3)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }  
                                        }
                           else if(interfaz.ldimension.get(interfaz.ldimension.size()-1).toString().equals("2")){
                                if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-3)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }
                                    
                                    if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-5)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }
                                        
                                        }
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // declaracion ::= ID declaracion2 FIN NT$15 declaracionsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$15 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
  interfaz.ltipopar.add("no hay");
                    interfaz.ltipopar.add("bloque");
                     nombreid.add(id);
                      
                          for(int i=0;i<nombreid.size();i++){
                            interfaz.lnombre.add(((Tokens)(nombreid.get(i))).getIdentificador());
                            interfaz.larreglo.add("");
                            llinea.add(((Tokens)(nombreid.get(i))).getFila());
                            lcolumna.add(((Tokens)(nombreid.get(i))).getColumna()); 
                            interfaz.ltipo.add(tipotemp);interfaz.ldimension.add(dimension);interfaz.lambito.add(ambitoActual);        
                            interfaz.lparametro.add("");
                            if(tipotemp.equals("Integer") || tipotemp.equals("Float")){
                                                interfaz.loffset.add(offset);
                                                offset += 4 ;
                                            }else if(tipotemp.equals("Boolean")){
                                                interfaz.loffset.add(offset);
                                                offset += 1 ;
                                               }else{
                                                interfaz.loffset.add(offset);
                                                    offset +=((an2-an1)+(an4-an3))*offset;
                                                    }
                                                  interfaz.lprofundidad.add(profundidad);
                                          
                            interfaz.ltiporeturn.add(null);                                     
                            //interfaz.ltipopar.add("");
                             //     System.out.println("entro----"+((Tokens)(nombreid.get(i))).getIdentificador()
                            }    an1=0;an2=0;an3=0;an4=0;
                                  nombreid.clear();
                                  tipotemp="";
                                  dimension=0;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // declaracion ::= TYPE ID IS declaracion_arreglo FIN NT$14 declaracionsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
interfaz.ltipopar.add("no hay");
                    interfaz.ltipopar.add("bloque");
                     nombreid.add(id);
                      
                          for(int i=0;i<nombreid.size();i++){
                            interfaz.lnombre.add(((Tokens)(nombreid.get(i))).getIdentificador());
                            llinea.add(((Tokens)(nombreid.get(i))).getFila());
                            lcolumna.add(((Tokens)(nombreid.get(i))).getColumna()); 
                            interfaz.ltipo.add(tipotemp);interfaz.ldimension.add(dimension);interfaz.lambito.add(ambitoActual);        
                            interfaz.lparametro.add(""); 
                            interfaz.ltiporeturn.add(null);      
                            interfaz.loffset.add(0);
                            interfaz.lprofundidad.add(profundidad);
                                          
                            System.out.println("entro----"+((Tokens)(nombreid.get(i))).getIdentificador());
                           // interfaz.ltipopar.add("");      
                            }     nombreid.clear();
                                  tipotemp="";
                                  dimension=0;
                                   an1=0;an2=0;an3=0;an4=0;
 if(interfaz.ldimension.get(interfaz.ldimension.size()-1).toString().equals("1")){
                                    if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-3)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }  
                                        }
                            if(interfaz.ldimension.get(interfaz.ldimension.size()-1).toString().equals("2")){
                                if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-3)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-2)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }
                                    
                                    if(Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getIdentificador()) > Integer.parseInt(((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-5)).getIdentificador())){
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getFila()+", Columna"+((Tokens)interfaz.larreglo.get(interfaz.larreglo.size()-4)).getColumna()+" (Indice no esta en el rango)\n";        
                                           }
                                        
                                        }

                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // declaracionsig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionsig",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // declaracionsig ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionsig",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // declaracion_tipo2_par ::= DOSPUNTOS par error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaracion_tipo2_par ::= DOSPUNTOS error tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaracion_tipo2_par ::= error par tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracion_tipo2_par ::= COMA error declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaracion_tipo2_par ::= error ID declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // declaracion_tipo2_par ::= DOSPUNTOS error ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declaracion_tipo2_par ::= error par ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // declaracion_tipo2_par ::= DOSPUNTOS par ID 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		paratemp=para.toString(); tipotemp=((Tokens) id).getIdentificador();tipopara.add(((Tokens) id).getIdentificador());
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tipotemp);      
                                     } for(int i = interfaz.lnombre.size()-1 ;i>=0;i--){
                                        if(tipotemp.toString().equals(interfaz.lnombre.get(i).toString())){
                                               dimension=Integer.parseInt(interfaz.ldimension.get(i).toString()); break;     
                                                    }
                                                    }
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declaracion_tipo2_par ::= DOSPUNTOS par tipo 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                paratemp=para.toString();  tipotemp=tp.toString();
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tp.toString());      
                                     } 
                                tipopara.add(tp.toString());   //JOptionPane.showMessageDialog(null,tp.toString());  
                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaracion_tipo2_par ::= COMA ID NT$13 masvariables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                                          nombreid.add(id);
                                        //   llinea.add(((Tokens) id).getFila());
                                       //lcolumna.add(((Tokens) id).getColumna());
                                      //   JOptionPane.showMessageDialog(null, nombreid.size());
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // masvariables ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masvariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // masvariables ::= declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masvariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS IGUAL error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS error NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declaracion_tipo_par ::= declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declaracion_par ::= declaracion_tipo_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_par",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // parametros ::= ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // parametros ::= error declaracion_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // parametros ::= ID declaracion_par error parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parametros ::= ID error FIN parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametros ::= error declaracion_par FIN parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametros ::= ID declaracion_par NT$12 parametrosig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                              nombreid.add(id);
                             // llinea.add(((Tokens) id).getFila());
                              // lcolumna.add(((Tokens) id).getColumna());
                              int linea=((Tokens) id).getFila();
                            //   JOptionPane.showMessageDialog(null,linea);

                        for(int i=0;i<nombreid.size();i++){
                                 interfaz.ltipo.add(tipotemp);interfaz.ldimension.add(dimension);interfaz.lambito.add(ambitoActual);        
                                    interfaz.lprofundidad.add(profundidad);
                                  if(tipotemp.equals("Integer") || tipotemp.equals("Float")){
                                                interfaz.loffset.add(offset);
                                                offset += 4 ;
                                            }else if(tipotemp.equals("Boolean")){
                                                interfaz.loffset.add(offset);
                                                offset += 1 ;
                                               }else{
                                                interfaz.loffset.add(offset);
                                                    offset +=((an2-an1)+(an4-an3))*offset;
                                                    }
                                                  
                                interfaz.lnombre.add(((Tokens)(nombreid.get(i))).getIdentificador());
                                interfaz.larreglo.add("");
                                llinea.add(((Tokens)(nombreid.get(i))).getFila());
                                lcolumna.add(((Tokens)(nombreid.get(i))).getColumna());
                                interfaz.lparametro.add(paratemp);interfaz.ltiporeturn.add(null);
                                  System.out.println("entro----"+((Tokens)(nombreid.get(i))).getIdentificador()); 
                                  interfaz.ltipopar.add("");
                                }interfaz.ltipopar.add("bloque");
                                 an1=0;an2=0;an3=0;an4=0;
                         nombreid.clear(); ;tipotemp=""; paratemp="";
                         dimension=0;
                            variableDuplicada(id);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametrosig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parametrosig ::= FIN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parametrosig ::= FIN parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // procedimientoa2 ::= error BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // procedimientoa2 ::= PAR1 parametros PAR2 error BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedimientoa2 ::= PAR1 error PAR2 IS BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedimientoa2 ::= PAR1 error PAR2 IS declaraciones BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // procedimientoa2 ::= IS NT$11 procedimientoa21 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$11 ::= 
            {
              Object RESULT =null;
 
                                
                                interfaz.ltipopar.add("no tiene");
                                 interfaz.ltipopar.add("bloque");
                                   System.out.println("entro----"+metodo.toString()); 
          
                                interfaz.lnombre.add(metodo.toString()); llinea.add(lineatemp);lcolumna.add(columnatemp);
                                interfaz.larreglo.add("");
                                interfaz.ltipo.add("Procedure"); interfaz.ldimension.add("");interfaz.lambito.add(ambitoPadre1);        
                                interfaz.lparametro.add("");interfaz.ltiporeturn.add(null);  
                                tipopara.clear(); 
                                interfaz.loffset.add(0);
                                interfaz.lprofundidad.add(profundidad);
                         
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // procedimientoa2 ::= PAR1 parametros PAR2 IS NT$10 procedimientoa21 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$10 ::= 
            {
              Object RESULT =null;
 
                         for(int i=0;i<tipopara.size();i++){
                                      interfaz.ltipopar.add(tipopara.get(i));
                                          System.out.println("entro----"+metodo.toString()); 
                                                }
                                      interfaz.ltipopar.add("bloque");
                                        System.out.println("entro----"+metodo.toString()); 
          
                               interfaz.lnombre.add(metodo.toString());llinea.add(lineatemp);lcolumna.add(columnatemp);
                               interfaz.larreglo.add("");
                        interfaz.ltipo.add("Procedure"); interfaz.ldimension.add("");interfaz.lambito.add(ambitoPadre1);        
                        interfaz.lparametro.add("");interfaz.ltiporeturn.add(null);  
                         interfaz.loffset.add(0);
                         interfaz.lprofundidad.add(profundidad);
                                          
                        tipopara.clear();  
                           
                                
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // procedimientoa21 ::= error BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // procedimientoa21 ::= error cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // procedimientoa21 ::= BEGIN NT$9 procedimientoa21sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$9 ::= 
            {
              Object RESULT =null;
 //JOptionPane.showMessageDialog(null,"fin");
                               
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // procedimientoa21 ::= declaraciones BEGIN NT$8 procedimientoa21sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$8 ::= 
            {
              Object RESULT =null;
//JOptionPane.showMessageDialog(null,"fin"); 
                          
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // procedimientoa21sig ::= cuerpo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21sig",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // procedimientoa21sig ::= error final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21sig",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // procedimientoa21sig ::= cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21sig",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // procedimiento2 ::= error BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // procedimiento2 ::= PAR1 parametros PAR2 error BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // procedimiento2 ::= PAR1 error PAR2 IS BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // procedimiento2 ::= PAR1 error PAR2 IS declaraciones BEGIN cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // procedimiento2 ::= IS NT$7 procedimiento2sig2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$7 ::= 
            {
              Object RESULT =null;
 
                                 
                                        interfaz.ltipopar.add("no tiene");System.out.println("entro----"+metodo);
                                  
                                        interfaz.ltipopar.add("bloque");System.out.println("entro----"+metodo);
                                  
                                 interfaz.lnombre.add(metodo.toString());
                                 interfaz.larreglo.add("");
                                llinea.add(lineatemp);
                                lcolumna.add(columnatemp);
                                interfaz.ltipo.add("Procedure"); 
                                interfaz.ldimension.add("");
                                interfaz.lambito.add(ambitoPadre1);        
                                interfaz.lparametro.add("");interfaz.ltiporeturn.add(null);  
                                interfaz.loffset.add(0);
                                interfaz.lprofundidad.add(profundidad);
                                          
                                    tipopara.clear(); 
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // procedimiento2 ::= PAR1 parametros PAR2 IS NT$6 procedimiento2sig2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$6 ::= 
            {
              Object RESULT =null;
           for(int i=0;i<tipopara.size();i++){
                                      interfaz.ltipopar.add(tipopara.get(i));System.out.println("entro----"+metodo);
                                  }
                                  interfaz.ltipopar.add("bloque");    
                                  
                               interfaz.lnombre.add(metodo.toString()); interfaz.ltipo.add("Procedure");
                               interfaz.larreglo.add("");
                                llinea.add(lineatemp);lcolumna.add(columnatemp);
                                interfaz.ldimension.add("");interfaz.lambito.add(ambitoPadre1);        
                                interfaz.lparametro.add("");interfaz.ltiporeturn.add(null);  
                                tipopara.clear();  
                                interfaz.loffset.add(0);
                                interfaz.lprofundidad.add(profundidad);
                                          
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // procedimiento2sig2 ::= error procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // procedimiento2sig2 ::= error BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // procedimiento2sig2 ::= BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // procedimiento2sig2 ::= declaraciones BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // procedimiento2sig ::= cuerpo END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // procedimiento2sig ::= cuerpo END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // procedimiento2sig ::= cuerpo error ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // procedimiento2sig ::= error END ID FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // procedimiento2sig ::= cuerpo END ID FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // return ::= RETURN asignar FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // return ::= RETURN FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpofun ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpofun ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpofun ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpofun ::= if_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpofun ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpofun ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpofun ::= loop cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpofun ::= while cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpofun ::= if_fun cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpofun ::= for cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpofun ::= expresiones cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo2 ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo2 ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo2 ::= if_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo2 ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo2 ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo2 ::= loop cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo2 ::= while cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo2 ::= if_fun cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo2 ::= for cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo2 ::= expresiones cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracion_tipo2_par_fun ::= DOSPUNTOS error ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracion_tipo2_par_fun ::= error ff ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion_tipo2_par_fun ::= DOSPUNTOS error tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracion_tipo2_par_fun ::= error ff tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion_tipo2_par_fun ::= COMA error declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracion_tipo2_par_fun ::= error ID declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff ID 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		paratemp=para.toString(); tipotemp=((Tokens) id).getIdentificador();tipopara.add(((Tokens) id).getIdentificador());
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tipotemp);      
                                     } for(int i = interfaz.lnombre.size()-1 ;i>=0;i--){
                                        if(tipotemp.toString().equals(interfaz.lnombre.get(i).toString())){
                                               dimension=Integer.parseInt(interfaz.ldimension.get(i).toString()); break;     
                                                    }
                                                    }                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff tipo 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  paratemp=para.toString();  tipotemp=tp.toString(); 

                                       for (int i = 0; i < nombreid.size(); i++){
                                           tipopara.add(tp.toString());
                                       }
                                       tipopara.add(tp.toString());
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_tipo2_par_fun ::= COMA ID NT$5 masvariablesfun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 nombreid.add(id);
                                    
                                    //llinea.add(((Tokens) id).getFila());
                                    //lcolumna.add(((Tokens) id).getColumna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // masvariablesfun ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masvariablesfun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // masvariablesfun ::= declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masvariablesfun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS IGUAL error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS error NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_par_fun ::= declaracion_tipo_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_par_fun",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_fun ::= ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_fun ::= error declaracion_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_fun ::= ID declaracion_par_fun error parametros_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_fun ::= ID error FIN parametros_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_fun ::= error declaracion_par_fun FIN parametros_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_fun ::= ID declaracion_par_fun NT$4 parametros_funsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
           
                                
                              nombreid.add(id);
                             //llinea.add(((Tokens) id).getFila());
                            //lcolumna.add(((Tokens) id).getColumna());
                                for(int i=0;i<nombreid.size();i++){
                                            interfaz.ltipo.add(tipotemp);interfaz.ldimension.add(dimension);interfaz.lambito.add(ambitoActual);        
                                            interfaz.lparametro.add(paratemp);
                                            interfaz.lnombre.add(((Tokens)(nombreid.get(i))).getIdentificador());
                                            interfaz.larreglo.add("");
                                            llinea.add(((Tokens)(nombreid.get(i))).getFila());
                                            lcolumna.add(((Tokens)(nombreid.get(i))).getColumna());
                                            interfaz.ltiporeturn.add(null);
                                            if(tipotemp.equals("Integer") || tipotemp.equals("Float")){
                                                interfaz.loffset.add(offset);
                                                offset += 4 ;
                                            }else if(tipotemp.equals("Boolean")){
                                                interfaz.loffset.add(offset);
                                                offset += 1 ;
                                               }else{
                                                interfaz.loffset.add(offset);
                                                    offset +=((an2-an1)+(an4-an3))*offset;
                                                    }
                                                  interfaz.lprofundidad.add(profundidad);
                                           System.out.println("entro----"+((Tokens)(nombreid.get(i))).getIdentificador());
                                        interfaz.ltipopar.add("");
                                        }interfaz.ltipopar.add("bloque");
                                            an1=0;an2=0;an3=0;an4=0;
                                            variableDuplicada(id);

                          nombreid.clear(); tipotemp=""; paratemp=""; dimension=0;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_funsig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_funsig ::= FIN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_funsig ::= FIN parametros_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // procedimientofun ::= RETURN tipo error declaraciones BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // procedimientofun ::= RETURN error IS declaraciones BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // procedimientofun ::= error tipo IS declaraciones BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // procedimientofun ::= RETURN tipo error BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // procedimientofun ::= RETURN error IS BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedimientofun ::= error tipo IS BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN tipo error BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN error IS BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // procedimientofun ::= PAR1 parametros_fun PAR2 error tipo IS BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // procedimientofun ::= PAR1 error PAR2 RETURN tipo IS BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedimientofun ::= error parametros_fun PAR2 RETURN tipo IS BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN tipo error declaraciones BEGIN cuerpo return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN error IS declaraciones BEGIN cuerpo return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procedimientofun ::= PAR1 error PAR2 RETURN tipo IS declaraciones BEGIN cuerpo return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procedimientofun ::= error parametros_fun PAR2 RETURN tipo IS declaraciones BEGIN cuerpo return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procedimientofun ::= RETURN tipo IS NT$3 procedimientofun2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                                tipo_return=tp.toString();   

                                    interfaz.ltipopar.add("no tiene");
                                    System.out.println("entro----"+metodo);
                                  
                                    interfaz.ltipopar.add("bloque");
                                    System.out.println("entro----"+metodo);
                                  
                                interfaz.lnombre.add(metodo);
                                interfaz.larreglo.add("");
                                llinea.add(lineatemp);
                                lcolumna.add(columnatemp);
                                interfaz.ltipo.add("Function");interfaz.lambito.add(ambitoPadre1);interfaz.ltiporeturn.add(tipo_return);  
                                interfaz.lparametro.add("");interfaz.ldimension.add("");        
                                tipopara.clear();
                                interfaz.lprofundidad.add(profundidad);
                                interfaz.loffset.add(0);
                                
                                dimension=0;
                                tipo_return="";
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN tipo IS NT$2 procedimientofun2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                                tipo_return=tp.toString();
                                
                                  for(int i=0;i<tipopara.size();i++){
                                      interfaz.ltipopar.add(tipopara.get(i));
                                
                                  System.out.println("entro----"+metodo);}
                                      interfaz.ltipopar.add("bloque");System.out.println("entro----"+metodo);
                                  
                                interfaz.lnombre.add(metodo);
                                interfaz.larreglo.add("");
                                llinea.add(lineatemp);
                                lcolumna.add(columnatemp);
                                interfaz.ltipo.add("Function");interfaz.lambito.add(ambitoPadre1);interfaz.ltiporeturn.add(tipo_return);  
                                interfaz.lparametro.add("");interfaz.ldimension.add("");        
                                tipopara.clear();
                                interfaz.lprofundidad.add(profundidad);
                                interfaz.loffset.add(0);
                                  dimension=0;
                                  tipo_return="";
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedimientofun2 ::= error cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedimientofun2 ::= error declaraciones BEGIN cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedimientofun2 ::= BEGIN procedimientofun21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedimientofun2 ::= declaraciones BEGIN procedimientofun21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedimientofun21 ::= cuerpo2 return error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun21",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedimientofun21 ::= cuerpo2 error final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun21",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedimientofun21 ::= error return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun21",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedimientofun21 ::= cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun21",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedimiento ::= PROCEDURE error procedimiento2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedimiento ::= error ID procedimiento2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedimiento ::= PROCEDURE ID NT$1 procedimiento2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                                         metodo=((Tokens) id).getIdentificador(); 
                                         lineatemp=((Tokens) id).getFila();
                                         columnatemp=((Tokens) id).getColumna();
                                         getambito(metodo.toString()); 
                                          ambitoPadre(metodo.toString());
                                          
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arreglo2 ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglo2 ::= asignar COMA arreglo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arreglo ::= ID PAR1 arreglo2 PAR2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // final ::= END error FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // final ::= END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // final ::= END ID FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 begin();  BeginPadre();  --profundidad; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relacion ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relacion ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relacion ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // relacion ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ff ::= IN 
            {
              Object RESULT =null;
		RESULT = "In"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ff",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // par ::= INOUT 
            {
              Object RESULT =null;
		 RESULT = "In Out"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par ::= OUT 
            {
              Object RESULT =null;
		 RESULT = "Out"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // par ::= IN 
            {
              Object RESULT =null;
		 RESULT = "In"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id ::= ID PAR1 PAR2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id ::= arreglo 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // id ::= REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT ="null";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // id ::= NUMERO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT ="null";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "Boolean" ;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		  RESULT = "Float" ;
                    
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		RESULT = "Integer";
         
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 procedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 inicializarvariables();  limpiar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

