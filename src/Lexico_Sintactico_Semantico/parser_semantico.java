
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 17 16:36:32 CST 2012
//----------------------------------------------------

package Lexico_Sintactico_Semantico;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 17 16:36:32 CST 2012
  */
public class parser_semantico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser_semantico() {super();}

  /** Constructor which sets the default scanner. */
  public parser_semantico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_semantico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\325\000\002\002\004\000\002\121\002\000\002\016" +
    "\004\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\120\003\000\002\042" +
    "\003\000\002\042\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\122\002\000\002\055" +
    "\007\000\002\056\005\000\002\056\003\000\002\123\002" +
    "\000\002\024\006\000\002\067\005\000\002\066\005\000" +
    "\002\066\004\000\002\124\002\000\002\026\012\000\002" +
    "\125\002\000\002\026\007\000\002\101\004\000\002\101" +
    "\002\000\002\126\002\000\002\114\006\000\002\115\003" +
    "\000\002\116\006\000\002\116\003\000\002\034\003\000" +
    "\002\127\002\000\002\117\006\000\002\117\005\000\002" +
    "\117\005\000\002\105\004\000\002\105\004\000\002\105" +
    "\004\000\002\105\004\000\002\105\004\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\106\004\000\002\106\004\000\002" +
    "\106\004\000\002\106\004\000\002\106\004\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\104\004\000" +
    "\002\130\002\000\002\131\002\000\002\104\007\000\002" +
    "\007\006\000\002\102\005\000\002\102\004\000\002\132" +
    "\002\000\002\025\010\000\002\133\002\000\002\025\005" +
    "\000\002\010\004\000\002\134\002\000\002\021\006\000" +
    "\002\135\002\000\002\021\005\000\002\136\002\000\002" +
    "\020\010\000\002\137\002\000\002\020\005\000\002\064" +
    "\004\000\002\064\004\000\002\064\002\000\002\140\002" +
    "\000\002\027\006\000\002\051\003\000\002\053\006\000" +
    "\002\053\003\000\002\022\003\000\002\141\002\000\002" +
    "\052\006\000\002\052\005\000\002\052\005\000\002\065" +
    "\003\000\002\065\002\000\002\142\002\000\002\002\011" +
    "\000\002\143\002\000\002\002\007\000\002\002\017\000" +
    "\002\002\024\000\002\003\003\000\002\144\002\000\002" +
    "\005\006\000\002\005\004\000\002\005\004\000\002\004" +
    "\006\000\002\004\003\000\002\011\010\000\002\006\003" +
    "\000\002\006\003\000\002\100\003\000\002\100\002\000" +
    "\002\145\002\000\002\017\007\000\002\146\002\000\002" +
    "\017\007\000\002\012\006\000\002\013\003\000\002\013" +
    "\005\000\002\014\006\000\002\015\003\000\002\031\004" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\044\007\000\002\045\004\000\002\045\002\000\002\043" +
    "\007\000\002\043\007\000\002\043\011\000\002\147\002" +
    "\000\002\043\007\000\002\043\010\000\002\043\010\000" +
    "\002\043\012\000\002\057\004\000\002\057\003\000\002" +
    "\150\002\000\002\050\005\000\002\151\002\000\002\033" +
    "\007\000\002\152\002\000\002\033\007\000\002\041\003" +
    "\000\002\041\003\000\002\040\005\000\002\040\003\000" +
    "\002\046\005\000\002\046\003\000\002\061\005\000\002" +
    "\061\003\000\002\062\005\000\002\062\003\000\002\063" +
    "\003\000\002\060\004\000\002\047\003\000\002\103\003" +
    "\000\002\103\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\077\006\000\002" +
    "\077\003\000\002\070\006\000\002\070\006\000\002\070" +
    "\004\000\002\070\003\000\002\074\004\000\002\074\004" +
    "\000\002\074\002\000\002\072\006\000\002\072\007\000" +
    "\002\073\005\000\002\073\005\000\002\107\007\000\002" +
    "\110\005\000\002\110\005\000\002\153\002\000\002\032" +
    "\017\000\002\154\002\000\002\075\012\000\002\155\002" +
    "\000\002\076\005\000\002\112\006\000\002\112\006\000" +
    "\002\112\006\000\002\112\006\000\002\111\004\000\002" +
    "\111\003\000\002\111\004\000\002\111\003\000\002\111" +
    "\004\000\002\111\003\000\002\113\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\004\015\000\001\002\000\004\002\u01a3\001" +
    "\002\000\004\015\006\001\002\000\004\004\010\001\002" +
    "\000\004\002\uffff\001\002\000\006\017\uffe2\041\uffe2\001" +
    "\002\000\006\017\013\041\014\001\002\000\004\002\uffe1" +
    "\001\002\000\014\004\uffaf\015\uffaf\016\uffaf\020\uffaf\040" +
    "\uffaf\001\002\000\004\004\015\001\002\000\006\045\u018b" +
    "\046\u018e\001\002\000\004\042\017\001\002\000\004\017" +
    "\020\001\002\000\014\004\uffb1\015\uffb1\016\uffb1\020\uffb1" +
    "\040\uffb1\001\002\000\014\004\027\015\022\016\030\020" +
    "\032\040\025\001\002\000\004\004\u0174\001\002\000\004" +
    "\020\u0172\001\002\000\004\002\uffb0\001\002\000\004\004" +
    "\u015a\001\002\000\004\020\uff87\001\002\000\006\045\u0133" +
    "\046\u0137\001\002\000\004\004\325\001\002\000\004\020" +
    "\uff86\001\002\000\020\004\043\023\054\025\040\030\045" +
    "\031\057\051\042\066\036\001\002\000\004\044\324\001" +
    "\002\000\024\004\043\021\uff78\023\054\025\040\030\045" +
    "\031\057\051\042\052\uff78\066\036\001\002\000\004\021" +
    "\320\001\002\000\016\004\156\011\102\012\105\036\100" +
    "\037\103\041\155\001\002\000\032\003\uff74\004\uff74\021" +
    "\uff74\022\uff74\023\uff74\025\uff74\030\uff74\031\uff74\051\uff74" +
    "\052\uff74\064\uff74\066\uff74\001\002\000\024\003\uff39\004" +
    "\uff39\023\uff39\025\uff39\030\uff39\031\uff39\051\uff39\064\uff39" +
    "\066\uff39\001\002\000\004\002\uffb2\001\002\000\016\004" +
    "\156\011\102\012\105\036\100\037\103\041\155\001\002" +
    "\000\010\041\253\044\uff52\046\252\001\002\000\032\003" +
    "\uff76\004\uff76\021\uff76\022\uff76\023\uff76\025\uff76\030\uff76" +
    "\031\uff76\051\uff76\052\uff76\064\uff76\066\uff76\001\002\000" +
    "\004\041\220\001\002\000\006\044\uff53\046\211\001\002" +
    "\000\030\003\uff50\004\uff50\021\uff50\023\uff50\025\uff50\030" +
    "\uff50\031\uff50\051\uff50\052\uff50\064\uff50\066\uff50\001\002" +
    "\000\030\003\uff4f\004\uff4f\021\uff4f\023\uff4f\025\uff4f\030" +
    "\uff4f\031\uff4f\051\uff4f\052\uff4f\064\uff4f\066\uff4f\001\002" +
    "\000\024\004\043\021\uff77\023\054\025\040\030\045\031" +
    "\057\051\042\052\uff77\066\036\001\002\000\004\044\uff54" +
    "\001\002\000\030\003\uff51\004\uff51\021\uff51\023\uff51\025" +
    "\uff51\030\uff51\031\uff51\051\uff51\052\uff51\064\uff51\066\uff51" +
    "\001\002\000\004\004\130\001\002\000\030\003\uff4e\004" +
    "\uff4e\021\uff4e\023\uff4e\025\uff4e\030\uff4e\031\uff4e\051\uff4e" +
    "\052\uff4e\064\uff4e\066\uff4e\001\002\000\032\003\uff75\004" +
    "\uff75\021\uff75\022\uff75\023\uff75\025\uff75\030\uff75\031\uff75" +
    "\051\uff75\052\uff75\064\uff75\066\uff75\001\002\000\004\041" +
    "\060\001\002\000\004\004\061\001\002\000\006\041\066" +
    "\042\065\001\002\000\004\042\063\001\002\000\004\044" +
    "\064\001\002\000\032\003\uff6f\004\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\025\uff6f\030\uff6f\031\uff6f\051\uff6f\052\uff6f\064" +
    "\uff6f\066\uff6f\001\002\000\004\044\127\001\002\000\016" +
    "\004\uffe6\011\uffe6\012\uffe6\036\uffe6\037\uffe6\042\070\001" +
    "\002\000\014\004\104\011\102\012\105\036\100\037\103" +
    "\001\002\000\004\042\071\001\002\000\004\044\072\001" +
    "\002\000\032\003\uff6e\004\uff6e\021\uff6e\022\uff6e\023\uff6e" +
    "\025\uff6e\030\uff6e\031\uff6e\051\uff6e\052\uff6e\064\uff6e\066" +
    "\uff6e\001\002\000\032\004\uff5b\011\uff5b\012\uff5b\032\uff5b" +
    "\033\uff5b\034\120\036\uff5b\037\uff5b\042\uff5b\044\uff5b\045" +
    "\uff5b\047\uff5b\001\002\000\030\004\uff5d\011\uff5d\012\uff5d" +
    "\032\uff5d\033\116\036\uff5d\037\uff5d\042\uff5d\044\uff5d\045" +
    "\uff5d\047\uff5d\001\002\000\006\042\uffe3\045\125\001\002" +
    "\000\034\004\uff56\011\uff56\012\uff56\032\uff56\033\uff56\034" +
    "\uff56\035\uff56\036\uff56\037\uff56\042\uff56\044\uff56\045\uff56" +
    "\047\uff56\001\002\000\062\004\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\025\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\042\ufff8\044\ufff8\045\ufff8\047\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\001\002\000\034\004\ufff2\011\ufff2\012\ufff2\025" +
    "\ufff2\036\ufff2\037\ufff2\042\ufff2\044\ufff2\045\ufff2\047\ufff2" +
    "\053\ufff2\061\ufff2\062\ufff2\001\002\000\004\042\124\001" +
    "\002\000\062\004\ufffa\011\ufffa\012\ufffa\014\ufffa\025\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\047\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\001" +
    "\002\000\034\004\ufff1\011\ufff1\012\ufff1\025\ufff1\036\ufff1" +
    "\037\ufff1\042\ufff1\044\ufff1\045\ufff1\047\ufff1\053\ufff1\061" +
    "\ufff1\062\ufff1\001\002\000\046\004\ufffb\011\ufffb\012\ufffb" +
    "\025\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\041\122\042\ufffb\044\ufffb\045\ufffb\047\ufffb\053\ufffb" +
    "\061\ufffb\062\ufffb\001\002\000\062\004\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\025\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\042\ufff9\044\ufff9\045\ufff9\047\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\001\002\000\026\004\uff60\011\uff60\012" +
    "\uff60\032\114\036\uff60\037\uff60\042\uff60\044\uff60\045\uff60" +
    "\047\uff60\001\002\000\034\004\uff57\011\uff57\012\uff57\032" +
    "\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57\042\uff57" +
    "\044\uff57\045\uff57\047\uff57\001\002\000\024\004\uff5f\011" +
    "\uff5f\012\uff5f\036\uff5f\037\uff5f\042\uff5f\044\uff5f\045\uff5f" +
    "\047\uff5f\001\002\000\034\004\uff59\011\uff59\012\uff59\032" +
    "\uff59\033\uff59\034\uff59\035\112\036\uff59\037\uff59\042\uff59" +
    "\044\uff59\045\uff59\047\uff59\001\002\000\010\004\104\011" +
    "\102\012\105\001\002\000\034\004\uff58\011\uff58\012\uff58" +
    "\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58\042" +
    "\uff58\044\uff58\045\uff58\047\uff58\001\002\000\010\004\104" +
    "\011\102\012\105\001\002\000\030\004\uff5e\011\uff5e\012" +
    "\uff5e\032\uff5e\033\116\036\uff5e\037\uff5e\042\uff5e\044\uff5e" +
    "\045\uff5e\047\uff5e\001\002\000\010\004\104\011\102\012" +
    "\105\001\002\000\032\004\uff5c\011\uff5c\012\uff5c\032\uff5c" +
    "\033\uff5c\034\120\036\uff5c\037\uff5c\042\uff5c\044\uff5c\045" +
    "\uff5c\047\uff5c\001\002\000\010\004\104\011\102\012\105" +
    "\001\002\000\034\004\uff5a\011\uff5a\012\uff5a\032\uff5a\033" +
    "\uff5a\034\uff5a\035\112\036\uff5a\037\uff5a\042\uff5a\044\uff5a" +
    "\045\uff5a\047\uff5a\001\002\000\016\004\uffe6\011\uffe6\012" +
    "\uffe6\036\uffe6\037\uffe6\042\123\001\002\000\062\004\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\025\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\042\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000\064\004\uffe5" +
    "\011\uffe5\012\uffe5\014\uffe5\025\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\014" +
    "\004\104\011\102\012\105\036\100\037\103\001\002\000" +
    "\004\042\uffe4\001\002\000\032\003\uff70\004\uff70\021\uff70" +
    "\022\uff70\023\uff70\025\uff70\030\uff70\031\uff70\051\uff70\052" +
    "\uff70\064\uff70\066\uff70\001\002\000\004\024\uff3d\001\002" +
    "\000\004\024\132\001\002\000\004\011\133\001\002\000" +
    "\004\043\134\001\002\000\004\043\135\001\002\000\004" +
    "\011\136\001\002\000\004\025\137\001\002\000\022\004" +
    "\043\023\054\025\040\030\045\031\057\051\042\064\140" +
    "\066\036\001\002\000\004\065\153\001\002\000\026\003" +
    "\uff32\004\043\021\uff32\023\054\025\040\030\045\031\057" +
    "\051\042\064\140\066\036\001\002\000\004\021\147\001" +
    "\002\000\026\003\uff30\004\043\021\uff30\023\054\025\040" +
    "\030\045\031\057\051\042\064\140\066\036\001\002\000" +
    "\026\003\uff2e\004\043\021\uff2e\023\054\025\040\030\045" +
    "\031\057\051\042\064\140\066\036\001\002\000\006\003" +
    "\uff2f\021\uff2f\001\002\000\006\003\uff31\021\uff31\001\002" +
    "\000\004\025\150\001\002\000\004\044\151\001\002\000" +
    "\032\003\uff3c\004\uff3c\021\uff3c\022\uff3c\023\uff3c\025\uff3c" +
    "\030\uff3c\031\uff3c\051\uff3c\052\uff3c\064\uff3c\066\uff3c\001" +
    "\002\000\006\003\uff33\021\uff33\001\002\000\016\004\156" +
    "\011\102\012\105\036\100\037\103\041\155\001\002\000" +
    "\020\014\202\054\205\055\204\056\176\057\177\060\201" +
    "\063\203\001\002\000\016\004\156\011\102\012\105\036" +
    "\100\037\103\041\155\001\002\000\032\014\170\025\uff48" +
    "\041\122\042\uff48\044\uff48\053\uff48\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\063\ufffb\001\002\000\012\025\uff4c" +
    "\042\uff4c\044\uff4c\053\uff4c\001\002\000\016\025\uff45\042" +
    "\uff45\044\uff45\053\uff45\061\163\062\165\001\002\000\004" +
    "\044\162\001\002\000\026\003\uff2d\004\uff2d\021\uff2d\023" +
    "\uff2d\025\uff2d\030\uff2d\031\uff2d\051\uff2d\064\uff2d\066\uff2d" +
    "\001\002\000\016\004\156\011\102\012\105\036\100\037" +
    "\103\041\155\001\002\000\012\025\uff49\042\uff49\044\uff49" +
    "\053\uff49\001\002\000\016\004\156\011\102\012\105\036" +
    "\100\037\103\041\155\001\002\000\012\025\uff46\042\uff46" +
    "\044\uff46\053\uff46\001\002\000\012\025\uff47\042\uff47\044" +
    "\uff47\053\uff47\001\002\000\006\036\100\037\103\001\002" +
    "\000\016\025\uff45\042\uff45\044\uff45\053\uff45\061\163\062" +
    "\165\001\002\000\012\025\uff4a\042\uff4a\044\uff4a\053\uff4a" +
    "\001\002\000\004\042\174\001\002\000\016\025\uff45\042" +
    "\uff45\044\uff45\053\uff45\061\163\062\165\001\002\000\012" +
    "\025\uff4d\042\uff4d\044\uff4d\053\uff4d\001\002\000\010\004" +
    "\uffed\011\uffed\012\uffed\001\002\000\010\004\uffee\011\uffee" +
    "\012\uffee\001\002\000\010\004\104\011\102\012\105\001" +
    "\002\000\010\004\uffea\011\uffea\012\uffea\001\002\000\010" +
    "\004\uffec\011\uffec\012\uffec\001\002\000\010\004\uffeb\011" +
    "\uffeb\012\uffeb\001\002\000\010\004\ufff0\011\ufff0\012\ufff0" +
    "\001\002\000\010\004\uffef\011\uffef\012\uffef\001\002\000" +
    "\016\025\uff45\042\uff45\044\uff45\053\uff45\061\163\062\165" +
    "\001\002\000\012\025\uff4b\042\uff4b\044\uff4b\053\uff4b\001" +
    "\002\000\006\021\uff79\052\uff79\001\002\000\004\014\212" +
    "\001\002\000\014\004\uff62\011\uff62\012\uff62\036\uff62\037" +
    "\uff62\001\002\000\014\004\104\011\102\012\105\036\100" +
    "\037\103\001\002\000\004\044\uff66\001\002\000\032\003" +
    "\uff61\004\uff61\021\uff61\022\uff61\023\uff61\025\uff61\030\uff61" +
    "\031\uff61\051\uff61\052\uff61\064\uff61\066\uff61\001\002\000" +
    "\004\044\217\001\002\000\032\003\uff65\004\uff65\021\uff65" +
    "\022\uff65\023\uff65\025\uff65\030\uff65\031\uff65\051\uff65\052" +
    "\uff65\064\uff65\066\uff65\001\002\000\006\004\221\047\223" +
    "\001\002\000\006\041\243\042\242\001\002\000\004\042" +
    "\237\001\002\000\014\004\uff6d\011\uff6d\012\uff6d\036\uff6d" +
    "\037\uff6d\001\002\000\014\004\104\011\102\012\105\036" +
    "\100\037\103\001\002\000\016\004\104\011\102\012\105" +
    "\036\100\037\103\047\uff67\001\002\000\004\047\230\001" +
    "\002\000\032\003\uff6c\004\uff6c\021\uff6c\022\uff6c\023\uff6c" +
    "\025\uff6c\030\uff6c\031\uff6c\051\uff6c\052\uff6c\064\uff6c\066" +
    "\uff6c\001\002\000\004\042\231\001\002\000\004\044\232" +
    "\001\002\000\034\003\uff71\004\uff71\021\uff71\022\uff71\023" +
    "\uff71\025\uff71\030\uff71\031\uff71\050\234\051\uff71\052\uff71" +
    "\064\uff71\066\uff71\001\002\000\032\003\uff73\004\uff73\021" +
    "\uff73\022\uff73\023\uff73\025\uff73\030\uff73\031\uff73\051\uff73" +
    "\052\uff73\064\uff73\066\uff73\001\002\000\004\044\235\001" +
    "\002\000\032\003\uff72\004\uff72\021\uff72\022\uff72\023\uff72" +
    "\025\uff72\030\uff72\031\uff72\051\uff72\052\uff72\064\uff72\066" +
    "\uff72\001\002\000\004\047\uff68\001\002\000\004\044\240" +
    "\001\002\000\034\003\uff71\004\uff71\021\uff71\022\uff71\023" +
    "\uff71\025\uff71\030\uff71\031\uff71\050\234\051\uff71\052\uff71" +
    "\064\uff71\066\uff71\001\002\000\032\003\uff6a\004\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\025\uff6a\030\uff6a\031\uff6a\051\uff6a" +
    "\052\uff6a\064\uff6a\066\uff6a\001\002\000\004\044\250\001" +
    "\002\000\016\004\uffe6\011\uffe6\012\uffe6\036\uffe6\037\uffe6" +
    "\042\244\001\002\000\004\042\245\001\002\000\004\044" +
    "\246\001\002\000\034\003\uff71\004\uff71\021\uff71\022\uff71" +
    "\023\uff71\025\uff71\030\uff71\031\uff71\050\234\051\uff71\052" +
    "\uff71\064\uff71\066\uff71\001\002\000\032\003\uff69\004\uff69" +
    "\021\uff69\022\uff69\023\uff69\025\uff69\030\uff69\031\uff69\051" +
    "\uff69\052\uff69\064\uff69\066\uff69\001\002\000\034\003\uff71" +
    "\004\uff71\021\uff71\022\uff71\023\uff71\025\uff71\030\uff71\031" +
    "\uff71\050\234\051\uff71\052\uff71\064\uff71\066\uff71\001\002" +
    "\000\032\003\uff6b\004\uff6b\021\uff6b\022\uff6b\023\uff6b\025" +
    "\uff6b\030\uff6b\031\uff6b\051\uff6b\052\uff6b\064\uff6b\066\uff6b" +
    "\001\002\000\004\014\254\001\002\000\014\004\uffe6\011" +
    "\uffe6\012\uffe6\036\uffe6\037\uffe6\001\002\000\014\004\uff64" +
    "\011\uff64\012\uff64\036\uff64\037\uff64\001\002\000\014\004" +
    "\104\011\102\012\105\036\100\037\103\001\002\000\032" +
    "\003\uff63\004\uff63\021\uff63\022\uff63\023\uff63\025\uff63\030" +
    "\uff63\031\uff63\051\uff63\052\uff63\064\uff63\066\uff63\001\002" +
    "\000\004\053\260\001\002\000\024\004\043\021\263\023" +
    "\054\025\040\030\045\031\057\051\042\052\261\066\036" +
    "\001\002\000\020\004\043\023\054\025\040\030\045\031" +
    "\057\051\042\066\036\001\002\000\006\021\263\052\261" +
    "\001\002\000\004\051\265\001\002\000\030\003\uff44\004" +
    "\uff44\021\uff44\023\uff44\025\uff44\030\uff44\031\uff44\051\uff44" +
    "\052\uff44\064\uff44\066\uff44\001\002\000\004\044\266\001" +
    "\002\000\030\003\uff41\004\uff41\021\uff41\023\uff41\025\uff41" +
    "\030\uff41\031\uff41\051\uff41\052\uff41\064\uff41\066\uff41\001" +
    "\002\000\030\003\uff43\004\uff43\021\uff43\023\uff43\025\uff43" +
    "\030\uff43\031\uff43\051\uff43\052\uff43\064\uff43\066\uff43\001" +
    "\002\000\006\021\263\052\261\001\002\000\030\003\uff42" +
    "\004\uff42\021\uff42\023\uff42\025\uff42\030\uff42\031\uff42\051" +
    "\uff42\052\uff42\064\uff42\066\uff42\001\002\000\024\003\275" +
    "\004\043\023\054\025\040\030\045\031\057\051\042\064" +
    "\140\066\036\001\002\000\032\003\uff38\004\uff38\021\uff38" +
    "\022\uff38\023\uff38\025\uff38\030\uff38\031\uff38\051\uff38\052" +
    "\uff38\064\uff38\066\uff38\001\002\000\006\003\301\021\302" +
    "\001\002\000\004\021\276\001\002\000\004\025\277\001" +
    "\002\000\004\044\300\001\002\000\032\003\uff36\004\uff36" +
    "\021\uff36\022\uff36\023\uff36\025\uff36\030\uff36\031\uff36\051" +
    "\uff36\052\uff36\064\uff36\066\uff36\001\002\000\004\025\307" +
    "\001\002\000\006\003\303\025\304\001\002\000\004\044" +
    "\306\001\002\000\004\044\305\001\002\000\032\003\uff37" +
    "\004\uff37\021\uff37\022\uff37\023\uff37\025\uff37\030\uff37\031" +
    "\uff37\051\uff37\052\uff37\064\uff37\066\uff37\001\002\000\032" +
    "\003\uff34\004\uff34\021\uff34\022\uff34\023\uff34\025\uff34\030" +
    "\uff34\031\uff34\051\uff34\052\uff34\064\uff34\066\uff34\001\002" +
    "\000\004\044\310\001\002\000\032\003\uff35\004\uff35\021" +
    "\uff35\022\uff35\023\uff35\025\uff35\030\uff35\031\uff35\051\uff35" +
    "\052\uff35\064\uff35\066\uff35\001\002\000\004\025\uff3b\001" +
    "\002\000\004\025\313\001\002\000\022\004\043\023\054" +
    "\025\040\030\045\031\057\051\042\064\140\066\036\001" +
    "\002\000\004\021\315\001\002\000\004\025\316\001\002" +
    "\000\004\044\317\001\002\000\032\003\uff3a\004\uff3a\021" +
    "\uff3a\022\uff3a\023\uff3a\025\uff3a\030\uff3a\031\uff3a\051\uff3a" +
    "\052\uff3a\064\uff3a\066\uff3a\001\002\000\004\004\321\001" +
    "\002\000\004\044\322\001\002\000\004\002\uffb4\001\002" +
    "\000\006\021\uff7a\052\uff7a\001\002\000\032\003\uff55\004" +
    "\uff55\021\uff55\022\uff55\023\uff55\025\uff55\030\uff55\031\uff55" +
    "\051\uff55\052\uff55\064\uff55\066\uff55\001\002\000\006\022" +
    "\uff83\041\uff83\001\002\000\006\022\327\041\331\001\002" +
    "\000\010\006\340\007\337\010\341\001\002\000\014\004" +
    "\027\015\022\016\030\020\uff84\040\025\001\002\000\004" +
    "\004\332\001\002\000\006\045\u0119\046\u011c\001\002\000" +
    "\004\042\334\001\002\000\004\022\335\001\002\000\010" +
    "\006\340\007\337\010\341\001\002\000\004\017\342\001" +
    "\002\000\012\017\ufffd\042\ufffd\044\ufffd\046\ufffd\001\002" +
    "\000\012\017\ufffc\042\ufffc\044\ufffc\046\ufffc\001\002\000" +
    "\012\017\ufffe\042\ufffe\044\ufffe\046\ufffe\001\002\000\014" +
    "\004\uffdd\015\uffdd\016\uffdd\020\uffdd\040\uffdd\001\002\000" +
    "\014\004\027\015\022\016\030\020\346\040\025\001\002" +
    "\000\014\004\uffdc\015\uffdc\016\uffdc\020\uffdc\040\uffdc\001" +
    "\002\000\004\020\u0117\001\002\000\020\004\043\023\054" +
    "\025\040\030\045\031\057\051\350\066\036\001\002\000" +
    "\022\004\043\022\uffc8\023\054\025\040\030\045\031\057" +
    "\051\350\066\036\001\002\000\016\004\156\011\102\012" +
    "\105\036\100\037\103\041\155\001\002\000\004\022\363" +
    "\001\002\000\022\004\043\022\uffc5\023\054\025\040\030" +
    "\045\031\057\051\350\066\036\001\002\000\022\004\043" +
    "\022\uffc7\023\054\025\040\030\045\031\057\051\350\066" +
    "\036\001\002\000\022\004\043\022\uffc6\023\054\025\040" +
    "\030\045\031\057\051\350\066\036\001\002\000\022\004" +
    "\043\022\uffc4\023\054\025\040\030\045\031\057\051\350" +
    "\066\036\001\002\000\014\004\uffde\015\uffde\016\uffde\020" +
    "\uffde\040\uffde\001\002\000\004\022\uffc9\001\002\000\004" +
    "\022\uffcb\001\002\000\004\022\uffcc\001\002\000\004\022" +
    "\uffca\001\002\000\016\004\uffb7\011\uffb7\012\uffb7\036\uffb7" +
    "\037\uffb7\044\374\001\002\000\004\021\366\001\002\000" +
    "\014\004\uffe0\015\uffe0\016\uffe0\020\uffe0\040\uffe0\001\002" +
    "\000\006\003\370\004\367\001\002\000\006\003\372\044" +
    "\373\001\002\000\004\044\371\001\002\000\014\004\uffe7" +
    "\015\uffe7\016\uffe7\020\uffe7\040\uffe7\001\002\000\014\004" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\040\uffe8\001\002\000\014" +
    "\004\uffe9\015\uffe9\016\uffe9\020\uffe9\040\uffe9\001\002\000" +
    "\006\021\uffb8\052\uffb8\001\002\000\014\004\104\011\102" +
    "\012\105\036\100\037\103\001\002\000\004\044\uffb6\001" +
    "\002\000\004\044\u0100\001\002\000\006\021\uffb5\052\uffb5" +
    "\001\002\000\004\053\u0102\001\002\000\022\004\043\022" +
    "\363\023\054\025\040\030\045\031\057\051\350\066\036" +
    "\001\002\000\026\004\043\021\uffbe\022\363\023\054\025" +
    "\040\030\045\031\057\051\350\052\uffbe\066\036\001\002" +
    "\000\006\021\u0110\052\u010e\001\002\000\026\004\043\021" +
    "\uffbb\022\363\023\054\025\040\030\045\031\057\051\350" +
    "\052\uffbb\066\036\001\002\000\006\021\uffb9\052\uffb9\001" +
    "\002\000\026\004\043\021\uffbd\022\363\023\054\025\040" +
    "\030\045\031\057\051\350\052\uffbd\066\036\001\002\000" +
    "\026\004\043\021\uffbc\022\363\023\054\025\040\030\045" +
    "\031\057\051\350\052\uffbc\066\036\001\002\000\026\004" +
    "\043\021\uffba\022\363\023\054\025\040\030\045\031\057" +
    "\051\350\052\uffba\066\036\001\002\000\006\021\uffbf\052" +
    "\uffbf\001\002\000\006\021\uffc1\052\uffc1\001\002\000\006" +
    "\021\uffc2\052\uffc2\001\002\000\006\021\uffc0\052\uffc0\001" +
    "\002\000\022\004\043\022\363\023\054\025\040\030\045" +
    "\031\057\051\350\066\036\001\002\000\026\004\uff40\021" +
    "\uff40\022\uff40\023\uff40\025\uff40\030\uff40\031\uff40\051\uff40" +
    "\052\uff40\066\uff40\001\002\000\004\051\u0111\001\002\000" +
    "\004\044\u0112\001\002\000\026\004\uff3f\021\uff3f\022\uff3f" +
    "\023\uff3f\025\uff3f\030\uff3f\031\uff3f\051\uff3f\052\uff3f\066" +
    "\uff3f\001\002\000\006\021\u0110\052\u010e\001\002\000\026" +
    "\004\uff3e\021\uff3e\022\uff3e\023\uff3e\025\uff3e\030\uff3e\031" +
    "\uff3e\051\uff3e\052\uff3e\066\uff3e\001\002\000\006\021\uffc3" +
    "\052\uffc3\001\002\000\004\022\uffcd\001\002\000\020\004" +
    "\043\023\054\025\040\030\045\031\057\051\350\066\036" +
    "\001\002\000\014\004\uffdf\015\uffdf\016\uffdf\020\uffdf\040" +
    "\uffdf\001\002\000\004\004\u0129\001\002\000\006\042\uffd5" +
    "\044\uffd5\001\002\000\010\042\uffd3\044\uffd3\046\u0126\001" +
    "\002\000\004\024\u0122\001\002\000\006\042\uffd7\044\uffd7" +
    "\001\002\000\006\042\uffd8\044\u011f\001\002\000\004\004" +
    "\332\001\002\000\004\042\uffd6\001\002\000\004\042\uffd9" +
    "\001\002\000\012\004\ufff3\006\ufff3\007\ufff3\010\ufff3\001" +
    "\002\000\012\004\u0124\006\340\007\337\010\341\001\002" +
    "\000\010\042\uffce\044\uffce\046\uffce\001\002\000\010\042" +
    "\uffcf\044\uffcf\046\uffcf\001\002\000\004\014\u0127\001\002" +
    "\000\004\011\u0128\001\002\000\006\042\uffd4\044\uffd4\001" +
    "\002\000\006\045\uffd1\046\uffd1\001\002\000\006\045\u0119" +
    "\046\u011c\001\002\000\010\042\uffd0\044\uffd0\046\uffd0\001" +
    "\002\000\010\042\uffd2\044\uffd2\046\uffd2\001\002\000\004" +
    "\020\uff85\001\002\000\004\020\uff82\001\002\000\004\017" +
    "\u0130\001\002\000\014\004\uffdb\015\uffdb\016\uffdb\020\uffdb" +
    "\040\uffdb\001\002\000\014\004\027\015\022\016\030\020" +
    "\346\040\025\001\002\000\014\004\uffda\015\uffda\016\uffda" +
    "\020\uffda\040\uffda\001\002\000\004\004\u0156\001\002\000" +
    "\006\044\uff89\046\u0153\001\002\000\004\044\u0150\001\002" +
    "\000\004\044\uff8f\001\002\000\014\004\u0138\005\u013a\006" +
    "\340\007\337\010\341\001\002\000\006\044\uff8b\046\uff8b" +
    "\001\002\000\006\044\uff8c\046\uff8c\001\002\000\004\041" +
    "\u013b\001\002\000\004\011\u013c\001\002\000\004\043\u013d" +
    "\001\002\000\004\043\u013e\001\002\000\004\011\u013f\001" +
    "\002\000\006\042\u0141\045\u0140\001\002\000\004\011\u0147" +
    "\001\002\000\004\013\u0142\001\002\000\010\006\340\007" +
    "\337\010\341\001\002\000\004\044\u0144\001\002\000\014" +
    "\004\027\015\022\016\030\020\uff96\040\025\001\002\000" +
    "\004\020\uff97\001\002\000\004\020\uff91\001\002\000\004" +
    "\043\u0148\001\002\000\004\043\u0149\001\002\000\004\011" +
    "\u014a\001\002\000\004\042\u014b\001\002\000\004\013\u014c" +
    "\001\002\000\010\006\340\007\337\010\341\001\002\000" +
    "\004\044\u014e\001\002\000\014\004\027\015\022\016\030" +
    "\020\uff96\040\025\001\002\000\004\020\uff90\001\002\000" +
    "\014\004\uff93\015\uff93\016\uff93\020\uff93\040\uff93\001\002" +
    "\000\014\004\027\015\022\016\030\020\uff96\040\025\001" +
    "\002\000\004\020\uff92\001\002\000\004\014\u0154\001\002" +
    "\000\004\011\u0155\001\002\000\004\044\uff8a\001\002\000" +
    "\006\045\uff8e\046\uff8e\001\002\000\006\045\u0133\046\u0159" +
    "\001\002\000\006\044\uff8d\046\uff8d\001\002\000\012\004" +
    "\u0138\006\340\007\337\010\341\001\002\000\004\017\u015b" +
    "\001\002\000\004\005\u015d\001\002\000\004\044\u016f\001" +
    "\002\000\004\041\u015e\001\002\000\004\011\u0160\001\002" +
    "\000\004\042\u016c\001\002\000\004\043\u0161\001\002\000" +
    "\004\043\u0162\001\002\000\004\011\u0163\001\002\000\006" +
    "\042\uff7e\045\u0165\001\002\000\004\042\uff7f\001\002\000" +
    "\004\011\u0166\001\002\000\004\043\u0168\001\002\000\004" +
    "\042\uff7d\001\002\000\004\043\u0169\001\002\000\004\011" +
    "\u016a\001\002\000\004\042\uff7b\001\002\000\004\042\uff7c" +
    "\001\002\000\004\013\u016d\001\002\000\010\006\340\007" +
    "\337\010\341\001\002\000\004\044\uff88\001\002\000\014" +
    "\004\uff95\015\uff95\016\uff95\020\uff95\040\uff95\001\002\000" +
    "\014\004\027\015\022\016\030\020\uff96\040\025\001\002" +
    "\000\004\020\uff94\001\002\000\020\004\043\023\054\025" +
    "\040\030\045\031\057\051\042\066\036\001\002\000\004" +
    "\002\uffb3\001\002\000\006\017\uff81\041\uff81\001\002\000" +
    "\006\017\u0177\041\u0178\001\002\000\014\004\027\015\022" +
    "\016\030\020\uff84\040\025\001\002\000\014\004\uffa6\015" +
    "\uffa6\016\uffa6\020\uffa6\040\uffa6\001\002\000\004\004\015" +
    "\001\002\000\004\042\u017a\001\002\000\004\017\u017b\001" +
    "\002\000\014\004\uffa8\015\uffa8\016\uffa8\020\uffa8\040\uffa8" +
    "\001\002\000\014\004\027\015\022\016\030\020\u017f\040" +
    "\025\001\002\000\014\004\uffa7\015\uffa7\016\uffa7\020\uffa7" +
    "\040\uffa7\001\002\000\004\020\u0184\001\002\000\020\004" +
    "\uffaa\023\uffaa\025\uffaa\030\uffaa\031\uffaa\051\uffaa\066\uffaa" +
    "\001\002\000\020\004\043\023\054\025\040\030\045\031" +
    "\057\051\042\066\036\001\002\000\004\021\366\001\002" +
    "\000\014\004\uffa9\015\uffa9\016\uffa9\020\uffa9\040\uffa9\001" +
    "\002\000\014\004\uffad\015\uffad\016\uffad\020\uffad\040\uffad" +
    "\001\002\000\020\004\uffac\023\uffac\025\uffac\030\uffac\031" +
    "\uffac\051\uffac\066\uffac\001\002\000\020\004\043\023\054" +
    "\025\040\030\045\031\057\051\042\066\036\001\002\000" +
    "\014\004\uffab\015\uffab\016\uffab\020\uffab\040\uffab\001\002" +
    "\000\014\004\027\015\022\016\030\020\u017f\040\025\001" +
    "\002\000\014\004\uffa5\015\uffa5\016\uffa5\020\uffa5\040\uffa5" +
    "\001\002\000\004\020\uff80\001\002\000\006\042\uffa1\044" +
    "\uffa1\001\002\000\004\004\u0198\001\002\000\010\042\uff9d" +
    "\044\uff9d\046\u0195\001\002\000\006\042\uff9f\044\uff9f\001" +
    "\002\000\010\024\u0190\026\u018f\027\u0192\001\002\000\012" +
    "\004\ufff5\006\ufff5\007\ufff5\010\ufff5\001\002\000\012\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\001\002\000\012\004\u0193" +
    "\006\340\007\337\010\341\001\002\000\012\004\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\001\002\000\010\042\uff98\044\uff98" +
    "\046\uff98\001\002\000\010\042\uff99\044\uff99\046\uff99\001" +
    "\002\000\004\014\u0196\001\002\000\004\011\u0197\001\002" +
    "\000\006\042\uff9e\044\uff9e\001\002\000\006\045\uff9b\046" +
    "\uff9b\001\002\000\006\045\u018b\046\u018e\001\002\000\010" +
    "\042\uff9c\044\uff9c\046\uff9c\001\002\000\010\042\uff9a\044" +
    "\uff9a\046\uff9a\001\002\000\006\042\uffa2\044\u019e\001\002" +
    "\000\004\042\uffa0\001\002\000\006\003\u019f\004\015\001" +
    "\002\000\004\042\uffa3\001\002\000\004\042\uffa4\001\002" +
    "\000\014\004\027\015\022\016\030\020\032\040\025\001" +
    "\002\000\004\002\uffae\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\006\016\003\121\004\001\001\000\002\001" +
    "\001\000\004\024\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\010\001\001\000\004\025\011\001" +
    "\001\000\002\001\001\000\004\133\u01a0\001\001\000\004" +
    "\027\015\001\001\000\010\051\u0189\052\u018b\053\u018c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\132\020" +
    "\001\001\000\012\002\025\006\022\017\030\102\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\u0134\004" +
    "\u0135\005\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\040\031\034\032\052\033\043\035\050\036" +
    "\033\043\055\047\032\055\045\060\036\072\046\075\047" +
    "\076\054\103\051\001\001\000\002\001\001\000\034\031" +
    "\322\032\052\033\043\035\050\036\033\043\055\047\032" +
    "\055\045\060\036\072\046\075\047\076\054\103\051\001" +
    "\001\000\002\001\001\000\014\030\153\042\157\055\076" +
    "\070\156\077\310\001\001\000\002\001\001\000\004\155" +
    "\271\001\001\000\002\001\001\000\014\030\153\042\157" +
    "\055\076\070\156\077\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\031\207\032\052\033" +
    "\043\035\050\036\033\043\055\047\032\055\045\060\036" +
    "\072\046\075\047\076\054\103\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\066\001" +
    "\001\000\026\030\075\040\105\041\074\042\107\046\073" +
    "\055\076\056\100\061\072\062\110\063\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\075\055\076\063" +
    "\112\001\001\000\002\001\001\000\016\030\075\046\114" +
    "\055\076\061\072\062\110\063\106\001\001\000\002\001" +
    "\001\000\014\030\075\055\076\061\116\062\110\063\106" +
    "\001\001\000\002\001\001\000\012\030\075\055\076\062" +
    "\120\063\106\001\001\000\002\001\001\000\004\122\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\030" +
    "\075\040\105\041\074\042\107\046\073\055\076\056\125" +
    "\061\072\062\110\063\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\032\052\033\043" +
    "\035\142\036\140\043\055\047\032\055\045\060\036\072" +
    "\046\075\047\076\054\103\051\111\141\113\143\001\001" +
    "\000\002\001\001\000\036\032\052\033\043\035\142\036" +
    "\140\043\055\047\032\055\045\060\036\072\046\075\047" +
    "\076\054\103\051\111\151\113\143\001\001\000\002\001" +
    "\001\000\036\032\052\033\043\035\142\036\140\043\055" +
    "\047\032\055\045\060\036\072\046\075\047\076\054\103" +
    "\051\111\145\113\143\001\001\000\036\032\052\033\043" +
    "\035\142\036\140\043\055\047\032\055\045\060\036\072" +
    "\046\075\047\076\054\103\051\111\144\113\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\153\042\157\055\076\070\156\077\160\001\001\000" +
    "\004\071\177\001\001\000\014\030\153\042\157\055\076" +
    "\070\156\077\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\153\042\157\055\076\070\156\077" +
    "\166\001\001\000\002\001\001\000\014\030\153\042\157" +
    "\055\076\070\156\077\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\170\001\001\000\004\074\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\205\055\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\212" +
    "\001\001\000\026\030\075\040\105\041\213\042\107\046" +
    "\073\050\214\055\076\061\072\062\110\063\106\001\001" +
    "\000\004\150\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\147\223\001\001\000" +
    "\030\030\075\040\105\041\224\042\107\044\226\046\073" +
    "\055\076\057\225\061\072\062\110\063\106\001\001\000" +
    "\026\030\075\040\105\041\224\042\107\046\073\055\076" +
    "\057\235\061\072\062\110\063\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\246\001\001\000\002\001\001\000" +
    "\004\045\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\066\001\001\000\004\151\254\001\001\000" +
    "\026\030\075\040\105\041\213\042\107\046\073\050\255" +
    "\055\076\061\072\062\110\063\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\031\261\032\052\033\043" +
    "\035\050\036\033\043\055\047\032\055\045\060\036\072" +
    "\046\073\263\075\047\076\054\103\051\001\001\000\034" +
    "\031\267\032\052\033\043\035\050\036\033\043\055\047" +
    "\032\055\045\060\036\072\046\075\047\076\054\103\051" +
    "\001\001\000\004\073\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\270\001\001\000\002\001\001\000" +
    "\040\032\052\033\043\035\142\036\140\043\055\047\032" +
    "\055\045\060\036\072\046\075\047\076\054\103\051\111" +
    "\273\112\272\113\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\154\311\001\001\000\002\001\001\000\036\032\052\033" +
    "\043\035\142\036\140\043\055\047\032\055\045\060\036" +
    "\072\046\075\047\076\054\103\051\111\313\113\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\145\325\001\001\000\004\026\327\001\001\000\004\023" +
    "\u012e\001\001\000\012\002\025\006\u012c\017\030\100\u012d" +
    "\001\001\000\004\114\332\001\001\000\010\115\u011c\116" +
    "\u0119\117\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\342" +
    "\001\001\000\012\002\025\006\344\017\030\066\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\032\352" +
    "\033\043\036\346\043\055\047\032\055\045\060\036\067" +
    "\355\075\351\076\354\103\051\105\350\107\353\001\001" +
    "\000\032\032\352\033\043\036\346\043\055\047\032\055" +
    "\045\060\036\075\351\076\354\103\051\105\u0115\107\353" +
    "\001\001\000\014\030\153\042\157\055\076\070\156\077" +
    "\u0100\001\001\000\004\104\363\001\001\000\032\032\352" +
    "\033\043\036\346\043\055\047\032\055\045\060\036\075" +
    "\351\076\354\103\051\105\361\107\353\001\001\000\032" +
    "\032\352\033\043\036\346\043\055\047\032\055\045\060" +
    "\036\075\351\076\354\103\051\105\360\107\353\001\001" +
    "\000\032\032\352\033\043\036\346\043\055\047\032\055" +
    "\045\060\036\075\351\076\354\103\051\105\357\107\353" +
    "\001\001\000\032\032\352\033\043\036\346\043\055\047" +
    "\032\055\045\060\036\075\351\076\354\103\051\105\356" +
    "\107\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\130\374\001\001\000\004\037\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\030\075\040\105\041\375\042\107" +
    "\046\073\055\076\061\072\062\110\063\106\001\001\000" +
    "\004\131\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\032\u0106\033\043\036\u0102\043" +
    "\055\047\032\055\045\060\036\075\u0104\076\u0108\103\051" +
    "\104\u0105\106\u0103\107\u0107\001\001\000\034\032\u0106\033" +
    "\043\036\u0102\043\055\047\032\055\045\060\036\075\u0104" +
    "\076\u0108\103\051\104\u0105\106\u0114\107\u0107\001\001\000" +
    "\004\110\u010e\001\001\000\034\032\u0106\033\043\036\u0102" +
    "\043\055\047\032\055\045\060\036\075\u0104\076\u0108\103" +
    "\051\104\u0105\106\u010c\107\u0107\001\001\000\002\001\001" +
    "\000\034\032\u0106\033\043\036\u0102\043\055\047\032\055" +
    "\045\060\036\075\u0104\076\u0108\103\051\104\u0105\106\u010b" +
    "\107\u0107\001\001\000\034\032\u0106\033\043\036\u0102\043" +
    "\055\047\032\055\045\060\036\075\u0104\076\u0108\103\051" +
    "\104\u0105\106\u010a\107\u0107\001\001\000\034\032\u0106\033" +
    "\043\036\u0102\043\055\047\032\055\045\060\036\075\u0104" +
    "\076\u0108\103\051\104\u0105\106\u0109\107\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\032\u0106\033\043\036\u0102\043\055\047" +
    "\032\055\045\060\036\075\u0104\076\u0108\103\051\104\u0105" +
    "\106\u0112\107\u0107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\032\352\033\043\036\346\043\055\047\032" +
    "\055\045\060\036\067\u0117\075\351\076\354\103\051\105" +
    "\350\107\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\120\u0122\001" +
    "\001\000\004\126\u011d\001\001\000\004\101\u011f\001\001" +
    "\000\004\114\u0120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\127\u0129\001\001\000\006" +
    "\034\u012a\117\u012b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\u0130\001\001\000\012\002\025\006\344\017" +
    "\030\066\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0138\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0142\001\001\000" +
    "\002\001\001\000\012\002\025\006\u0144\017\030\065\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u014c\001\001\000\002\001" +
    "\001\000\012\002\025\006\u0144\017\030\065\u014e\001\001" +
    "\000\002\001\001\000\004\143\u0150\001\001\000\012\002" +
    "\025\006\u0144\017\030\065\u0151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\144\u0156\001\001\000\004\005\u0157\001\001\000\002" +
    "\001\001\000\004\023\u0138\001\001\000\002\001\001\000" +
    "\004\011\u015b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u015e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u016d\001\001\000\002\001\001" +
    "\000\004\142\u016f\001\001\000\012\002\025\006\u0144\017" +
    "\030\065\u0170\001\001\000\002\001\001\000\036\007\u0172" +
    "\031\034\032\052\033\043\035\050\036\033\043\055\047" +
    "\032\055\045\060\036\072\046\075\047\076\054\103\051" +
    "\001\001\000\002\001\001\000\004\146\u0174\001\001\000" +
    "\004\020\u0175\001\001\000\012\002\025\006\u012c\017\030" +
    "\100\u0188\001\001\000\004\137\u0186\001\001\000\004\027" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\136\u017b\001\001\000\012\002\025\006\u017d\017\030\021" +
    "\u017c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\135\u017f\001\001\000\036\010\u0181\031\u0180\032\052\033" +
    "\043\035\050\036\033\043\055\047\032\055\045\060\036" +
    "\072\046\075\047\076\054\103\051\001\001\000\004\037" +
    "\u0182\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\134\u0184\001\001\000\036\010\u0185\031\u0180\032\052\033" +
    "\043\035\050\036\033\043\055\047\032\055\045\060\036" +
    "\072\046\075\047\076\054\103\051\001\001\000\002\001" +
    "\001\000\012\002\025\006\u017d\017\030\021\u0187\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\140\u019b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0193\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\141\u0198\001\001\000\006" +
    "\022\u019a\052\u0199\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u019c\001\001\000\002\001\001\000\004" +
    "\027\u019f\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\025\006\022\017\030\102\u01a1\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_semantico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_semantico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_semantico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  



    public void unrecovered_syntax_error(Symbol s)
    {
    
        System.out.println("Error de Sintaxis grave. Error Desconocido. Compilacion Detenida");
        interfaz.resultado=interfaz.resultado+"Error de Sintaxis grave. Error Desconocido. Compilacion Detenida";
    
    }

    public void syntax_error(Symbol cur_token)
    {
        int linea = ( (Tokens)(cur_token.value) ).getFila();
        int columna = ( (Tokens)(cur_token.value) ).getColumna();
        String mensaje = new String("");
        if(cur_token.sym == 0)
        {
            mensaje = "\nERROR: Error sintactico, no se esperaba el token: (EOF), Linea: "
                        + linea
                        + ", Columna: "
                        + columna
                        + "\n" ;
        }
        else 
        {
            mensaje = "\nERROR: Error sintactico, no se esperaba el token: ("
                        + ( (Tokens)(cur_token.value) ).getIdentificador()
                        + "), Linea: "
                        + linea
                        + ", Columna: "
                        + columna
                        + "\n";
        }
        System.out.println(mensaje);
         interfaz.resultado=interfaz.resultado+mensaje;
    
       
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser_semantico$actions {


static String procedure1 = "";  
//********************************Tabla de Simbolos*****************************

static  ArrayList <Integer>llinea = new ArrayList();
static  ArrayList <Integer>lcolumna = new ArrayList();
static Object n1=null,n2=null,n3=null,n4=null;
//******************************************idCuerpo*****************************
static ArrayList idcuerpo = new ArrayList();
static ArrayList prueba = new ArrayList();
static boolean desarrollos = true; 
//********************************In Out*******************************************
static boolean banderaasi = false;
static boolean banderaasi2 = true;

//*************************************Simbolos*******************************************
static ArrayList tipopara = new ArrayList();
static ArrayList nombreid = new ArrayList();
static String tipo_return ="";
static String tipotemp="";
static String paratemp="";
static String metodo="";
static int lineatemp=0;
static int columnatemp=0;
static int dimension =0;
static int dms = 0;
//*********************parametros y funciones ***********************************************
static ArrayList funproc = new ArrayList();
static ArrayList funproctemp = new ArrayList();
static ArrayList funprocid = new ArrayList();
static boolean banderafunproc =false;
static int funprocint =0;
static boolean banderaarr= false;
//**********************Ambito***************************************
     static ArrayList AmbitoPila = new ArrayList();
     static ArrayList AmbitoLista = new ArrayList();
     static String nombreAmbito = "";
     static String ambitoActual = "";
//***************************AmbitoPadre***************************************
     private static ArrayList nombrePadre = new ArrayList();
     private static ArrayList Actual = new ArrayList();
     private static ArrayList siguiente = new ArrayList();
     private static ArrayList siguientetemp = new ArrayList();
     private static String nombreAmbitoPadre = "";
     private static String ambitoPadre1 = "";
//*****************************************Retorno de function *******************************
static ArrayList retornos = new ArrayList();
static boolean ret = false;
static ArrayList compararfun = new ArrayList();
//**************************************comparador de tipos ****************************************
static String comp = "";
static int contarr = 0;
static int lineacomp=0;
static int columnacomp=0;
static ArrayList comparadores = new ArrayList();
static int lineavalor=0;
static int columnavalor=0;
static int minarrx = 0;
static ArrayList pararr = new ArrayList();
//****boolean*********
static ArrayList booleans = new ArrayList();
static ArrayList inimain = new ArrayList();
static boolean exitwhen = false;
static int intmians =0;
static Object comparadorizq = null;
static Object comparadorarr = null; 
static boolean compizq = false;


    
    
  
      
      
   
    public static void Arrayrango(Object izquierdo,ArrayList lista){
            int contador=0;//Contador de la variable
            int contador2=0;//Contador de movimiento en el arraylist lparatemp
            int indiceId2=0;
             
            int indiceId = 0;
            
          
obtenerPrametrosDeFuncionEnArreglo(lista);

            if (verificarSiExisteElemento(((Tokens)izquierdo).getIdentificador()) == true){ //verificar si existe el elemento
               indiceId = obtenerIndice(((Tokens)izquierdo).getIdentificador());
                if (interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("Function") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("procedure") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("integer") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("float") ==false&&
                    interfaz.ltipo.get(indiceId).toString().equalsIgnoreCase("boolean") ==false){    
                    if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId).toString())==true){
                        
                      //  JOptionPane.showMessageDialog(null, "----->>>>"+interfaz.ltipo.get(indiceId2).toString()+indiceId2);
                            if (verificarSiExisteElemento(interfaz.ltipo.get(indiceId).toString()) == true){ //verififcar el tipo del arreglo
                                indiceId2 =obtenerIndice(interfaz.ltipo.get(indiceId).toString());
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId2).toString())==true){
                       
                          System.out.println(""+indiceId2+ "     "+interfaz.ltipo.get(indiceId).toString());
                         for(int i =0; i<=interfaz.larreglo.size()-1;i++){
                             if (contador<indiceId2){
                                 if (interfaz.larreglo.get(i).toString().equals("")){
                                     contador++;
                                     contador2++;
                                 }
                                 else if (interfaz.larreglo.get(i).toString().equals("bloque"))
                                 {   
                                     contador2++;
                                 } 
                                 else {
                                        contador++;
                                        while (interfaz.larreglo.get(i).toString().toString().equalsIgnoreCase("bloque")==false)
                                              {
                                                contador2++;
                                                i++;
                                              }
                                        i--;
                                 }
                             }
                             }
                         contador2++;
                             //JOptionPane.showMessageDialog(null, "contador:------>"+contador);
                            // JOptionPane.showMessageDialog(null, "contador2: "+interfaz.larreglo.get(contador2)+" : "+contador2);
                        int numeroParametros =0;
                        int iterador = contador2;
                        while (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("bloque")==false){
                               if (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("")==false){
                               numeroParametros++;
                               }
                               contador2++;
                        }
                        // JOptionPane.showMessageDialog(null, ":------>");
                       //   JOptionPane.showMessageDialog(null, ":------>"+((Tokens) izquierdo).getIdentificador());
                        System.out.println("Numero de rangos encontrados en interfaz.larreglo: "+numeroParametros);  
                        int indiceTemp;
                        ArrayList otra = new ArrayList();
                        otra = dimensionDeArreglo(lista);
                        if (otra!= null){
                      // JOptionPane.showMessageDialog(null, ":------>");
                        //JOptionPane.showMessageDialog(null, ":------>"+otra.size());}
                          if (numeroParametros==4){
                            System.out.println
                                    ("Arreglo de dos dimensiones");
                                     if (otra.size()==2){
                                         for(int i=0;i<=otra.size()-1;i++){
                                           
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          else {    //JOptionPane.showMessageDialog(null,"nooooo"); 
                                                                   // interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valido)\n";        
                                                                   //JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+interfaz.ltiporeturn.get(indiceTemp)+"'\n";  
                                                         }        
                                                     }else {
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                            }
                                             } else{  
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())<=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&&Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                   
                                                  }
                                                  else {
                                                        interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: value not in range of subtype of 'Standar.Integer defined at line'"+((Tokens)otra.get(i)).getFila()+"\n"; 
                                                       interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: 'Constraint_Error' will be raised at run time\n"; 
                                                      //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                  iterador = iterador+2;}
                                             }
                                         }
                                     }else{
                                               interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)izquierdo).getFila()+":"+((Tokens)izquierdo).getColumna()+": too few subscripts in array reference\n";        
                                           // JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}
                               }
                        } else if (numeroParametros==2){
                            System.out.println("Arreglo de una dimension");
                                     if (otra.size()==1){
                                         for(int i=0;i<=otra.size()-1;i++){
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          
                                                          else {
                                                                   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Indice de Matriz invalido )\n";        
                                                               // JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                              }        
                                                     } else {    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no esta al alcance)\n";        
                                                            // JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no existe)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                }
                                             }else{
                                                   //JOptionPane.showMessageDialog(null, "iterador:"+iterador);
                                                //      JOptionPane.showMessageDialog(null, ":------>comparaion"+interfaz.larreglo.get(iterador).toString()); 
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador() ) <= Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&& Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                  }
                                                  else {
                                                          interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valida)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                         //  JOptionPane.showMessageDialog(null, ":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador)).getIdentificador()+":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador() ); 
                                                          //JOptionPane.showMessageDialog(null, ":------>comparaion2");   
                                                  }
                                               }
                                                 iterador = iterador+2;
                                         }
                                     }else{
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no valida)\n";        
                                            //JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}                            
                                }
                            }
                        }else {
                               System.out.println("Rango Erroneo");
                                  interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Rango no valida)\n";        
                                          
                             }
                        

                                    
                                }else {  interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Tipo de Matriz no esta al alcance)\n";        
                                         //JOptionPane.showMessageDialog(null, "El tipo del array no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);}//  
                                }
                                }else{
                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Tipo de Matriz no existe)\n";
                           // JOptionPane.showMessageDialog(null, "El tipo del elemento no existe","Error",JOptionPane.ERROR_MESSAGE);}//cuarto if del tipo 
                            }
                                }else {interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no esta al alcance)\n";
                        //JOptionPane.showMessageDialog(null, "La variable no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);}  //Tercer if  
                    }
                        } else if(interfaz.ldimension.get(indiceId).toString().equals("2") || interfaz.ldimension.get(indiceId).toString().equals("1") ){
                             indiceId2=indiceId;
                            for(int i =0; i<=interfaz.larreglo.size()-1;i++){
                             if (contador<indiceId2){
                                 if (interfaz.larreglo.get(i).toString().equals("")){
                                     contador++;
                                     contador2++;
                                 }
                                 else if (interfaz.larreglo.get(i).toString().equals("bloque"))
                                 {   
                                     contador2++;
                                 } 
                                 else {
                                        contador++;
                                        while (interfaz.larreglo.get(i).toString().toString().equalsIgnoreCase("bloque")==false)
                                              {
                                                contador2++;
                                                i++;
                                              }
                                        i--;
                                 }
                             }
                             }
                         contador2++;
                             //JOptionPane.showMessageDialog(null, "contador:------>"+contador);
                            // JOptionPane.showMessageDialog(null, "contador2: "+interfaz.larreglo.get(contador2)+" : "+contador2);
                        int numeroParametros =0;
                        int iterador = contador2;
                        while (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("bloque")==false){
                               if (interfaz.larreglo.get(contador2).toString().equalsIgnoreCase("")==false){
                               numeroParametros++;
                               }
                               contador2++;
                        }
                        // JOptionPane.showMessageDialog(null, ":------>");
                       //   JOptionPane.showMessageDialog(null, ":------>"+((Tokens) izquierdo).getIdentificador());
                        System.out.println("Numero de rangos encontrados en interfaz.larreglo: "+numeroParametros);  
                        int indiceTemp;
                        ArrayList otra = new ArrayList();
                        otra = dimensionDeArreglo(lista);
                        if (otra!= null){
                      // JOptionPane.showMessageDialog(null, ":------>");
                        //JOptionPane.showMessageDialog(null, ":------>"+otra.size());}
                          if (numeroParametros==4){
                            System.out.println
                                    ("Arreglo de dos dimensiones");
                                     if (otra.size()==2){
                                         for(int i=0;i<=otra.size()-1;i++){
                                           
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          else {    //JOptionPane.showMessageDialog(null,"nooooo"); 
                                                                   // interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valido)\n";        
                                                                   //JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+interfaz.ltiporeturn.get(indiceTemp)+"'\n";  
                                                         }        
                                                     }else {
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": '"+((Tokens)otra.get(i)).getIdentificador()+"' is undefined\n";
                                                           //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                            }
                                             } else{  
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())<=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&&Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt( ((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                   
                                                  }
                                                  else {
                                                        interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: value not in range of subtype of 'Standar.Integer defined at line'"+((Tokens)otra.get(i)).getFila()+"\n"; 
                                                       interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otra.get(i)).getFila()+":"+((Tokens)otra.get(i)).getColumna()+": warning: 'Constraint_Error' will be raised at run time\n"; 
                                                      //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                  iterador = iterador+2;}
                                             }
                                         }
                                     }else{
                                               interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)izquierdo).getFila()+":"+((Tokens)izquierdo).getColumna()+": too few subscripts in array reference\n";        
                                           // JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}
                               }
                        } else if (numeroParametros==2){
                            System.out.println("Arreglo de una dimension");
                                     if (otra.size()==1){
                                         for(int i=0;i<=otra.size()-1;i++){
                                             if (isInteger(((Tokens)otra.get(i)).getIdentificador())==false){
                                                 if (verificarSiExisteElemento(((Tokens)otra.get(i)).getIdentificador()) == true){ //verificar si existe el elemento
                                                     indiceTemp = obtenerIndice(((Tokens)otra.get(i)).getIdentificador());
                                                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceTemp).toString())==true){
                                                          if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("integer")){
                                                              iterador = iterador+2;
                                                          }else if (interfaz.ltipo.get(indiceTemp).toString().equalsIgnoreCase("Function") && (interfaz.ltiporeturn.get(indiceTemp).toString().equalsIgnoreCase("Integer") ) ){
                                                           iterador = iterador+2;
                                                          }
                                                          
                                                          else {
                                                                   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Indice de Matriz invalido )\n";        
                                                               // JOptionPane.showMessageDialog(null, "El tipo no es un integer","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                              }        
                                                     } else {    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no esta al alcance)\n";        
                                                            // JOptionPane.showMessageDialog(null, "El elemento no esta al alcance","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                     }
                                                        }else{
                                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Identificador no existe)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}   //primer if 
                                                }
                                             }else{
                                                   //JOptionPane.showMessageDialog(null, "iterador:"+iterador);
                                                //      JOptionPane.showMessageDialog(null, ":------>comparaion"+interfaz.larreglo.get(iterador).toString()); 
                                                  if(Integer.parseInt(((Tokens)otra.get(i)).getIdentificador() ) <= Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador)).getIdentificador())&& Integer.parseInt(((Tokens)otra.get(i)).getIdentificador())>=Integer.parseInt(((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador())){
                                                  }
                                                  else {
                                                          interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otra.get(i)).getFila()+", Columna"+((Tokens)otra.get(i)).getColumna()+" (Rango no valida)\n";        
                                                        //JOptionPane.showMessageDialog(null, "El rango esta fuera del rango","Error",JOptionPane.ERROR_MESSAGE);i=otra.size()-1;}//quiento if  
                                                         //  JOptionPane.showMessageDialog(null, ":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador)).getIdentificador()+":------>interfaz.larreglo"+((Tokens)interfaz.larreglo.get(iterador+1)).getIdentificador() ); 
                                                          //JOptionPane.showMessageDialog(null, ":------>comparaion2");   
                                                  }
                                               }
                                                 iterador = iterador+2;
                                         }
                                     }else{
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no valida)\n";        
                                            //JOptionPane.showMessageDialog(null, "El numero de rangos es incorrecto","Error",JOptionPane.ERROR_MESSAGE);}                            
                                }
                            }
                        }else {
                               System.out.println("Rango Erroneo");
                                  interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Rango no valida)\n";        
                                          
                             }
                        
                        }
                                
                                else{interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (El Identificador no es una Matriz)\n";
               // JOptionPane.showMessageDialog(null, "La variable no es un array","Error",JOptionPane.ERROR_MESSAGE);}  //segundo if   
                 }
                }else{interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)izquierdo).getFila()+", Columna"+((Tokens)izquierdo).getColumna()+" (Matriz no existe)\n";
            //JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);}   //primer if
            
            }
    }




     



    private static void obtenerPrametrosDeFuncionEnArreglo(ArrayList lista)
    {
        int contadorFunciones = 0;
        int tope_izquierda = 0;
       
        Object o_funcionAnterior=null;
        for (int k = 0; k < lista.size(); k++ )
        {
            if ( lista.get(k).toString().equals("bloque") )
            {                
                for (int i = k; i >= tope_izquierda; i--)
                {
                    String funcionAnterior = "";
                    if ( lista.get(i).toString().equals("11a") )
                    {                        
                        contadorFunciones++;
                        ArrayList parametrosFuncion = new ArrayList();
                        
                        Object idFuncion = lista.get(i + 1); // Obtener el ID de la funcion actual
                       
                        // Recorrer los parametros (si hay) de la funcion y agregarlos a un nuevo arraylist)
                        for ( int j = i + 3; j < lista.size(); j++ )
                        {
                            // Si el elemento actual no es un parametros, salir
                            if ( lista.get(j).toString().equals("11a") || lista.get(j).toString().equals("1a") || lista.get(j).toString().equals("0a") || lista.get(j).toString().equals("bloque"))
                                break;
                            else
                                parametrosFuncion.add(lista.get(j)); // Si no, agregar parametros
                        } // 0a for

                        // Buscar retorno si existe
                        for (int j = (i+1); j < k; j++ )
                            if ( lista.get(j).toString().equals("11a") )
                            {
                                 funcionAnterior = lista.get(j + 1).toString();
                                 o_funcionAnterior = lista.get(j + 1);
                                 break;                                
                            }

                        if ( !funcionAnterior.equals("") )
                            parametrosFuncion.add(o_funcionAnterior);
                        
                        verificarParametros(idFuncion, parametrosFuncion); // AQUI ES EL LLAMADA A LA FUNCION
                    } // 0a if
                } // 0a de for externo
                tope_izquierda = k;
            }
        }
        
    } // 0a de metodo



 private static ArrayList dimensionDeArreglo(ArrayList lista)            
    {   //JOptionPane.showMessageDialog(null,"entro");
            // Primero que todo revisar cuantos bloques hay
            int contadorBloques = 0;
           

            for ( int i = 0; i <= lista.size()-1; i++ )
            {
                if ( lista.get(i).toString().equalsIgnoreCase("bloque") )
                    contadorBloques++;
                             
            }
            if ( contadorBloques > 2 )
                {
                    System.out.println("Error. Mas de 2 dimensiones");
                    return null;
                }   
        //    JOptionPane.showMessageDialog(null,"entro");
            ArrayList resultado = new ArrayList();
               
            if(contadorBloques ==1){
            // Si son dimensiones con Numeros o IDs
            if ( !lista.get(0).toString().equalsIgnoreCase("11a") && !lista.get(0).toString().equalsIgnoreCase("1a") && !lista.get(0).toString().equalsIgnoreCase("bloque") )
              {  resultado.add(lista.get(0));
                return resultado;
                }else{
                resultado.add(lista.get(1));
               return resultado;}
        }
            
            else{
             if ( !lista.get(0).toString().equalsIgnoreCase("11a") && !lista.get(0).toString().equalsIgnoreCase("1a") && !lista.get(0).toString().equalsIgnoreCase("bloque") )
             {  resultado.add(lista.get(0));}

            if ( !lista.get(2).toString().equalsIgnoreCase("11a") && !lista.get(2).toString().equalsIgnoreCase("1a") && !lista.get(2).toString().equalsIgnoreCase("bloque") )
            { resultado.add(lista.get(2));}
            // JOptionPane.showMessageDialog(null,"entro");               
            
            // Si es con funciones
            // Recorrer cada bloque
            boolean agregar = true;
            for (int i = 0; i <= lista.size()-1; i++ )
            {
                if ( lista.get(i).toString().equalsIgnoreCase("11a") && agregar == true)
                {
                    resultado.add(lista.get(i + 1));
                    agregar = false;
                }
                if ( lista.get(i).toString().equalsIgnoreCase("bloque") )
                    agregar = true;
            } // fin recorrido de bloques

            return resultado;
            }

    }



  public static boolean isInteger( String input )   
  {   
   try  
   {   
      Integer.parseInt( input );   
      return true;   
   }   
   catch( Exception e )   
   {   
      return false;   
   }   
}  
             
     
   
   public static void comprobarFunctionProcedure(String comparador){
        if (verificarSiExisteElemento(comparador) == true){
         int indice = obtenerIndice(comparador);
                                                        
            if (interfaz.ltipo.get(indice).toString().equalsIgnoreCase("procedure") || interfaz.ltipo.get(indice).toString().equalsIgnoreCase("function")){
                for (int i = 0;i<=interfaz.lnombre.size()-1;i++)
                {  
                  if (indice!=i){
                    if (interfaz.lnombre.get(indice).toString().equals(interfaz.lnombre.get(i).toString())){
                                                                       
                        if (interfaz.lambito.get(indice).toString().equalsIgnoreCase(interfaz.lambito.get(i).toString())){
                           //Aqui empiezo a buscar los punteros del indice
                            int contador=0;//Contador de la variable
                            int contador2=0;//Contador de movimiento en el arraylist lparatemp
                                for(int j =0; j<=interfaz.ltipopar.size();j++){
                                    if (contador<indice){
                                        if (interfaz.ltipopar.get(j).toString().equals("")){
                                            contador++;
                                            contador2++;
                                        }
                                        else if (interfaz.ltipopar.get(j).toString().equals("no hay")){
                                                contador++;
                                                contador2++;

                                            }
                                        else if (interfaz.ltipopar.get(j).toString().equals("bloque"))
                                        {   
                                            contador2++;
                                        } 
                                        else {
                                                contador++;
                                                while (interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("boolean"))
                                                    {
                                                        contador2++;
                                                        j++;
                                                    }
                                                j--;
                                            }
                                       }
                              }
                            //cuento el numero de parametros del primero
                           int numeroParametros = 0;
                           int iterador = contador2 + 1;
                           int iterador1 = iterador;
                        
                           while (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("bloque")==false){
                            
                               if (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("boolean")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("Function")){
                                   numeroParametros++;
                                  }
                                  iterador++;
                                }
                           
                            //Aqui empiezo a buscar los punteros del indice    
                            int contador11=0;//Contador de la variable
                            int contador22=0;//Contador de movimiento en el arraylist lparatemp
                                for(int j =0; j<=interfaz.ltipopar.size();j++){
                                    if (contador11<i){
                                        if (interfaz.ltipopar.get(j).toString().equals("")){
                                            contador11++;
                                            contador22++;
                                        }
                                        else if (interfaz.ltipopar.get(j).toString().equals("no hay")){
                                                contador11++;
                                                contador22++;

                                            }
                                        else if (interfaz.ltipopar.get(j).toString().equals("bloque"))
                                        {   
                                            contador22++;
                                        } 
                                        else {
                                                contador11++;
                                                while (interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(j).toString().toString().equalsIgnoreCase("boolean"))
                                                    {
                                                        contador22++;
                                                        j++;
                                                    }
                                                j--;
                                            }
                                       }
                              }////// 
                            //cuento el numero de parametros del segundo
                           int numeroParametros2 = 0;
                           int iterador2 = contador22 + 1;
                           int iterador22 = iterador2;
                           
                           while (interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("bloque")==false){
                            
                               if (interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("boolean")||interfaz.ltipopar.get(iterador2).toString().equalsIgnoreCase("Function")){
                                   numeroParametros2++;
                                  }
                                  iterador2++;
                                }
                           int igualdad = 0;
                                               //JOptionPane.showMessageDialog(null, ""+iterador1);
                                               //JOptionPane.showMessageDialog(null, ""+iterador22);
                           if (numeroParametros==numeroParametros2){
                               for (int o =1;o<=numeroParametros;o++){
                                     if (interfaz.ltipopar.get(iterador1).toString().equalsIgnoreCase(interfaz.ltipopar.get(iterador22).toString())){
                                             igualdad++;

                                     }
                                     iterador1++;
                                     iterador22++;
                                   }
                               if (igualdad==numeroParametros2)
                               {
                                  // JOptionPane.showMessageDialog(null, "Variables Identicas");
                                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea: "+lineatemp+", Columna"+columnatemp+" (Variables identicas)\n";        
                     
                                }
                           }
                                                        
                        }
                        
                    }
                }
                }
            }
            else {JOptionPane.showMessageDialog(null, "LA VARIABLE NO ES NI UN PROCEDURE NI UN FUNCTION","Error",JOptionPane.ERROR_MESSAGE);}   
         
        }
        else { //No existe el operador de la izquierda x = <---
              JOptionPane.showMessageDialog(null, "El elemento no esta en lista interfaz.lnombre","Error",JOptionPane.ERROR_MESSAGE);        ;
             }
    }



  public static void compararTipo(Object comparador, ArrayList lista){
      

//JOptionPane.showMessageDialog(null,"ambito actual es ... "+ambitoActual);
       

if (verificarSiExisteElemento(((Tokens) comparador).getIdentificador()) == true){ //Verifica si existe el operador izquierdo
           
            int indiceIzquierdo = obtenerIndice(((Tokens) comparador).getIdentificador());
            int indiceLista;
            int indiceListatemp;
         
             
                               // JOptionPane.showMessageDialog(null,"comparador ..."+((Tokens) comparador).getIdentificador());
                                  if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceIzquierdo).toString())==true){
                                        }else{System.out.println("ERROR LA DE LA IZQUIERDA NO ESTA AL ALCANCE");
                                          interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)comparador).getFila()+":"+((Tokens)comparador).getColumna()+": '"+((Tokens) comparador).getIdentificador().toString()+"' is undefined\n";        
                                          }
                            
                        if(interfaz.ltipo.get(indiceIzquierdo).toString().equals("Procedure") || interfaz.ltipo.get(indiceIzquierdo).toString().equals("Function")){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                     interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens) comparador).getFila()+":"+((Tokens) comparador).getColumna()+": left hand side of assignment must be a variable\n";        
                                             }else{
                             if(interfaz.lparametro.get(indiceIzquierdo).toString().equals("In") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens) comparador).getFila()+", Columna"+((Tokens) comparador).getColumna()+" (La variable es de tipo In)\n";        
                                        }else if(interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("Procedure")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("function")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("boolean")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("float")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("integer")==false)
                                        {   
                                          if ( verificarSiExisteElemento(interfaz.ltipo.get(indiceIzquierdo).toString())==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)comparador).getFila()+", Columna"+((Tokens)comparador).getColumna()+" (El tipo no exitse)\n";        
                     
                                        }else{
                                            
                                            indiceIzquierdo = obtenerIndice(interfaz.ltipo.get(indiceIzquierdo).toString());
                                                    
                                                }
                                        }

                                        
                     for (int i=0;i<=lista.size()-1;i++){

 //  JOptionPane.showMessageDialog(null,""+lista.get(i).toString());
                         if(lista.get(i).toString().equalsIgnoreCase("Integer") || lista.get(i).toString().equalsIgnoreCase("Float") || lista.get(i).toString().equalsIgnoreCase("Boolean")){
                        // JOptionPane.showMessageDialog(null,"entro");
                             if(interfaz.ltipo.get(indiceIzquierdo).equals("Integer") && !(lista.get(i).toString().equals("Integer"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                      
                             }
                           if(interfaz.ltipo.get(indiceIzquierdo).equals("Float") && !(lista.get(i).toString().equals("Float"))){
                                   interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Float'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                            }
                           if(interfaz.ltipo.get(indiceIzquierdo).equals("Boolean") && !(lista.get(i).toString().equals("Boolean"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Boolean'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                             }
                         
                         }
                          else{  if(verificarSiExisteElemento(((Tokens) lista.get(i)).getIdentificador())==true){
                                    indiceLista = obtenerIndice(((Tokens)lista.get(i)).getIdentificador());
                                            
                                 if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceLista).toString())==true){

                                            //System.out.println("La variable: "+interfaz.lnombre.get(indiceLista)+" --> SI esta al alcance");
                                            if (interfaz.ltipo.get(indiceLista).toString().equals("Function")){
                                                 if(interfaz.ltipo.get(indiceLista).toString().equals("Function") && !(interfaz.ltiporeturn.get(indiceLista).toString().equals(interfaz.ltipo.get(indiceIzquierdo)))    )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Retorno con distinto tipo)\n";        
                                                        }
                                            }
                                                
                                                 if((!interfaz.ltipo.get(indiceLista).toString().equals("Function") && !interfaz.ltipo.get(indiceLista).toString().equals("Integer") && !interfaz.ltipo.get(indiceLista).toString().equals("Float") && !interfaz.ltipo.get(indiceLista).toString().equals("Boolean") && !interfaz.ltipo.get(indiceLista).toString().equals("Procedure")))    
                                                        {
                                                        if(verificarSiExisteElemento(((Tokens) comparador).getIdentificador())==true){
                                                                   indiceListatemp = obtenerIndice(interfaz.ltipo.get(indiceLista).toString());
                                            
                                                          if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceListatemp).toString())==true){
                                                            if(!(interfaz.ltipo.get(indiceIzquierdo).toString().equals(interfaz.ltipo.get(indiceListatemp))) ){
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Arreglo con distinto tipo)\n";        
                                                        }
                                                    }else{ interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)lista.get(i)).getFila()+":"+((Tokens)lista.get(i)).getColumna()+": "+((Tokens) comparador).getIdentificador().toString()+" is undefined'\n";        
                                                        }
                                                 }
                                                }
                                                else if(!interfaz.ltipo.get(indiceLista).toString().equals("Function") && !(interfaz.ltipo.get(indiceIzquierdo).toString().equals(interfaz.ltipo.get(indiceLista)))  )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Variable con distinto tipo )\n";        
                                                        }


                                                    
                                            
                                               if(interfaz.lparametro.get(indiceLista).toString().equals("Out") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceLista)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                        //   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (La variable es de tipo Out)\n";        
                                        }
                                                   


                                 }else{
                                                   System.out.println("EEROR LA VARIABLE: "+interfaz.lnombre.get(indiceLista)+" --> NO ESTA AL ALCANCE\n");
                                      interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)lista.get(i)).getFila()+":"+((Tokens)lista.get(i)).getColumna()+"'"+((Tokens) lista.get(i)).getIdentificador().toString()+"' is undefined\n";        
                                         }

                            
                            }else{
                                     interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens) lista.get(i)).getFila()+":"+((Tokens) lista.get(i)).getColumna()+": '"+((Tokens) lista.get(i)).getIdentificador().toString()+"' is undefined\n";        
                           //     System.out.print("ERROR! LA VARIABLE  "+((Tokens) comparador).getIdentificador()+" NO HA SIDO DECLARADA (NO ESTA EN interfaz.lnombre)\n");

                            }   
                        }
                  
            }    
        
}
        }
        else { //No existe el operador de la izquierda x = <---
              System.out.print("El elemento de la izquierda no esta en lista interfaz.lnombre\n");
             }
              comparadores.clear();
    }



    public static boolean verificarSiExisteElemento(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())){
                return true;
            }
        }
        return false;
    }
      public static boolean verificarSiExisteElementoVariable(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())&& interfaz.ldimension.get(i).toString().equals("0")  ){
              //  JOptionPane.showMessageDialog(null, elemento+"---->"+interfaz.ldimension.get(i));
                    return true;
            }
        }
        return false;
    }

                 public static boolean verificarSiExisteElementoProcedimiento(String elemento){
         for (int i = interfaz.lnombre.size()-1; i>= 0;i--)
        {
            if (elemento.equals(interfaz.lnombre.get(i).toString())&&(interfaz.ltipo.get(i).toString().equalsIgnoreCase("Procedure")==false||interfaz.ltipo.get(i).toString().equalsIgnoreCase("Function")==false) && (interfaz.ldimension.get(i).toString().equals("1") || interfaz.ldimension.get(i).toString().equals("2"))  ){
                return true;
            }
        }
        return false;
    }
    public static int obtenerIndice(String elemento){
         int indice = 0;
         boolean bandera = false;
        for (int i = 0;i<=interfaz.lnombre.size()-1;i++)
        {  
            if (elemento.equals(interfaz.lnombre.get(i).toString())&&bandera==false){
                indice = i;
                bandera = true;
            }
            else if (elemento.equals(interfaz.lnombre.get(i).toString())&&alcanceAmbito(ambitoActual,interfaz.lambito.get(i).toString())==true&&bandera==true&&alcanceAmbito(interfaz.lambito.get(i).toString(),interfaz.lambito.get(indice).toString())==true){
                    indice = i;
            }
            else{}
        }
        System.out.print("Variable:"+interfaz.lnombre.get(indice).toString()+"  Ambito: "+interfaz.lambito.get(indice).toString()+"\n");
        return indice;
  }
    
        public static boolean alcanceAmbito(String grande, String pequeno)
        {//JOptionPane.showMessageDialog(null,"grande es : "+grande+"    pequeño es :"+pequeno);
            if (grande.contains(pequeno) || grande.equals(pequeno)){
               // JOptionPane.showMessageDialog(null,"grande o igual");
                    return true;
            }
           //     JOptionPane.showMessageDialog(null,"NO ES");
            return false;
         }


public static void compararBooleans(Object id){
  int indiceLista;
  
      if(verificarSiExisteElemento(((Tokens)id).getIdentificador())==true){
                 indiceLista = obtenerIndice(((Tokens)id).getIdentificador());
                 if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceLista).toString())==true){
                       if(interfaz.ltipo.get(indiceLista).toString().equals("Procedure") ){
                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens) id).getColumna()+" (La variable no puede ser Procedure)\n";                                             
                        }  
                        else if (interfaz.ltipo.get(indiceLista).toString().equalsIgnoreCase("Function")){
                            
                             if (interfaz.ltiporeturn.get(indiceLista).toString().equalsIgnoreCase("boolean")){

                                                        }
                             else {  
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Retorno distinto)\n";        
                                  }
                          }
                        else if (!interfaz.ltipo.get(indiceLista).toString().equalsIgnoreCase("boolean") && !interfaz.ldimension.get(indiceLista).toString().equals("1") && !interfaz.ldimension.get(indiceLista).toString().equals("2") ){
                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Tipo de Variable Incorrecto)\n";        
                                
                        } else if((!interfaz.ltipo.get(indiceLista).toString().equals("Function") && !interfaz.ltipo.get(indiceLista).toString().equals("Integer") && !interfaz.ltipo.get(indiceLista).toString().equals("Float") && !interfaz.ltipo.get(indiceLista).toString().equals("Boolean") && !interfaz.ltipo.get(indiceLista).toString().equals("Procedure")))    
                                    {
                                                        if(verificarSiExisteElemento(((Tokens) id).getIdentificador())==true){
                                                               int    indiceListatemp = obtenerIndice(interfaz.ltipo.get(indiceLista).toString());
                                            
                                                          if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceListatemp).toString())==true){
                                                            if(!((interfaz.ltipo.get(indiceListatemp)).equals("Boolean")) ){
                                                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Arreglo con distinto tipo)\n";        
                                                        }
                                                    }else{ interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)id).getFila()+":"+((Tokens)id).getColumna()+": "+((Tokens) id).getIdentificador().toString()+" is undefined'\n";        
                                                        }
                                                 }
                                   }
                        }
                     
                 else{   
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                     }
                                    
        }
        else { //No existe el operador de la izquierda x = <---
              System.out.print("El elemento de la izquierda no esta en lista interfaz.lnombre\n");
             }
     
}


public static void compararRetorno(ArrayList funciones, ArrayList lista){

Object comparador = funciones.get(funciones.size()-1);
//JOptionPane.showMessageDialog(null,"funciones ... "+((Tokens)comparador).getIdentificador());       

if (verificarSiExisteElemento(((Tokens) comparador).getIdentificador()) == true){ //Verifica si existe el operador izquierdo
           
            int indiceIzquierdo = obtenerIndice(((Tokens) comparador).getIdentificador());
                    for(int k =0;k<interfaz.lnombre.size();k++){
                        if(interfaz.lnombre.get(k).equals(((Tokens) comparador).getIdentificador())){
                        indiceIzquierdo=k;}
                        }
            int indiceLista;
         
             
                           //     JOptionPane.showMessageDialog(null,"comparador ..."+((Tokens) comparador).getIdentificador());
                                  if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceIzquierdo).toString())==true){
                                        }else{System.out.println("ERROR LA DE LA IZQUIERDA NO ESTA AL ALCANCE");
                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)comparador).getFila()+", Columna"+((Tokens)comparador).getColumna()+" (Variable no esta al alcance)\n";        
                            }
                            
                        if(interfaz.ltipo.get(indiceIzquierdo).toString().equals("Procedure") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens) comparador).getFila()+", Columna"+((Tokens) comparador).getColumna()+" (La variable no puede ser Procedure)\n";        
                                        }else{
                             if(interfaz.lparametro.get(indiceIzquierdo).toString().equals("In") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceIzquierdo)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens) comparador).getFila()+", Columna"+((Tokens) comparador).getColumna()+" (La variable es de tipo In)\n";        
                                        }else if(interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("Procedure")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("function")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("boolean")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("float")==false&&interfaz.ltipo.get(indiceIzquierdo).toString().equalsIgnoreCase("integer")==false)
                                        {   
                                          if ( verificarSiExisteElemento(interfaz.ltipo.get(indiceIzquierdo).toString())==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)comparador).getFila()+", Columna"+((Tokens)comparador).getColumna()+" (El tipo no exitse)\n";        
                     
                                        }else{
                                            
                                            indiceIzquierdo = obtenerIndice(interfaz.ltipo.get(indiceIzquierdo).toString());
                                                    
                                        }
                                        }
                        }
 

if(interfaz.ltipo.get(indiceIzquierdo).toString().equals("Function")){



   for (int i=0;i<=lista.size()-1;i++){
       
     
       
 //  JOptionPane.showMessageDialog(null,""+lista.get(i).toString());
                         if(lista.get(i).toString().equalsIgnoreCase("Integer") || lista.get(i).toString().equalsIgnoreCase("Float") || lista.get(i).toString().equalsIgnoreCase("Boolean")){
                        // JOptionPane.showMessageDialog(null,"entro");
                             if(interfaz.ltiporeturn.get(indiceIzquierdo).equals("Integer") && !(lista.get(i).toString().equals("Integer"))){
                                   interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";  
                                                       
                             }
                           if(interfaz.ltiporeturn.get(indiceIzquierdo).equals("Float") && !(lista.get(i).toString().equals("Float"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Float'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                                                        
                             }
                           if(interfaz.ltiporeturn.get(indiceIzquierdo).equals("Boolean") && !(lista.get(i).toString().equals("Boolean"))){
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Boolean'\n";        
                                  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+lista.get(i).toString()+"'\n";                                                         
                                                        
                             }
                         
                         }
                          else{  if(verificarSiExisteElemento(((Tokens) comparador).getIdentificador())==true){
                                    indiceLista = obtenerIndice(((Tokens)lista.get(i)).getIdentificador());
                                            
                                 if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceLista).toString())==true){

                                            //System.out.println("La variable: "+interfaz.lnombre.get(indiceLista)+" --> SI esta al alcance");
                                            if (interfaz.ltipo.get(indiceLista).toString().equals("Function")){
                                                 if(interfaz.ltipo.get(indiceLista).toString().equals("Function") && !(interfaz.ltiporeturn.get(indiceLista).toString().equals(interfaz.ltiporeturn.get(indiceIzquierdo)))    )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar."+interfaz.ltiporeturn.get(indiceIzquierdo).toString()+"'\n";        
                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Standar."+interfaz.ltiporeturn.get(indiceLista).toString()+"'\n";                                                         
                                                        }
                                            }

                                                if(!interfaz.ltipo.get(indiceLista).toString().equals("Function") && (!interfaz.ltiporeturn.get(indiceIzquierdo).toString().equals(interfaz.ltipo.get(indiceLista)))  )
                                                        {
                                                         interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Variable con distinto tipo)\n";        
                                                        }


                                                    
                                            
                                               if(interfaz.lparametro.get(indiceLista).toString().equals("Out") ){
                                                
                                             System.out.println("\nERROR LA VARIABLE "+interfaz.lnombre.get(indiceLista)+" --> ESTA AL ALCANCE PERO NO ES DEL MISMO TIPO DE LA DE LA IZQUIERDA\n");
                                           //interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (La variable es de tipo Out)\n";        
                                        }
                                                   


                                 }else{
                                                   System.out.println("EEROR LA VARIABLE: "+interfaz.lnombre.get(indiceLista)+" --> NO ESTA AL ALCANCE\n");
                                     interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)lista.get(i)).getFila()+", Columna"+((Tokens)lista.get(i)).getColumna()+" (Variable no esta al alcance)\n";        
                                          }

                            
                            }else{

                                System.out.print("ERROR! LA VARIABLE  "+((Tokens) comparador).getIdentificador()+" NO HA SIDO DECLARADA (NO ESTA EN interfaz.lnombre)\n");

                            }   
                        }
       
                            
                        }
                  












        }
                
    }

//funciones.remove(funciones.size()-1);
}

public static void VerificarParametrosGrande(ArrayList lista1, ArrayList lista2){
        int ultimoInicio =0; 
        Object temp = null;
        ArrayList listaTemp = new ArrayList();
        
       System.out.println("-> Elementos  de lista1:");
                        for (int i = 0; i<= lista1.size()-1;i++){
                            System.out.println(""+lista1.get(i).toString());
                            }
                System.out.println("-> Elementos  de lista2:");
                        for (int i = 0; i<= lista2.size()-1;i++){
                            System.out.println(""+lista2.get(i).toString());
                            }
               System.out.println("********************--------********************");


  do{
            for(int i = 0;i<=lista2.size()-1;i++){
                if (lista2.get(i).toString().equalsIgnoreCase("1a")){
                    ultimoInicio = i;
                }
            }
            if (lista2.get(ultimoInicio+1).toString().equalsIgnoreCase("0a")){
                listaTemp.add("no hay");
                temp = lista1.get(lista1.size()-1);
                verificarParametros(temp,listaTemp);
                lista2.remove(ultimoInicio+1);
                lista2.remove(ultimoInicio); 
                lista1.remove(lista1.size()-1);
            }
            else{
                while (lista2.get(ultimoInicio).toString().equalsIgnoreCase("0a")==false){
                        if (lista2.get(ultimoInicio).toString().equalsIgnoreCase("1a")){
                            lista2.remove(ultimoInicio);
                        }else{
                            listaTemp.add(lista2.get(ultimoInicio));
                            lista2.remove(ultimoInicio);
                            
                        }
                    }
                    temp = lista1.get(lista1.size()-1);
                    verificarParametros(temp,listaTemp);
                    lista1.remove(lista1.size()-1);
                    lista2.remove(ultimoInicio);
            }
                 System.out.println("Nuevo Tamano de la lista2: "+lista2.size()+"\n");
                System.out.println("-> Elementos restantes de lista2:");
                        for (int i = 0; i<= lista2.size()-1;i++){
                            System.out.println(""+lista2.get(i).toString());
                            }
                System.out.println("-> Elementos restantes de lista1:");
                        for (int i = 0; i<= lista1.size()-1;i++){
                            System.out.println(""+lista1.get(i).toString());
                            }
                
                 listaTemp.clear();
                }while(lista2.isEmpty()==false && lista1.isEmpty()==false);
        System.out.println("********************************************************************");
    }
//*********************************variable no declarada***********************************************
public static void cuerpo()
{
        ArrayList prueba = new ArrayList();
       for (int i=0; i<=idcuerpo.size()-1;i++){
             prueba.add(((Tokens) idcuerpo.get(i)).getIdentificador());
       }
    
       ArrayList idcuerpotemp = interfaz.verificarVariable(prueba,interfaz.lnombre);

               if(!idcuerpotemp.isEmpty()){
           System.out.println("******************************************************************");
           for (int i=0;i<=idcuerpotemp.size()-1;i++){
               for(int j = 0; j<=idcuerpo.size()-1;j++){
                   if (idcuerpotemp.get(i).equals(((Tokens) idcuerpo.get(j)).getIdentificador()))
                        { //interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)idcuerpo.get(j)).getFila()+", Columna"+((Tokens)idcuerpo.get(j)).getColumna()+" (Variables no declarada)\n";        
                        idcuerpo.remove(j);
                          }
               } 
           }
           
       }
    }
//*****************************Funcion Ambito Padre *******************************************
public static void ambitoPadre(String nombreToken)
{      
          if (Actual.size()==0){
              nombrePadre.add(nombreToken);
              ambitoPadre1 = ambitoPadre1 + nombrePadre.get(nombrePadre.size()-1);
              siguiente.add(ambitoPadre1);
              Actual.add(ambitoPadre1);
              System.out.println("Token "+nombrePadre.get(nombrePadre.size()-1)+"   Ambito: "+ambitoPadre1);
          }
          else{
            
                   nombreAmbitoPadre = nombreToken;
                   
                            
                            nombrePadre.add(nombreAmbitoPadre);
                            Actual.add(siguiente.get(siguiente.size()-1));
                            siguiente.add(siguiente.get(siguiente.size()-1)+"."+nombreAmbitoPadre);
                            siguientetemp.add(siguiente.get(siguiente.size()-1));
                            ambitoPadre1 = Actual.get(Actual.size()-1).toString();
                            System.out.println("Token "+nombrePadre.get(nombrePadre.size()-1)+"   Ambito: "+ambitoPadre1);                      
  
         }
        
 }  
public static void BeginPadre()
    {
            siguiente.remove(siguiente.size()-1);
            System.out.print("\n"+siguiente.get(siguiente.size()-1)+"\n");
    }
        
        
        
    public static boolean verificarSiExistePadre(String ambito)
{
        for (int i =siguientetemp.size()-1;i>=0;i--)
        {
            if (siguientetemp.get(i).equals(ambito))
            {
                return true;
            }
            
        }
        return false;
}

//***************************************Ambito Hijas********************************************
public void getambito(String nombre)
{

                 if (AmbitoPila.size()==0){
                              ambitoActual = ambitoActual + nombre;
                              AmbitoLista.add(ambitoActual);
                              AmbitoPila.add(ambitoActual);
                        //JOptionPane.showMessageDialog(null,"entro");
                          }
                else {

                           if (verificarSiExiste(ambitoActual +"." +nombre)==true){
                              // interfaz.resultado="Procedure o Function Dupliada2"; 
                                    ambitoActual = ambitoActual +"." +nombre;
                                    AmbitoLista.add(ambitoActual);
                                    AmbitoPila.add(ambitoActual);
                                }
                           else{
                                    ambitoActual = ambitoActual +"." +nombre;
                                    AmbitoLista.add(ambitoActual);
                                    AmbitoPila.add(ambitoActual);
                            //JOptionPane.showMessageDialog(null,"entro");
                                   }
               }

 }

public void begin()
{
            if(!AmbitoPila.isEmpty()){
            //JOptionPane.showMessageDiialog(null,"salio");
                AmbitoPila.remove(AmbitoPila.size()-1);
                ambitoActual = AmbitoPila.get(AmbitoPila.size()-1).toString();}
                       }
            public static boolean verificarSiExiste(String ambito){
                    for (int i =AmbitoLista.size()-1;i>=0;i--)
                    {
                        if (AmbitoLista.get(i).equals(ambito))
                        {
                            return true;
                        }

                    }
                    return false;
}
          public static void variableDuplicada(Object id)
        {
            int indiceId = obtenerIndice(((Tokens) id).getIdentificador());
           // JOptionPane.showMessageDialog(null,"entro--->"+((Tokens) id).getIdentificador());
            
                for (int i = 0;i<=interfaz.lambito.size()-1;i++){
                    if (interfaz.lambito.get(i).toString().equals(interfaz.lambito.get(indiceId))&&indiceId!=i&&interfaz.lnombre.get(indiceId).equals(interfaz.lnombre.get(i)))
                    { 
                    //JOptionPane.showMessageDialog(null,"entro a if ");
                  
     interfaz.resultado=interfaz.resultado+("\nError Semantico en la Linea "+((Tokens) id).getFila()+", Columna "+((Tokens) id).getColumna()+" (Variable duplicada)\n");                   
                                  System.out.println("Variable Repetida: "+interfaz.lnombre.get(i)+" con "+interfaz.lnombre.get(indiceId)+"\n");
                    }
                }
         }  

 
public static void verificarParametros(Object id, ArrayList otraLista){
      System.out.println("\n***************Lo que se manda al Metodo ***************************");
        System.out.println("-> Elemento izquierdo: "+((Tokens)id).getIdentificador());
        System.out.println("\n-> Otra Lista :");
        for (int i = 0; i<= otraLista.size()-1;i++){
            System.out.println("otrlista"+i+" : "+otraLista.get(i).toString());
        }
        System.out.println("********************************************************************");
   
        
      // for(int i =0 ; i<otraLista.size();i++){
         //  JOptionPane.showMessageDialog(null,  ((Tokens)otraLista.get(i)).getIdentificador());
       //}
       
            //  JOptionPane.showMessageDialog(null,otraLista.size());
                        
      
      
      
        int contador=0;//Contador de la variable
        int contador2=0;//Contador de movimiento en el arraylist lparatemp
        int iterador = 0;
        if (verificarSiExisteElemento( ((Tokens)id).getIdentificador())==true){//Verificar  si existe el elemento 
            
            int indice = obtenerIndice(((Tokens)id).getIdentificador()); //Se busca el indice y se obtiene el puntero
                    System.out.println("-> Elemento izquierdo AMBITO: "+indice);
            if(!interfaz.ldimension.get(indice).toString().equals("1") || interfaz.ldimension.get(indice).toString().equals("2")){
                     if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indice).toString())==true){ //Se verifica el alcance con el acance actual
                    for (int k=0;k<=interfaz.ltipopar.size()-1;k++)
                        {
                         System.out.println(""+k+"  "+interfaz.ltipopar.get(k));
                    }
                    if (interfaz.ltipo.get(indice).toString().equalsIgnoreCase("procedure") || interfaz.ltipo.get(indice).toString().equalsIgnoreCase("function")){ // SI es un procedure y esta al alcance
                      //********************************************************************************************************************************  
                      //JOptionPane.showMessageDialog(null,""+indice);
                         for(int i =0; i<=interfaz.ltipopar.size()-1;i++){
                             
                             if (contador<indice){
                                 if (interfaz.ltipopar.get(i).toString().equals("")){
                                     contador++;
                                     contador2++;
                                 }
                                 else if (interfaz.ltipopar.get(i).toString().equals("no hay")){
                                         contador++;
                                         contador2++;
                                         
                                     }
                                     else if (interfaz.ltipopar.get(i).toString().equals("no tiene")){
                                         contador++;
                                         contador2++;
                                         
                                     }
                                 else if (interfaz.ltipopar.get(i).toString().equals("bloque"))
                                 {   
                                     contador2++;
                                 } 
                                 else {
                                        contador++;
                                        while (interfaz.ltipopar.get(i).toString().toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(i).toString().toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(i).toString().toString().equalsIgnoreCase("boolean"))
                                              {
                                                contador2++;
                                                i++;
                                              }
                                        i--;
                                 }
   
                             }
                             }
                         
                             //JOptionPane.showMessageDialog(null, "contador: "+contador);
                             //JOptionPane.showMessageDialog(null, "contador 2:    "+contador2);
                      //JOptionPane.showMessageDialog(null,"iterador :"+iterador + "con interfaz.lnombre: "+ interfaz.lnombre.get(indice)+"indice :"+indice)  ;                     
                        
                        
       
                    
                        int numeroParametros = 0;
                        iterador = contador2 + 1;
                        
                        int contador3 = iterador;
                        
                        
                        while (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("bloque")==false){
                          //   JOptionPane.showMessageDialog(null, "parametros: "+numeroParametros);
                              if (interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("integer")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("float")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("boolean")||interfaz.ltipopar.get(iterador).toString().equalsIgnoreCase("Function")){
                                   numeroParametros++;
                                 }
                              
                              iterador++;
                        }
                       // JOptionPane.showMessageDialog(null, "parametros: "+numeroParametros);
                        
                       // JOptionPane.showMessageDialog(null,numeroParametros+" otralista: "+otraLista.get(0).toString());
                        if(numeroParametros!=0 && otraLista.get(0).toString().equals("0")){
                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" ( No tienen los mismos parametros )\n";        
                            } else if (numeroParametros==0 && otraLista.get(0).toString().equals("0")){ }//no hacer nada     
                      else if (numeroParametros == otraLista.size() && !otraLista.get(0).toString().equals("0")){
                           //JOptionPane.showMessageDialog(null, "IGUAL NUMERO DE PARAMETROS");
                        
                        
                            //Se comparan los tipos de la otraLista
                            for(int i = 0;i<=otraLista.size()-1;i++){            
                                   if(otraLista.get(i).toString().equalsIgnoreCase("Integer") || otraLista.get(i).toString().equalsIgnoreCase("Float") || otraLista.get(i).toString().equalsIgnoreCase("Boolean")){
                                            if(interfaz.ltipopar.get(contador3).equals("Integer") && !(otraLista.get(i).toString().equals("Integer"))){
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Integer'\n";
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Universal."+otraLista.get(i).toString()+"'\n";   
                                             }
                                            if(interfaz.ltipopar.get(contador3).equals("Float") && !(otraLista.get(i).toString().equals("Float"))){
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Float'\n";
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Universal."+otraLista.get(i).toString()+"'\n";  
                                            }
                                            if(interfaz.ltipopar.get(contador3).equals("Boolean") && !(otraLista.get(i).toString().equals("Boolean"))){
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": expected type 'Standar.Boolean'\n";
                                                interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+lineavalor+":"+columnavalor+": found type 'Universal."+otraLista.get(i).toString()+"'\n"; 
                                             }
                                     }

                        else{      
                                    if (verificarSiExisteElemento( ((Tokens)otraLista.get(i)).getIdentificador() )==true){
                                        
                                        
                                        int indice2 = obtenerIndice( ((Tokens)otraLista.get(i)).getIdentificador() ); //Se busca el indice y se obtiene el puntero
                                               System.out.println(""+i+" AMBITO : "+indice2);
        
                                            if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indice2).toString())==true){ //Se verifica el alcance con el acance actual
                                              //  JOptionPane.showMessageDialog(null, "Variable "+interfaz.lnombre.get(indice2)+" tipo "+interfaz.ltipo.get(indice2).toString());
                                                if (interfaz.ltipo.get(indice2).toString().equalsIgnoreCase("Procedure")){
                                                       interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (No tiene retorno)\n";        
                                                   //JOptionPane.showMessageDialog(null, "LA VARIABLE "+interfaz.lnombre.get(indice2)+" ES UN PROCEDURE","Error",JOptionPane.ERROR_MESSAGE);
                                                }
                                                else if (interfaz.ltipo.get(indice2).toString().equalsIgnoreCase("Function")){
                                                        if (interfaz.ltiporeturn.get(indice2).toString().equalsIgnoreCase(interfaz.ltipopar.get(contador3).toString())){

                                                        }
                                                        else {  interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otraLista.get(i)).getFila()+":"+((Tokens)otraLista.get(i)).getColumna()+": expected type 'Standar."+interfaz.ltipopar.get(contador3).toString()+"'\n";   
                                                              interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)otraLista.get(i)).getFila()+":"+((Tokens)otraLista.get(i)).getColumna()+": found type 'Standar."+interfaz.ltipo.get(indice2).toString()+"'\n";   
                                                     }
                                                }
                                                else {
                                                      if (interfaz.ltipo.get(indice2).toString().equalsIgnoreCase(interfaz.ltipopar.get(contador3).toString())){
                                                        
                                                         }
                                                      else{   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (Distinto tipo)\n";        
                                                           //JOptionPane.showMessageDialog(null,""+interfaz.ltipo.get(indice2).toString()+"  con  "+interfaz.ltipopar.get(iterador).toString() );       
                                                      // JOptionPane.showMessageDialog(null, "Tipos de Variables distintos "+interfaz.ltipo.get(indice2).toString()+" con "+interfaz.ltipopar.get(iterador).toString(),"Error",JOptionPane.ERROR_MESSAGE);
                                                            }
                                                    }
                                            }
                                            else {
                                                      interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (No esta al alcance)\n";        
                                                    //JOptionPane.showMessageDialog(null, "LA VARIABLE "+interfaz.lnombre.get(indice2)+" NO ESTA AL ALCANCE ACTUAL","Error",JOptionPane.ERROR_MESSAGE);
                                                }
                                        
                                    }
                                    else{//JOptionPane.showMessageDialog(null,"NO EXISTE LA VARIABLE "+((Tokens)otraLista.get(i)).getIdentificador(),"Error",JOptionPane.ERROR_MESSAGE);
                                        
                                      interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)otraLista.get(i)).getFila()+", Columna"+((Tokens)otraLista.get(i)).getColumna()+" (No esta declarada)\n";        
                                                    
                                    
                                    }
                                }
                                contador3++;
                            }
                        }
                        
                        else{
                            //JOptionPane.showMessageDialog(null, "NO TIENEN EL MISMO NUMERO DE PARAMETROS","Error",JOptionPane.ERROR_MESSAGE);
                            // interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No tienen los mismos parametros )\n";        
                             interfaz.resultado=interfaz.resultado+"\n"+procedure1+".adb:"+((Tokens)id).getFila()+":"+((Tokens)id).getColumna()+": missing argument in call to"+((Tokens)id).getIdentificador().toString()+ " declarated at line "+((Tokens)id).getFila()+"\n";        
                            

                            } 
                }
                  else {
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No es Procedure o Function)\n";        
                           
                        //JOptionPane.showMessageDialog(null, "LA VARIABLE NO ES NI UN PROCEDURE NI UN FUNCTION","Error",JOptionPane.ERROR_MESSAGE);
                        }    
                }
                  else {
                      interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No esta al alcance )\n";        
                           
                    //JOptionPane.showMessageDialog(null, "LA VARIABLE NO ESTA AL ALCANCE ACTUAL","Error",JOptionPane.ERROR_MESSAGE);
                }
             }
        }
        else{
                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (No esta declarda )\n";        
                  
            //JOptionPane.showMessageDialog(null,"NO EXISTE LA VARIABLE "+id,"Error",JOptionPane.ERROR_MESSAGE);
}
    
       
    }



//**************************************limpiar variables********************************************************
public void limpiar(){
             tipopara.clear();
            nombreid.clear();
            tipo_return ="";
            tipotemp="";
            paratemp="";
            metodo="";
            dimension =0;
            AmbitoPila.clear();
            AmbitoLista.clear();
            nombreAmbito = "";
            ambitoActual = "";
            AmbitoPila = new ArrayList();

}
//*****************iniciar variables**********************************************
 public void inicializarvariables()
{
            llinea = new ArrayList();
            lcolumna = new ArrayList();
            nombrePadre = new ArrayList();
            Actual = new ArrayList();
            siguiente = new ArrayList();
            siguientetemp = new ArrayList();
            nombreAmbitoPadre = "";
            ambitoPadre1 = "";
            idcuerpo= new ArrayList();
            banderaasi = false;
            comparadores = new ArrayList();
            funproc = new ArrayList();
            funprocid = new ArrayList();
            
//**********************Ambito***************************************
     AmbitoPila = new ArrayList();
     AmbitoLista = new ArrayList();
     nombreAmbito = "";
     ambitoActual = "";
//***************************AmbitoPadre***************************************
     ArrayList nombrePadre = new ArrayList();
     ArrayList Actual = new ArrayList();
     ArrayList siguiente = new ArrayList();
     siguientetemp = new ArrayList();
String nombreAmbitoPadre = "";
String ambitoPadre1 = "";
//**************************************comparador de tipos ****************************************
 comp = "";
//***********************Retorno*********************
retornos = new ArrayList();

}



  private final parser_semantico parser;

  /** Constructor */
  CUP$parser_semantico$actions(parser_semantico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser_semantico$do_action(
    int                        CUP$parser_semantico$act_num,
    java_cup.runtime.lr_parser CUP$parser_semantico$parser,
    java.util.Stack            CUP$parser_semantico$stack,
    int                        CUP$parser_semantico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_semantico$result;

      /* select the action based on the action number */
      switch (CUP$parser_semantico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // exit ::= EXIT WHEN parentesis FIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
		  if(exitwhen == true){exitwhen = false;}else{
   interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)e).getFila()+", Columna"+((Tokens)e).getColumna()+" (Ya existe una salida a Loop)\n";        
     } 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("exit",73, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // loop2 ::= exit 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // loop2 ::= exit loop2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // loop2 ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // loop2 ::= ciclos loop2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // loop2 ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // loop2 ::= expresiones loop2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // loop3 ::= loop2 END error FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // loop3 ::= loop2 error LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // loop3 ::= error END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // loop3 ::= loop2 END LOOP FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop3",72, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // loop ::= LOOP NT$28 loop3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("loop",60, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$28 ::= 
            {
              Object RESULT =null;
 exitwhen = true;  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$28",107, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // while ::= WHILE parentesis NT$27 LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-7)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$27 ::= 
            {
              Object RESULT =null;
 exitwhen = true;  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$27",106, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // for ::= FOR ID NT$26 IN NUMERO PUNTO PUNTO NUMERO LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-11)).value;
		 idcuerpo.add(id); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-12)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$26 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
 exitwhen = true;  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$26",105, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // f1_fun ::= ELSE cuerpofun f1_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // f1_fun ::= END IF FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // if_fun ::= IF parentesis THEN cuerpofun f1_fun 
            {
              Object RESULT =null;
		  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // f1 ::= END IF FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // f1 ::= ELSE cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // if ::= IF parentesis THEN cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // if ::= IF parentesis THEN f1 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // condicion2 ::= 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // condicion2 ::= OR parentesis 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // condicion2 ::= AND parentesis 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // condicion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 compararBooleans(id);
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // condicion ::= boolean condicion2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // condicion ::= ID IGUAL boolean condicion2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
		 compararBooleans(id);
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // condicion ::= id relacion id condicion2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // parentesis ::= condicion 
            {
              Object RESULT =null;
		      
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // parentesis ::= PAR1 parentesis PAR2 condicion2 
            {
              Object RESULT =null;
		         
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ciclos ::= loop 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ciclos ::= while 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ciclos ::= if 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ciclos ::= for 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // llamadaproc ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		  int indiceId = 0; ArrayList nada = new ArrayList(); nada.add(0);
                        if (verificarSiExisteElemento(((Tokens)id).getIdentificador()) == true){ 
                            if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId).toString() )==true){
                                indiceId =obtenerIndice( ((Tokens)id).getIdentificador() );
                                   if(!interfaz.ltipo.get(indiceId).toString().equals("Procedure")){
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Retorno de Function,no se le asigna a un Identificador)\n";        
                                    }else{
                                        verificarParametros(id,nada);
                                         }
                                }
                            }

                  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("llamadaproc",65, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // llamadaproc ::= arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		
 int indiceId = 0;
            if (verificarSiExisteElemento(((Tokens)id).getIdentificador()) == true){ 
                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(indiceId).toString() )==true){
                    indiceId =obtenerIndice( ((Tokens)id).getIdentificador() );
                       if(interfaz.ltipo.get(indiceId).toString().equals("Function")){
                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Retorno de Function,no se le asigna a un Identificador)\n";        
                        }
                    }
                }
        
        

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("llamadaproc",65, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // metodo ::= llamadaproc 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // llamarmetodos ::= metodo FIN 
            {
              Object RESULT =null;
		      
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("llamarmetodos",46, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operacion5 ::= id 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 if((!(ids.toString().equals("null"))) && banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                    comparadores.add(ids);  } 
                     if((!(ids.toString().equals("null"))) && ret==true && desarrollos ==true){
                          retornos.add(ids); } 
                    if((!(ids.toString().equals("null"))) && banderafunproc==true  && desarrollos ==true){
                    funproc.add(ids); } 
                         if((!(ids.toString().equals("null"))) && banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(ids);      pararr.add("bloque");
                         } else if((!(ids.toString().equals("null"))) && banderafunproc==true  && desarrollos == true && funprocint>1) {
                       pararr.add(ids);        } 
                    
                      
                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion5",49, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // operacion4 ::= operacion5 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion4",48, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operacion4 ::= operacion4 ENTRE operacion5 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion4",48, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operacion3 ::= operacion4 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion3",47, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operacion3 ::= operacion3 POR operacion4 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion3",47, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operacion2 ::= operacion3 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion2",36, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operacion2 ::= operacion2 MENOS operacion3 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion2",36, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operacion ::= operacion2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operacion ::= operacion MAS operacion2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // asignar ::= boolean 
            {
              Object RESULT =null;
		 RESULT = "null";
                                   if(compizq==true){compararBooleans(comparadorizq);} 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("asignar",31, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // asignar ::= operacion 
            {
              Object RESULT =null;
		 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("asignar",31, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // asignacion ::= arreglo DOSPUNTOS IGUAL NT$25 asignarsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).value;
		 
                    comp=((Tokens) arr).getIdentificador().toString();
                    lineacomp=((Tokens) arr).getFila();
                    columnacomp=((Tokens) arr).getColumna();
                    idcuerpo.add(arr); cuerpo(); 
                       compararTipo(arr,comparadores);
                        comparadores = new ArrayList();
                            compizq=false;
                              
            
             
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$25 ::= 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

                            if (verificarSiExisteElementoProcedimiento(((Tokens) arr).getIdentificador())==false ){
                                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)arr).getFila()+", Columna"+((Tokens)arr).getColumna()+" (Variable no declarada )\n";        
                                   }

                                      banderaasi=true;   banderaarr=true;  comparadorizq = arr ; compizq=true;
                       System.out.println("**************lista marco*************************");
                            for(int i = 0 ; i<pararr.size();i++){
                                System.out.println(pararr.get(i).toString());
                                }   
                        System.out.println("****************lista marco***********************");
                        if (!pararr.isEmpty()) {
                           // Arrayrango(comparadorarr,pararr);
                            pararr= new ArrayList();}
                        pararr= new ArrayList();
                        
                                    
                                   
                            banderaasi=true; 
                           banderaarr=true;
                           compizq=true;
              
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$25",104, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // asignacion ::= ID DOSPUNTOS IGUAL NT$24 asignarsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).value;
		
                        comp=((Tokens) id).getIdentificador().toString(); 
                        lineacomp=((Tokens) id).getFila();
                        columnacomp=((Tokens) id).getColumna();
                        idcuerpo.add(id);   cuerpo();
                        
                            compararTipo(id,comparadores); 
                            comparadores = new ArrayList();
                            compizq=false; 
                                 

               
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$24 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
       if (verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                                interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                 } 
                        banderaasi=true;   banderaarr=true;  comparadorizq = id ; compizq=true; 
                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$24",103, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // asignarsig ::= asignar NT$23 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int asileft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object asi = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("asignarsig",38, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$23 ::= 
            {
              Object RESULT =null;
		int asileft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object asi = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;

                     banderaasi =false;contarr=0;
                     banderaarr=false; 
                            comparadorizq = null;
                            compizq = false ;
                            

                     
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$23",102, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cadena ::= asignar 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cadena ::= asignar cadena 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // leer_escribir ::= PUT PAR1 ID PAR1 PAR2 PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).value;
		   if (verificarSiExisteElementoProcedimiento(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                               }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  idcuerpo.add(id);  
                         RESULT = "null";
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-7)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // leer_escribir ::= PUT PAR1 arreglo PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
		
                             if( verificarSiExisteElemento(((Tokens) id).getIdentificador())==false ){
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                        if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                        }
                                  }  RESULT = "null"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // leer_escribir ::= PUT PAR1 ID PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
		 
                         if( verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  RESULT = id ; idcuerpo.add(id); 
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // leer_escribir ::= PUT PAR1 COMILLA NT$22 put2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$22 ::= 
            {
              Object RESULT =null;
 desarrollos =false; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$22",101, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // leer_escribir ::= GET PAR1 ID PAR1 PAR2 PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).value;
		   if (verificarSiExisteElementoProcedimiento(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                               }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  idcuerpo.add(id);  
                         RESULT = "null";
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-6)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // leer_escribir ::= GET PAR1 arreglo PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		
                             if( verificarSiExisteElemento(((Tokens) id).getIdentificador())==false ){
                                    interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                        if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                            interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                        }
                                  }  RESULT = "null"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // leer_escribir ::= GET PAR1 ID PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		 
                         if( verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                             interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                                  }else{
                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) id).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                            }  RESULT = id ; idcuerpo.add(id); 
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // finlees ::= 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("finlees",35, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // finlees ::= NEWLINE FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("finlees",35, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // put2 ::= cadena COMILLA PAR2 FIN finlees 
            {
              Object RESULT =null;
		 desarrollos =true; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("put2",34, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresiones ::= llamarmetodos 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresiones ::= leer_escribir 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresiones ::= asignacion 
            {
              Object RESULT =null;
		 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cuerpo ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpo ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpo ::= ciclos cuerpo 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cuerpo ::= expresiones cuerpo 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracion_arreglo5 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		  interfaz.larreglo.add("bloque"); interfaz.larreglo.add(n);  dimension = 2; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo5",11, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declaracion_arreglo4 ::= NUMERO PUNTO PUNTO declaracion_arreglo5 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
		 interfaz.larreglo.add(n); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo4",10, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declaracion_arreglo3 ::= NUMERO COMA declaracion_arreglo4 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		 interfaz.larreglo.add(n); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // declaracion_arreglo3 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 dimension=1;  interfaz.larreglo.add("bloque");  interfaz.larreglo.add(n); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declaracion_arreglo2 ::= NUMERO PUNTO PUNTO declaracion_arreglo3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
		 interfaz.larreglo.add(n); interfaz.larreglo.add("bloque"); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo2",8, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // procedimientoa ::= PROCEDURE ID NT$21 procedimientoa2 procedimientofunb 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$21 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
 //if (interfaz.ltipopar.get(interfaz.ltipopar.size()-1).toString().equals("no")){interfaz.ltipopar.remove(interfaz.ltipopar.size()-1);}
                            metodo=((Tokens) id).getIdentificador(); getambito(((Tokens) id).getIdentificador());
                          //      JOptionPane.showMessageDialog(null,"ambito actual es "+ambitoActual);
                            lineatemp=((Tokens) id).getFila();
                            ambitoPadre(((Tokens) id).getIdentificador());
                            columnatemp=((Tokens) id).getColumna();
                            //JOptionPane.showMessageDialog(null,metodo);  
                            inimain.add(id);
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$21",100, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // procedimientoa ::= FUNCTION ID NT$20 procedimientofun procedimientofunb 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$20 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
 //if (interfaz.ltipopar.get(interfaz.ltipopar.size()-1).toString().equals("no")){interfaz.ltipopar.remove(interfaz.ltipopar.size()-1);}
                       metodo=((Tokens) id).getIdentificador(); 
                      lineatemp=((Tokens) id).getFila();
                      columnatemp=((Tokens) id).getColumna();
                      getambito(((Tokens) id).getIdentificador());
                      ambitoPadre(((Tokens) id).getIdentificador()); 
                  //  JOptionPane.showMessageDialog(null,"ambito actual es "+ambitoActual);
                   compararfun.add(id) ;
                   inimain.add(id);
                        
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$20",99, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // procedimientofunb ::= 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // procedimientofunb ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaraciones ::= procedimientoa 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 OF tipo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 tipotemp=tp.toString(); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaracion_tipo ::= declaracion_tipo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",2, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaracion_tipo ::= declaracion_tipo2 DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",2, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaracion_tipo2 ::= DOSPUNTOS ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 tipotemp=((Tokens) tp).getIdentificador();
                                       if ( verificarSiExisteElemento(tipotemp)==false ){
                                           interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)tp).getFila()+", Columna"+((Tokens)tp).getColumna()+" (El tipo no exitse)\n";        
                                                             }else{
                                                                if (alcanceAmbito(ambitoActual,interfaz.lambito.get(obtenerIndice(((Tokens) tp).getIdentificador())).toString())==false){
                                        interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)tp).getFila()+", Columna"+((Tokens)tp).getColumna()+" (Variable no esta al alcance)\n";        
                                     }
                                            dms = (obtenerIndice(tipotemp));
                                                dimension = Integer.parseInt(interfaz.ldimension.get(dms).toString());
                                        }
                                            
    
    
             
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracion_tipo2 ::= DOSPUNTOS tipo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 tipotemp=tp.toString(); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracion_tipo2 ::= COMA ID NT$19 declaracion_tipo2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$19 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
  interfaz.ltipopar.add("no hay");
                            nombreid.add(id);
                            //llinea.add(((Tokens) id).getFila());
                            //lcolumna.add(((Tokens) id).getColumna());
                      
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$19",98, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracion2 ::= declaracion_tipo 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion2",1, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-17)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-17)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-17)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-13)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-13)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-13)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-8)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-8)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-8)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-17)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-12)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-12)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracion ::= ID declaracion2 FIN NT$18 declaracionsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$18 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
         variableDuplicada(id);
                                  nombreid.clear();
                                  tipotemp="";
                                  dimension=0;
                  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$18",97, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion ::= TYPE ID IS declaracion_arreglo FIN NT$17 declaracionsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-6)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$17 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;
        


                            variableDuplicada(id);
                                  nombreid.clear();
                                  tipotemp="";
                                  dimension=0;
                  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$17",96, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracionsig ::= 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracionsig",51, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracionsig ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracionsig",51, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaracion_tipo2_par ::= DOSPUNTOS par ID 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		paratemp=para.toString(); tipotemp=((Tokens) id).getIdentificador();tipopara.add(((Tokens) id).getIdentificador());
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tipotemp);      
                                     } for(int i = interfaz.lnombre.size()-1 ;i>=0;i--){
                                        if(tipotemp.toString().equals(interfaz.lnombre.get(i).toString())){
                                               dimension=Integer.parseInt(interfaz.ldimension.get(i).toString()); break;     
                                                    }
                                                   }
                                                    idcuerpo.add(id); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracion_tipo2_par ::= DOSPUNTOS par tipo 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		  
                                paratemp=para.toString();  tipotemp=tp.toString();
                                for(int i=0;i<nombreid.size();i++){
                                    tipopara.add(tp.toString());      
                                     } 
                                tipopara.add(tp.toString());   //JOptionPane.showMessageDialog(null,tp.toString());  
                            
                            
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracion_tipo2_par ::= COMA ID NT$16 masvariables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$16 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
 
                                          nombreid.add(id);
                                        //   llinea.add(((Tokens) id).getFila());
                                       //lcolumna.add(((Tokens) id).getColumna());
                                      //   JOptionPane.showMessageDialog(null, nombreid.size());
                             
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$16",95, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // masvariables ::= declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("masvariables",16, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracion_tipo_par ::= declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_par ::= declaracion_tipo_par 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_par",39, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros ::= ID declaracion_par NT$15 parametrosig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$15 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
 
                              nombreid.add(id);
                             // llinea.add(((Tokens) id).getFila());
                              // lcolumna.add(((Tokens) id).getColumna());
                              int linea=((Tokens) id).getFila();
                            //   JOptionPane.showMessageDialog(null,linea);
                         nombreid.clear(); ;tipotemp=""; paratemp="";
                         dimension=0;
                         variableDuplicada(id);
                 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$15",94, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametrosig ::= 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametrosig ::= FIN error 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametrosig ::= FIN parametros 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // procedimientoa2 ::= IS NT$14 procedimientoa21 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$14 ::= 
            {
              Object RESULT =null;
 
                                
                                    comprobarFunctionProcedure(metodo.toString());
                       
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$14",93, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // procedimientoa2 ::= PAR1 parametros PAR2 IS NT$13 procedimientoa21 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$13 ::= 
            {
              Object RESULT =null;
 
                            comprobarFunctionProcedure(metodo.toString());
                                
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$13",92, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedimientoa21 ::= BEGIN NT$12 procedimientoa21sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$12 ::= 
            {
              Object RESULT =null;
 //JOptionPane.showMessageDialog(null,"fin");
                               
                            
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$12",91, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procedimientoa21 ::= declaraciones BEGIN NT$11 procedimientoa21sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$11 ::= 
            {
              Object RESULT =null;
//JOptionPane.showMessageDialog(null,"fin"); 
                          
                    
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$11",90, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procedimientoa21sig ::= cuerpo final 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientoa21sig",6, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // procedimiento2 ::= IS NT$10 procedimiento2sig2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$10 ::= 
            {
              Object RESULT =null;
 
                                 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$10",89, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // procedimiento2 ::= PAR1 parametros PAR2 IS NT$9 procedimiento2sig2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-5)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$9 ::= 
            {
              Object RESULT =null;
          tipopara.clear();  
                                 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$9",88, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedimiento2sig2 ::= BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedimiento2sig2 ::= declaraciones BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // procedimiento2sig ::= cuerpo END ID FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		 
 for(int i =0;i<interfaz.larreglo.size();i++){System.out.println(interfaz.larreglo.get(i).toString());}
     if(! ((Tokens) id).getIdentificador().equals( ((Tokens)inimain.get(0)).getIdentificador()  )  ){
                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Procedure o Function no Identificada)\n";        
                       } inimain = new ArrayList();
 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return ::= RETURN NT$7 asignar NT$8 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("return",66, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
     ret = false; 
                    
                     compararRetorno(compararfun,retornos); retornos = new ArrayList(); 
                 
                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$8",87, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$7 ::= 
            {
              Object RESULT =null;
 ret = true;  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$7",86, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return ::= RETURN FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("return",66, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpofun ::= return 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpofun ::= loop 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpofun ::= while 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpofun ::= if_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpofun ::= for 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpofun ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpofun ::= loop cuerpofun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpofun ::= while cuerpofun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpofun ::= if_fun cuerpofun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpofun ::= for cuerpofun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpofun ::= expresiones cuerpofun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo2 ::= loop 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo2 ::= while 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo2 ::= if_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo2 ::= for 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo2 ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo2 ::= loop cuerpo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo2 ::= while cuerpo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo2 ::= if_fun cuerpo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo2 ::= for cuerpo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo2 ::= expresiones cuerpo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff ID 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		paratemp=para.toString(); tipotemp=((Tokens) id).getIdentificador();tipopara.add(((Tokens) id).getIdentificador());
                                            for(int i=0;i<nombreid.size();i++){
                                                tipopara.add(tipotemp);      
                                                 } 
                                            tipopara.add(tipotemp);   //JOptionPane.showMessageDialog(null,tp.toString());  
                                                                idcuerpo.add(id); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff tipo 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		  paratemp=para.toString();  tipotemp=tp.toString(); 

                                       for (int i = 0; i < nombreid.size(); i++){
                                           tipopara.add(tp.toString());
                                       }
                                       tipopara.add(tp.toString());
                                   
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_tipo2_par_fun ::= COMA ID NT$6 masvariablesfun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",77, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
 nombreid.add(id);
                                    
                                    //llinea.add(((Tokens) id).getFila());
                                    //lcolumna.add(((Tokens) id).getColumna());
                                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$6",85, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // masvariablesfun ::= declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("masvariablesfun",26, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_par_fun ::= declaracion_tipo_par_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("declaracion_par_fun",75, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_fun ::= ID declaracion_par_fun NT$5 parametros_funsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametros_fun",74, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
           
                                
                                            variableDuplicada(id);

                          nombreid.clear(); tipotemp=""; paratemp=""; dimension=0;
                      
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$5",84, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_funsig ::= 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_funsig ::= FIN parametros_fun 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedimientofun ::= RETURN tipo IS NT$4 procedimientofun2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$4 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

                                tipo_return=tp.toString();   

                                  dimension=0;
                                   tipo_return="";
                                   comprobarFunctionProcedure(metodo.toString());
                      
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$4",83, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN tipo IS NT$3 procedimientofun2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-7)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;

                                tipo_return=tp.toString();
                                
                                  dimension=0;
                                  tipo_return="";
                                  comprobarFunctionProcedure(metodo.toString());
                      
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$3",82, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedimientofun2 ::= BEGIN procedimientofun21 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedimientofun2 ::= declaraciones BEGIN procedimientofun21 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedimientofun21 ::= cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimientofun21",53, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedimiento ::= PROCEDURE ID NT$2 procedimiento2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-3)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
 
                                        // JOptionPane.showMessageDialog(null,"agrego");
                                         metodo=((Tokens) id).getIdentificador(); 
                                         procedure1=((Tokens) id).getIdentificador();
                                         lineatemp=((Tokens) id).getFila();
                                         columnatemp=((Tokens) id).getColumna();
                                         getambito(metodo.toString()); 
                                          ambitoPadre(metodo.toString());
                                          inimain.add(id);
                                       
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$2",81, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arreglo2 ::= asignar 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("arreglo2",44, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arreglo2 ::= asignar COMA arreglo2 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("arreglo2",44, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglo ::= ID PAR1 NT$1 arreglo2 PAR2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)).value;
		   banderaasi2=true; int con=0,con2=0,indice=0;; 
                  if(desarrollos ==true){  
                   idcuerpo.add(id);
                          funprocint--;
                         //   JOptionPane.showMessageDialog(null,"--->: "+funprocint);
                          funproc.add("0a");
                  if (funprocint>0) { pararr.add("0a");}
                       // funproc.add("bloque");
 con=0; con2=0;
                        System.out.println("------>");
                   }               
                    if (funprocint == 0){
                     if(!pararr.get(pararr.size()-1).equals("bloque")) {      pararr.add("bloque");}
                             banderafunproc=false;
                             banderaasi=true;
                             if(verificarSiExisteElemento(((Tokens)id).getIdentificador())==true){
                                indice=obtenerIndice( ((Tokens)id).getIdentificador() );
                                if(!interfaz.ltipo.get(indice).equals("Procedure") && !interfaz.ltipo.get(indice).equals("Function")){
                        /****************************************************************/
                        if (!pararr.isEmpty()) {
                        System.out.println("**************lista marco*************************");
                        for(int i = 0 ; i<pararr.size();i++){
                            System.out.println( pararr.get(i).toString() );
                               }   
                        System.out.println("****************lista marco***********************");
                            //JOptionPane.showMessageDialog(null,"id es : "+(Tokens)comparadorarr).getIdentificador() );
                             Arrayrango(id,pararr);
                            pararr= new ArrayList();}else{
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Rango no existe)\n";        
                                }
                     }else{
                      if(!funprocid.isEmpty()){ 
                   //   JOptionPane.showMessageDialog(null,"id es : "+((Tokens)id).getIdentificador() );
                      VerificarParametrosGrande(funprocid,funproc);
                      funprocid = new ArrayList();
                      funproc= new ArrayList();}
                    }    
                     funproc= new ArrayList();
                      pararr= new ArrayList(); funprocid= new ArrayList(); }
    }
                      
                     RESULT = id ; 
 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("arreglo",43, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-4)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
  
                 if(desarrollos ==true){
                 
                    funprocint++;
                    if(banderaasi==true && banderaarr==true && banderaasi2==true ){
                               comparadores.add(id); banderaasi=false;}
                if(funprocid.isEmpty()){
                funprocid.add(id); funproc.add("1a");
                    }else{
                funprocid.add(id); funproc.add(id); funproc.add("1a"); }
             banderafunproc=true ;   banderaasi=true; banderaasi2 = false ;
                if(funprocint>1){
                    pararr.add("11a");pararr.add(id); pararr.add("1a");}
                    }
            

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$1",80, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // final ::= END error FIN 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // final ::= END ID error 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // final ::= END ID FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		 idcuerpo.add(id);  begin();  BeginPadre();   if(compararfun.size()>1){
                     compararfun.remove(compararfun.size()-1);
                 }
                         if(! ((Tokens) id).getIdentificador().equals( ((Tokens)inimain.get(inimain.size()-1)).getIdentificador()  )  ){
                 interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Procedure o Function no Identificada)\n";        
                       } inimain.remove(inimain.size()-1);
               
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relacion ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relacion ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relacion ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // relacion ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean ::= FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		
            if(banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                    
                    comparadores.add("Boolean");
                          lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();                     
                            }
                    if(ret==true && desarrollos ==true){
                    retornos.add("Boolean");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                        }
                        if(banderafunproc==true && desarrollos ==true){
                           // pararr.add("Booelan");
                              lineavalor= ((Tokens) t).getFila();
                        columnavalor=((Tokens) t).getColumna();
                             funproc.add("Boolean");
                                }
                   if(banderafunproc==true && desarrollos ==true && funprocint>1){
                            lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                             pararr.add("Boolean");  }
                   if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }   
                       
                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("boolean",32, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 if(banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                
                    comparadores.add("Boolean");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                        }
                    if(ret==true && desarrollos ==true){
                    retornos.add("Boolean");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                        if(banderafunproc==true && desarrollos ==true){ 
                           // pararr.add("Booelan");
                           lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                            funproc.add("Boolean");
                      } 
                      if(banderafunproc==true && desarrollos ==true && funprocint>1){
                            lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                             pararr.add("Boolean");  }
                   if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }   
                    
                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("boolean",32, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ff ::= IN 
            {
              Object RESULT =null;
		RESULT = "In"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("ff",78, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // par ::= INOUT 
            {
              Object RESULT =null;
		 RESULT = "In Out"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par ::= OUT 
            {
              Object RESULT =null;
		 RESULT = "Out"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // par ::= IN 
            {
              Object RESULT =null;
		 RESULT = "In"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id ::= ID PAR1 PAR2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)).value;
		if(desarrollos ==true){ contarr++; int indice=0;
               idcuerpo.add(id);
             if(banderaasi==true && banderaasi2==true && banderaarr==true){
                         comparadores.add(id);} 
             if(ret==true){
                 retornos.add(id);
                           } 
                       if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add("11a"); pararr.add(id); pararr.add("1a");pararr.add("0a"); pararr.add("bloque");
                                }  
                        if(verificarSiExisteElemento(((Tokens)id).getIdentificador())==true){
                                indice=obtenerIndice( ((Tokens)id).getIdentificador() );
                                if(!interfaz.ltipo.get(indice).equals("Procedure") && !interfaz.ltipo.get(indice).equals("Function")){
                        /****************************************************************/
                         interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Rango no existe)\n";        
                                }
                            }
      
                }        
            RESULT = "null"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-2)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id ::= arreglo 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 RESULT = "null"; 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // id ::= REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 RESULT ="null"; 
            if(banderaasi==true && banderaasi2==true && banderaarr==true && desarrollos ==true){
                   
                    comparadores.add("Float");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                    if(ret==true && desarrollos ==true){
                    retornos.add("Float");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                        if(banderafunproc==true && desarrollos ==true ){
                           // pararr.add("Float");
                           lineavalor= ((Tokens) t).getFila();
                            columnavalor=((Tokens) t).getColumna();
                             funproc.add("Float"); 
                    }
                     if(banderafunproc==true && desarrollos ==true && funprocint>1){
                              lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                               pararr.add("Float");  }
                       if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }

                
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // id ::= NUMERO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 RESULT ="null"; 
            if(banderaasi==true && banderaasi2==true&& banderaarr==true && desarrollos ==true){
                   
                      lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();
                    comparadores.add("Integer");}
                    if(ret==true && desarrollos ==true){
                    retornos.add("Integer");
                     lineavalor= ((Tokens) t).getFila();
                     columnavalor=((Tokens) t).getColumna();}
                       if(banderafunproc==true && desarrollos ==true){  
                           lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                           funproc.add("Integer"); 
                          }
                   if(banderafunproc==true && desarrollos ==true && funprocint>1){
                            lineavalor= ((Tokens) t).getFila();
                           columnavalor=((Tokens) t).getColumna();
                             pararr.add("Integer");  }
                   if( banderafunproc==true  && desarrollos == true && funprocint<=1) {
                       pararr.add(t);  pararr.add("bloque");
                                }   
                               
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.peek()).value;
		 if(desarrollos ==true){ 
 if( verificarSiExisteElementoVariable(((Tokens) id).getIdentificador())==false ){
                        //     interfaz.resultado=interfaz.resultado+"\nError Semantico en la Linea"+((Tokens)id).getFila()+", Columna"+((Tokens)id).getColumna()+" (Variable no declarada )\n";        
                               }  idcuerpo.add(id); 
                            }  RESULT = id ;
         
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "Boolean" ;
     
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		  RESULT = "Float" ;
                    
             
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		RESULT = "Integer";
         
            
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 procedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		  
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("programa",12, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 inicializarvariables();  limpiar(); 
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("NT$0",79, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          return CUP$parser_semantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)).value;
		RESULT = start_val;
              CUP$parser_semantico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.elementAt(CUP$parser_semantico$top-1)), ((java_cup.runtime.Symbol)CUP$parser_semantico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_semantico$parser.done_parsing();
          return CUP$parser_semantico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

