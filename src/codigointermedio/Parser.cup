package codigointermedio;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;



action code
{:
    
:};

init with
{:
    CodigoIntermedio.limpiar();
:}

/*Palabras reservadas*/
terminal ID,ARRAY,BOOLEAN,FLOAT,ENTERO,NUMERO,REAL,OF,IGUAL;
terminal PROCEDURE,FUNCTION,IS,BEGIN,END,RETURN;
terminal FOR,IN,LOOP,OUT,INOUT,PUT,GET;
terminal MAS,MENOS,POR,ENTRE,TRUE,FALSE,TYPE;

/*Simbolos*/
terminal PAR1,PAR2,PUNTO,FIN,COMA,DOSPUNTOS,COMILLA,NEWLINE;
terminal IF,ELSE, THEN, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL,NOT;
terminal AND,OR,DISTINTO,EXIT,WHEN,WHILE; 

/*Producciones*/
non terminal declaracion,declaracion2,declaracion_tipo,declaracion_tipo2,declaraciones,procedimiento2sig,procedimientoa21sig;
non terminal declaracion_arreglo, declaracion_arreglo2,declaracion_arreglo3,declaracion_arreglo4,declaracion_arreglo5,programa,procedimientoa,procedimientoa2,procedimientoa21,masvariables;
non terminal tipo,procedimiento,procedimiento2,procedimientofun,parametros,id,cuerpo,for,asignacion,masvariablesfun;
non terminal ciclos,expresiones,final,operacion,asignar,boolean,leer_escribir,put2,finlees,operacion2,metodo,asignarsig;
non terminal declaracion_par,declaracion_tipo2_par,declaracion_tipo_par,par,arreglo,arreglo2;
non terminal cadena,llamarmetodos,operacion3,operacion4,operacion5,parametrosig,declaracionsig,procedimientofun2,procedimientofun21;
non terminal condicion,relacion,if,f1,condicion2,while,loop,parentesis,procedimientofunb,parametros_funsig,procedimiento2sig2;
non terminal llamadaproc,return ,cuerpo2,cuerpofun,if_fun,f1_fun,loop2, exit,parametros_fun,declaracion_par_fun, declaracion_tipo_par_fun,declaracion_tipo2_par_fun,ff;

/*Precedencia*/
precedence left MAS, MENOS;
precedence left POR, ENTRE;
precedence left IGUAL;




start with programa ;



programa ::= procedimiento
         ;



tipo ::= ENTERO
      | FLOAT
      | BOOLEAN
      ;

id ::= ID:id {: RESULT = id; :}
      | NUMERO:t {: RESULT = t; :}
      | REAL:t {: RESULT = t; :}
      | arreglo:arr {: RESULT = arr; :}
      | ID:id PAR1 PAR2 {: RESULT = id; :}
      ;

par ::= IN
       | OUT
       | INOUT
       ;

ff ::= IN
       ;

boolean ::= TRUE:t {: RESULT = t; :}
            | FALSE:t {: RESULT = t; :}
            ;

relacion ::= MENOR {: RESULT = "<"; :}
            | MAYOR {: RESULT = ">"; :}
            | MENORIGUAL {: RESULT = "<="; :}
            | MAYORIGUAL {: RESULT = ">="; :}
            | IGUAL  {: RESULT = "="; :}
            | DISTINTO {: RESULT = "/="; :}
            | NOT {: RESULT = "not"; :}
            ;

final ::= END ID:id FIN
         ;

arreglo ::=  ID:id PAR1 arreglo2  PAR2 {:  RESULT =id;    :} 
             ;
                                
arreglo2 ::= asignar COMA arreglo2 | asignar ;

/******************************************************** PROCEDIMIENTO ***************************************************************/
procedimiento ::= PROCEDURE ID procedimiento2
                   ;
                    
procedimientofun21::= cuerpo2 return final
                   ;

procedimientofun2::=  declaraciones BEGIN  procedimientofun21
                     | BEGIN  procedimientofun21
                      ;
                
procedimientofun ::=  PAR1 parametros_fun PAR2 RETURN tipo:tp IS procedimientofun2
                     | RETURN tipo:tp IS procedimientofun2
                     ;


/**************************************************** PARAMATEROS DE UN FUNCTION ************************************************************/
parametros_funsig ::= FIN parametros_fun
                   |
                   ;

parametros_fun ::= ID:id declaracion_par_fun parametros_funsig
                   ;
                    
             
declaracion_par_fun ::= declaracion_tipo_par_fun ;

declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS IGUAL NUMERO
                            | declaracion_tipo2_par_fun
                            ;

masvariablesfun::= declaracion_tipo2_par_fun ;

declaracion_tipo2_par_fun ::= COMA ID:id masvariablesfun
                              | DOSPUNTOS ff:para tipo:tp 
                              | DOSPUNTOS ff:para ID:id
                              ;
                              

/*************************************************************** PROCEDIMIENTO ***********************************************************************/

cuerpo2 ::=  expresiones cuerpo2 | for cuerpo2 | if_fun cuerpo2 | while cuerpo2 | loop cuerpo2 |
             expresiones         | for         | if_fun         | while         | loop         ; 

cuerpofun ::=  expresiones cuerpofun | for cuerpofun | if_fun cuerpofun | while cuerpofun | loop cuerpofun |
               expresiones           | for           | if_fun           | while           | loop           | 
               return                ;               

return ::= RETURN FIN
           | RETURN asignar FIN ;
                    

procedimiento2sig ::= cuerpo END ID FIN 
                      ;


procedimiento2sig2 ::= declaraciones BEGIN   procedimiento2sig
                       | BEGIN   procedimiento2sig
                       ;
                        

procedimiento2 ::= PAR1 parametros PAR2 IS procedimiento2sig2
                   | IS procedimiento2sig2
                   ;
              
procedimientoa21sig ::= cuerpo final ;

procedimientoa21 ::= declaraciones BEGIN procedimientoa21sig
                    | BEGIN procedimientoa21sig
                    ;
 
                                                              
procedimientoa2 ::= PAR1 parametros PAR2 IS procedimientoa21
                    | IS procedimientoa21
                    ;


/******************************************************* DECLARACION DE PARAMETROS *******************************************************************/
parametrosig ::= FIN parametros
             |
             ;



parametros ::= ID:id declaracion_par parametrosig
               ;

declaracion_par ::= declaracion_tipo_par
                 ;   
          

declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS IGUAL NUMERO
                         | declaracion_tipo2_par
                         ;



masvariables::= declaracion_tipo2_par
                ;


declaracion_tipo2_par ::= COMA ID:id masvariables
                          | DOSPUNTOS par:para tipo:tp 
                          | DOSPUNTOS par:para ID:id                            
                          ;


/**************************************************************** DECLARACION DE VARIABLES ************************************************************/

declaracionsig ::= declaraciones | ;

declaracion ::= TYPE ID:id IS declaracion_arreglo  FIN declaracionsig
                |ID:id declaracion2 FIN declaracionsig {:  :}
                |ID:id DOSPUNTOS ARRAY PAR1 NUMERO:n1 PUNTO PUNTO NUMERO:n2 PAR2 OF tipo:tp FIN declaracionsig 
                |ID:id DOSPUNTOS ARRAY PAR1 NUMERO:n1 PUNTO PUNTO NUMERO:n2 COMA NUMERO:n3 PUNTO PUNTO NUMERO:n4 PAR2 OF tipo:tp FIN declaracionsig
                ;


declaracion2 ::= declaracion_tipo ;
                 

declaracion_tipo2 ::= COMA ID:id declaracion_tipo2
                      | DOSPUNTOS tipo:tp 
                      | DOSPUNTOS ID:tp
                      ;

declaracion_tipo ::= declaracion_tipo2 DOSPUNTOS IGUAL NUMERO | 
                     declaracion_tipo2 ; 

declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 OF tipo:tp
                       ;


declaraciones ::=  declaracion | procedimientoa ;


procedimientofunb ::= declaraciones
                      |
                      ;

procedimientoa ::=  FUNCTION ID:id procedimientofun procedimientofunb
                    | PROCEDURE ID:id procedimientoa2 procedimientofunb
                    ;


declaracion_arreglo2::= NUMERO:n PUNTO PUNTO  declaracion_arreglo3
                        ;

declaracion_arreglo3::= NUMERO:n
                        | NUMERO:n  COMA declaracion_arreglo4                        
                        ;

declaracion_arreglo4 ::= NUMERO:n PUNTO PUNTO declaracion_arreglo5                       
                        ;

declaracion_arreglo5::= NUMERO:n
                        ;

/********************************************************************** CUERPO ***********************************************************************************/

cuerpo ::=  expresiones cuerpo
            | ciclos cuerpo
            | expresiones
            | ciclos
            ;

/******************************************************************** EXPRESIONES *******************************************************************************/

expresiones ::= asignacion
                | leer_escribir
                | llamarmetodos
                ; 
                 

put2::= cadena COMILLA PAR2 FIN finlees
        ; 

               
finlees ::= NEWLINE FIN
            |
            ;
            
leer_escribir ::= GET PAR1 ID:id PAR2 FIN    
                  | GET PAR1 arreglo:id  PAR2 FIN   
                  | GET PAR1 ID:id PAR1 PAR2  PAR2 FIN 
                  | PUT PAR1 COMILLA put2
                  | PUT PAR1 ID:id PAR2 FIN finlees    
                  | PUT PAR1 arreglo:id  PAR2 FIN finlees   
                  | PUT PAR1 ID:id PAR1 PAR2  PAR2 FIN finlees
                  ;

cadena::= asignar cadena
          | asignar
          ;

asignarsig ::= asignar:asi FIN {: RESULT = asi.toString(); :}
               ;


asignacion ::= ID:id DOSPUNTOS IGUAL asignarsig:id2
                {:
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   //Cuadruplo cuadruplo = new Cuadruplo("MOV", ((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador(), id2.toString(), temp);
                   Cuadruplo cuadruplo = new Cuadruplo("MOV", id2.toString(), null,((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador());
                   CodigoIntermedio.reciclarTemporales(id2.toString());                   

                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);                   
                   RESULT = temp;
                :}             
               | arreglo:arr DOSPUNTOS IGUAL asignarsig 
               ;
              
asignar ::= operacion:ids {: RESULT = ids.toString(); :}
            | boolean:ids {: RESULT = ((Lexico_Sintactico_Semantico.Tokens) ids).getIdentificador(); :}
            ;

operacion ::= operacion:a1 MAS operacion2:a2
                {: String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("ADD", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);                                                         
                   RESULT = temp;
              :}
              ;
operacion ::= operacion2:ids {: RESULT = ids.toString(); :}
              ;

operacion2 ::= operacion2:a1 MENOS operacion3:a2
                {:
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("SUB", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);
                   RESULT = temp;
              :}
              ;
operacion2 ::= operacion3:ids {: RESULT = ids.toString(); :}
              ;


operacion3 ::= operacion3:a1 POR operacion4:a2
              {:
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("MUL", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);
                   RESULT = temp;
              :}
              ;
 operacion3 ::= operacion4:ids {: RESULT = ids.toString(); :}
              ;

operacion4 ::= operacion4:a1 ENTRE operacion5:a2
                {:
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("DIV", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);
                   RESULT = temp;
              :}
              ;
operacion4 ::= operacion5:ids {: RESULT = ids.toString(); :}
               ;

operacion5 ::= id:ids
               {: RESULT = ((Lexico_Sintactico_Semantico.Tokens) ids).getIdentificador(); :}
               ;

 /******************************************************* LLAMADAS A PROCEDIMIENTOS Y FUNCIONES *********************************************************/   


llamarmetodos ::= metodo FIN ;

metodo ::=  llamadaproc    ;
            
 
llamadaproc ::= arreglo
                | ID 
                ;

/************************************************************************ CICLOS ************************************************************************/

ciclos ::= for
          | if
          | while
          | loop
          ;

/*Condiciones*/
parentesis ::= PAR1 parentesis PAR2 condicion2
               | condicion:c {: RESULT = c; :}
               ;


condicion ::= operacion:op1 relacion:opr operacion:op2
              {:
                    String temp = CodigoIntermedio.getTemporalNuevo();
                    EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
                    CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("if" + opr, op1.toString(), op2.toString(), et.getEtiqueta2()));
                    
                    /*if ( opr.equals(">") )                                            
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sgt", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));                    
                    else if ( opr.equals("<") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("slt", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals(">=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sge", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals("<=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sle", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals("=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("seq", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals("/=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sne", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                        */                    
              :}
              | ID:id IGUAL boolean condicion2 
              {:
                    CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("seq", ((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador(), null, CodigoIntermedio.getTemporalNuevo()));              
              :}                            
              | boolean:b {: RESULT = b; :} condicion2
              | ID:id
              ;




condicion2 ::= AND  parentesis
               | OR parentesis
               |
               ;

/*If-Else*/
 if ::= IF parentesis THEN f1
        | IF parentesis THEN cuerpo f1
        ;
        

 f1 ::= ELSE cuerpo f1
        | END IF FIN
        ;

if_fun ::= IF parentesis THEN cuerpofun f1_fun
           ;
           

 f1_fun ::= END IF FIN
           | ELSE cuerpofun f1_fun
           ;


/*For*/
 for ::=  FOR ID:id IN NUMERO:n1 PUNTO PUNTO NUMERO:n2 LOOP
          {:
                /* Set valores iniciales */
                String temporal1 = CodigoIntermedio.getTemporalNuevo();
                String temporal2 = CodigoIntermedio.getTemporalNuevo();
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("li", ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), null, temporal1 ));
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("li", ((Lexico_Sintactico_Semantico.Tokens) n2).getIdentificador(), null, temporal2 ));

                //CodigoIntermedio.reciclarTemporales(temporal1);
                //CodigoIntermedio.reciclarTemporales(temporal2);

                /* Instanciar EtiNodo con los 3 ids y las 3 etiquetas*/
                EtiNodo et = new EtiNodo( ((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador(),((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(),((Lexico_Sintactico_Semantico.Tokens) n2).getIdentificador(),CodigoIntermedio.getEtiquetaNueva(),CodigoIntermedio.getEtiquetaNueva(),CodigoIntermedio.getEtiquetaNueva() );
                CodigoIntermedio.agregarEtiNodo(et);

                /* Condicion salto fuera del FOR */
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("blt", ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), ((Lexico_Sintactico_Semantico.Tokens) n2).getIdentificador(), et.getEtiqueta3()));

                /* Etiqueta para entrar al cuerpo del FOR */
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("addi", ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), "1"));

                
          :} loop2 END LOOP FIN
          {:
                /* Salto de regreso a la iteracion */                
                EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("j", null, null, et.getEtiqueta1() ));

                /* Reciclar los temporales del EtiNodo */
                CodigoIntermedio.reciclarTemporales(et.getId2());
                CodigoIntermedio.reciclarTemporales(et.getId3());

                /* Borrar el EtiNodo */
                CodigoIntermedio.quitarUltimoEtiNodo();
          :}    
          ;
         
/*While*/
while ::= WHILE parentesis LOOP loop2 END LOOP FIN
          {:              
                /* Crear la primera etiqueta del ciclo */
                EtiNodo et = new EtiNodo(null, null, null, CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva());
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("etiq", et.getEtiqueta1()));

                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("goto", et.getEtiqueta3()));

                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("etiq", et.getEtiqueta2()));
          :}
          ;
          

/*Loop*/
loop ::= LOOP 
        {:
            /* Set Valores Iniciales */
            EtiNodo et = new EtiNodo(null, null, null, CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva());
            CodigoIntermedio.agregarEtiNodo(et);

            

        :} loop2 END LOOP FIN
        {:
            /* Saltar de vuelta al principio del LOOP */
            EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
            CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("j", null, null, et.getEtiqueta1()));
            
        :}
        ;

loop2 ::= expresiones loop2
          | expresiones
          | ciclos loop2
          | ciclos
          | exit loop2
          | exit
          ;

exit ::= EXIT WHEN parentesis FIN
         {:
             /* Insertar etiqueta de salida */
             EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
             CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("j", null, null, et.getEtiqueta3()));
         :}
         ;
