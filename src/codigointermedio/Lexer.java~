/* The following code was generated by JFlex 1.4.3 on 11-16-12 10:43 PM */

package codigointermedio;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11-16-12 10:43 PM from the specification file
 * <tt>src/codigointermedio/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int comentario = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\11\2\0\1\10\22\0\1\10\1\0\1\42\5\0"+
    "\1\46\1\47\1\45\1\43\1\6\1\44\1\7\1\37\12\2\1\5"+
    "\1\4\1\34\1\36\1\35\2\0\1\30\1\26\1\15\1\17\1\16"+
    "\1\23\1\31\1\33\1\25\2\1\1\27\1\1\1\24\1\14\1\12"+
    "\1\1\1\13\1\32\1\21\1\20\1\1\1\40\1\41\1\22\1\1"+
    "\4\0\1\3\1\0\1\30\1\26\1\15\1\17\1\16\1\23\1\31"+
    "\1\33\1\25\2\1\1\27\1\1\1\24\1\14\1\12\1\1\1\13"+
    "\1\32\1\21\1\20\1\1\1\40\1\41\1\22\1\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\14\2\1\11\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\0"+
    "\3\2\1\25\1\2\1\26\14\2\1\27\1\30\1\31"+
    "\6\2\1\32\1\33\1\34\1\2\1\35\1\36\1\2"+
    "\1\37\1\2\1\40\1\41\5\2\1\42\3\2\1\43"+
    "\1\2\1\0\5\2\1\44\1\45\4\2\1\46\1\47"+
    "\1\50\1\51\1\52\4\2\1\0\3\2\1\53\1\2"+
    "\1\54\4\2\1\55\1\56\1\2\1\0\2\2\1\57"+
    "\1\60\1\61\1\2\1\62\2\2\1\63\5\2\1\64"+
    "\1\65\1\2\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\120\0\120\0\120"+
    "\0\120\0\310\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8"+
    "\0\u01e0\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8"+
    "\0\120\0\u0320\0\u0348\0\120\0\120\0\u0370\0\120\0\120"+
    "\0\120\0\120\0\120\0\u0398\0\u03c0\0\u03e8\0\u0410\0\170"+
    "\0\u0438\0\170\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528"+
    "\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\170\0\u0640"+
    "\0\170\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\120"+
    "\0\120\0\120\0\u0758\0\120\0\u0398\0\u0780\0\170\0\u07a8"+
    "\0\170\0\170\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\170"+
    "\0\u0898\0\u08c0\0\u08e8\0\170\0\u0910\0\u0938\0\u0960\0\u0988"+
    "\0\u09b0\0\u09d8\0\u0a00\0\170\0\170\0\u0a28\0\u0a50\0\u0a78"+
    "\0\u0aa0\0\170\0\170\0\170\0\170\0\170\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\170\0\u0c08"+
    "\0\170\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\170\0\170\0\u0cd0"+
    "\0\u0cf8\0\u0d20\0\u0d48\0\170\0\170\0\170\0\u0d70\0\170"+
    "\0\u0d98\0\u0dc0\0\120\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88"+
    "\0\170\0\170\0\u0eb0\0\170\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\4\1\16\2\4\1\17"+
    "\1\4\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\4\1\27\1\30\1\31\1\32\1\33\1\4\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\11\42\1\43\36\42"+
    "\51\0\3\4\6\0\22\4\4\0\2\4\10\0\1\5"+
    "\4\0\1\44\50\0\2\12\37\0\3\4\6\0\1\4"+
    "\1\45\4\4\1\46\13\4\4\0\2\4\7\0\3\4"+
    "\6\0\4\4\1\47\15\4\4\0\2\4\7\0\3\4"+
    "\6\0\1\4\1\50\4\4\1\51\2\4\1\52\10\4"+
    "\4\0\2\4\7\0\3\4\6\0\12\4\1\53\2\4"+
    "\1\54\4\4\4\0\1\4\1\55\7\0\3\4\6\0"+
    "\1\4\1\56\6\4\1\57\10\4\1\60\4\0\2\4"+
    "\7\0\3\4\6\0\2\4\1\61\3\4\1\62\6\4"+
    "\1\63\1\64\3\4\4\0\2\4\7\0\3\4\6\0"+
    "\2\4\1\65\1\4\1\66\15\4\4\0\2\4\7\0"+
    "\3\4\6\0\11\4\1\67\1\70\5\4\1\71\1\4"+
    "\4\0\2\4\7\0\3\4\6\0\2\4\1\72\1\4"+
    "\1\73\15\4\4\0\2\4\7\0\3\4\6\0\2\4"+
    "\1\74\17\4\4\0\2\4\7\0\3\4\6\0\1\4"+
    "\1\75\10\4\1\76\7\4\4\0\2\4\7\0\3\4"+
    "\6\0\4\4\1\77\15\4\4\0\2\4\44\0\1\100"+
    "\47\0\1\101\47\0\1\102\12\0\3\4\6\0\21\4"+
    "\1\103\4\0\2\4\52\0\1\104\5\0\1\105\46\0"+
    "\3\4\6\0\2\4\1\106\17\4\4\0\2\4\7\0"+
    "\3\4\6\0\7\4\1\107\12\4\4\0\2\4\7\0"+
    "\3\4\6\0\7\4\1\110\12\4\4\0\2\4\7\0"+
    "\3\4\6\0\7\4\1\111\12\4\4\0\2\4\7\0"+
    "\3\4\6\0\5\4\1\112\14\4\4\0\2\4\7\0"+
    "\3\4\6\0\20\4\1\113\1\4\4\0\2\4\7\0"+
    "\3\4\6\0\13\4\1\114\6\4\4\0\2\4\7\0"+
    "\3\4\6\0\6\4\1\115\13\4\4\0\2\4\7\0"+
    "\3\4\6\0\1\116\21\4\4\0\2\4\7\0\3\4"+
    "\6\0\4\4\1\117\15\4\4\0\2\4\7\0\3\4"+
    "\6\0\1\4\1\120\20\4\4\0\2\4\7\0\3\4"+
    "\6\0\12\4\1\121\7\4\4\0\2\4\7\0\3\4"+
    "\6\0\2\4\1\122\17\4\4\0\2\4\7\0\3\4"+
    "\6\0\15\4\1\123\4\4\4\0\2\4\7\0\3\4"+
    "\6\0\7\4\1\124\12\4\4\0\2\4\7\0\3\4"+
    "\6\0\22\4\4\0\1\125\1\4\7\0\3\4\4\0"+
    "\2\126\7\4\1\127\12\4\4\0\2\4\7\0\3\4"+
    "\6\0\2\4\1\130\17\4\4\0\2\4\7\0\3\4"+
    "\6\0\17\4\1\131\2\4\4\0\2\4\7\0\3\4"+
    "\6\0\2\4\1\132\17\4\4\0\2\4\7\0\3\4"+
    "\6\0\1\4\1\133\20\4\4\0\2\4\7\0\3\4"+
    "\6\0\5\4\1\134\14\4\4\0\2\4\7\0\3\4"+
    "\6\0\7\4\1\135\12\4\4\0\2\4\7\0\3\4"+
    "\6\0\4\4\1\136\6\4\1\137\6\4\4\0\2\4"+
    "\7\0\3\4\6\0\3\4\1\140\16\4\4\0\2\4"+
    "\7\0\3\4\6\0\6\4\1\141\13\4\4\0\2\4"+
    "\7\0\3\4\6\0\4\4\1\142\15\4\4\0\2\4"+
    "\7\0\3\4\6\0\7\4\1\143\12\4\4\0\2\4"+
    "\7\0\3\4\6\0\4\4\1\144\15\4\4\0\2\4"+
    "\7\0\3\4\6\0\4\4\1\145\15\4\4\0\2\4"+
    "\7\0\3\4\6\0\12\4\1\146\7\4\4\0\2\4"+
    "\7\0\3\4\6\0\3\4\1\147\16\4\4\0\2\4"+
    "\7\0\3\4\6\0\16\4\1\150\3\4\4\0\2\4"+
    "\7\0\3\4\6\0\20\4\1\151\1\4\4\0\2\4"+
    "\7\0\3\4\6\0\15\4\1\152\4\4\4\0\2\4"+
    "\16\0\2\126\2\0\1\153\34\0\3\4\6\0\4\4"+
    "\1\154\15\4\4\0\2\4\7\0\3\4\6\0\15\4"+
    "\1\155\4\4\4\0\2\4\7\0\3\4\6\0\13\4"+
    "\1\156\6\4\4\0\2\4\7\0\3\4\6\0\1\157"+
    "\21\4\4\0\2\4\7\0\3\4\6\0\16\4\1\160"+
    "\3\4\4\0\2\4\7\0\3\4\6\0\12\4\1\161"+
    "\7\4\4\0\2\4\7\0\3\4\6\0\15\4\1\162"+
    "\4\4\4\0\2\4\7\0\3\4\6\0\4\4\1\163"+
    "\15\4\4\0\2\4\7\0\3\4\6\0\1\4\1\164"+
    "\20\4\4\0\2\4\7\0\3\4\6\0\7\4\1\165"+
    "\12\4\4\0\2\4\7\0\3\4\6\0\7\4\1\166"+
    "\12\4\4\0\2\4\7\0\3\4\6\0\4\4\1\167"+
    "\15\4\4\0\2\4\7\0\3\4\6\0\13\4\1\170"+
    "\6\4\4\0\2\4\26\0\1\171\30\0\3\4\6\0"+
    "\17\4\1\172\2\4\4\0\2\4\7\0\3\4\6\0"+
    "\4\4\1\173\15\4\4\0\2\4\7\0\3\4\6\0"+
    "\12\4\1\174\7\4\4\0\2\4\7\0\3\4\6\0"+
    "\10\4\1\175\11\4\4\0\2\4\7\0\3\4\6\0"+
    "\4\4\1\176\15\4\4\0\2\4\7\0\3\4\6\0"+
    "\5\4\1\177\14\4\4\0\2\4\7\0\3\4\6\0"+
    "\12\4\1\200\7\4\4\0\2\4\7\0\3\4\6\0"+
    "\13\4\1\201\6\4\4\0\2\4\7\0\3\4\6\0"+
    "\12\4\1\202\7\4\4\0\2\4\27\0\1\203\27\0"+
    "\3\4\6\0\4\4\1\204\15\4\4\0\2\4\7\0"+
    "\3\4\6\0\16\4\1\205\3\4\4\0\2\4\7\0"+
    "\3\4\6\0\6\4\1\206\13\4\4\0\2\4\7\0"+
    "\3\4\6\0\2\4\1\207\17\4\4\0\2\4\7\0"+
    "\3\4\6\0\4\4\1\210\15\4\4\0\2\4\7\0"+
    "\3\4\6\0\1\4\1\211\20\4\4\0\2\4\7\0"+
    "\3\4\6\0\12\4\1\212\7\4\4\0\2\4\7\0"+
    "\3\4\6\0\1\4\1\213\20\4\4\0\2\4\7\0"+
    "\3\4\6\0\12\4\1\214\7\4\4\0\2\4\7\0"+
    "\2\4\1\215\6\0\22\4\4\0\2\4\7\0\3\4"+
    "\6\0\4\4\1\216\15\4\4\0\2\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\4\11\17\1\1\11\2\1\2\11"+
    "\1\1\5\11\1\0\33\1\3\11\1\1\1\11\21\1"+
    "\1\0\24\1\1\0\15\1\1\0\11\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//ArrayList error_lexico = new ArrayList();
  StringBuffer string = new StringBuffer();

    public int linea()
    { 
        return yyline+1; 
    }

    public int columna()
    { 
        return yycolumn+1;
    }

    private Symbol symbol(int type)
    {
        return new Symbol(type, yyline, yycolumn);
    }


    private Symbol symbol(int type, Object value) 
    {
        return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { System.out.print("false ");
                            return symbol(sym.FALSE,
                            new Tokens(sym.FALSE, yytext(),yyline+1, yycolumn+1));
          }
        case 57: break;
        case 4: 
          { System.out.print(";\n");
                            return symbol(sym.FIN,
                            new Tokens(sym.FIN, yytext(),yyline+1, yycolumn+1));
          }
        case 58: break;
        case 26: 
          { System.out.print("<= ");
                            return symbol(sym.MENORIGUAL,
                            new Tokens(sym.MENORIGUAL, yytext(),yyline+1, yycolumn+1));
          }
        case 59: break;
        case 48: 
          { System.out.print("array ");
                            return symbol(sym.ARRAY,
                            new Tokens(sym.ARRAY, yytext(),yyline+1, yycolumn+1));
          }
        case 60: break;
        case 21: 
          { System.out.print("or ");
                            return symbol(sym.OR,
                            new Tokens(sym.OR, yytext(),yyline+1, yycolumn+1));
          }
        case 61: break;
        case 34: 
          { System.out.print("for ");
                            return symbol(sym.FOR,
                            new Tokens(sym.FOR, yytext(),yyline+1, yycolumn+1));
          }
        case 62: break;
        case 51: 
          { System.out.print("in out ");
                            return symbol(sym.INOUT,
                            new Tokens(sym.INOUT, yytext(),yyline+1, yycolumn+1));
          }
        case 63: break;
        case 56: 
          { System.out.print("procedure ");
                            return symbol(sym.PROCEDURE,
                            new Tokens(sym.PROCEDURE, yytext(),yyline+1, yycolumn+1));
          }
        case 64: break;
        case 37: 
          { System.out.print("Get ");
                            return symbol(sym.GET,
                            new Tokens(sym.GET, yytext(),yyline+1, yycolumn+1));
          }
        case 65: break;
        case 23: 
          { System.out.print("if ");
                            return symbol(sym.IF,
                            new Tokens(sym.IF, yytext(),yyline+1, yycolumn+1));
          }
        case 66: break;
        case 42: 
          { System.out.print("then ");
                            return symbol(sym.THEN,
                            new Tokens(sym.THEN, yytext(),yyline+1, yycolumn+1));
          }
        case 67: break;
        case 3: 
          { System.out.print("NUMERO ");
                            return symbol(sym.NUMERO,
                            new Tokens(sym.NUMERO, yytext(),yyline+1, yycolumn+1));
          }
        case 68: break;
        case 28: 
          { System.out.print("/= ");
                            return symbol(sym.DISTINTO,
                            new Tokens(sym.DISTINTO, yytext(),yyline+1, yycolumn+1));
          }
        case 69: break;
        case 24: 
          { System.out.print("in ");
                            return symbol(sym.IN,
                            new Tokens(sym.IN, yytext(),yyline+1, yycolumn+1));
          }
        case 70: break;
        case 17: 
          { System.out.print("( ");
                            return new Symbol(sym.PAR1,
                            new Tokens(sym.PAR1, yytext(),yyline+1, yycolumn+1));
          }
        case 71: break;
        case 15: 
          { System.out.print("- ");
                            return symbol(sym.MENOS,
                            new Tokens(sym.MENOS, yytext(),yyline+1, yycolumn+1));
          }
        case 72: break;
        case 20: 
          { yybegin(YYINITIAL);
          }
        case 73: break;
        case 44: 
          { System.out.print("when ");
                            return symbol(sym.WHEN,
                            new Tokens(sym.WHEN, yytext(),yyline+1, yycolumn+1));
          }
        case 74: break;
        case 39: 
          { System.out.print("exit ");
                            return symbol(sym.EXIT,
                            new Tokens(sym.EXIT, yytext(),yyline+1, yycolumn+1));
          }
        case 75: break;
        case 16: 
          { System.out.print("* ");
                            return symbol(sym.POR,
                            new Tokens(sym.POR, yytext(),yyline+1, yycolumn+1));
          }
        case 76: break;
        case 18: 
          { System.out.print(") ");
                            return symbol(sym.PAR2,
                            new Tokens(sym.PAR2, yytext(),yyline+1, yycolumn+1));
          }
        case 77: break;
        case 7: 
          { System.out.print(". ");
                            return symbol(sym.PUNTO,
                            new Tokens(sym.PUNTO, yytext(),yyline+1, yycolumn+1));
          }
        case 78: break;
        case 52: 
          { System.out.print("Integer ");
                            return symbol(sym.ENTERO,
                            new Tokens(sym.ENTERO, yytext(),yyline+1, yycolumn+1));
          }
        case 79: break;
        case 10: 
          { System.out.print("> ");
                            return symbol(sym.MAYOR,
                            new Tokens(sym.MAYOR, yytext(),yyline+1, yycolumn+1));
          }
        case 80: break;
        case 22: 
          { System.out.print("of ");
                            return symbol(sym.OF,
                            new Tokens(sym.OF, yytext(),yyline+1, yycolumn+1));
          }
        case 81: break;
        case 31: 
          { System.out.print("Put ");
                            return symbol(sym.PUT,
                            new Tokens(sym.PUT, yytext(),yyline+1, yycolumn+1));
          }
        case 82: break;
        case 32: 
          { System.out.print("out ");
                            return symbol(sym.OUT,
                            new Tokens(sym.OUT, yytext(),yyline+1, yycolumn+1));
          }
        case 83: break;
        case 30: 
          { System.out.print("REAL ");
                            return symbol(sym.REAL,
                            new Tokens(sym.REAL, yytext(),yyline+1, yycolumn+1));
          }
        case 84: break;
        case 2: 
          { System.out.print("ID ");
                            return symbol(sym.ID,
                            new Tokens(sym.ID, yytext(),yyline+1, yycolumn+1));
          }
        case 85: break;
        case 1: 
          { //System.out.print("ERROR Lexico -> Linea: "+(yyline+1)+", Columna: "+(yycolumn+1)+"\n");
            //interfaz.resultado="ERROR Lexico, no se reconoce el Token de la Linea: "+(yyline+1)+", Columna: "+(yycolumn+1)+"\n";
               // error_lexico.add("ERROR Lexico, no se reconoce el Token de la Linea: "+(yyline+1)+", Columna: "+(yycolumn+1)+"\n");                    }
          }
        case 86: break;
        case 49: 
          { System.out.print("while ");
                            return symbol(sym.WHILE,
                            new Tokens(sym.WHILE, yytext(),yyline+1, yycolumn+1));
          }
        case 87: break;
        case 27: 
          { System.out.print(">= ");
                            return symbol(sym.MAYORIGUAL,
                            new Tokens(sym.MAYORIGUAL, yytext(),yyline+1, yycolumn+1));
          }
        case 88: break;
        case 41: 
          { System.out.print("Type ");
                            return symbol(sym.TYPE,
                            new Tokens(sym.TYPE, yytext(),yyline+1, yycolumn+1));
          }
        case 89: break;
        case 50: 
          { System.out.print("return ");
                            return symbol(sym.RETURN,
                            new Tokens(sym.RETURN, yytext(),yyline+1, yycolumn+1));
          }
        case 90: break;
        case 11: 
          { System.out.print("= ");
                            return symbol(sym.IGUAL,
                            new Tokens(sym.IGUAL, yytext(),yyline+1, yycolumn+1));
          }
        case 91: break;
        case 45: 
          { System.out.print("Float ");
                            return symbol(sym.FLOAT,
                            new Tokens(sym.FLOAT, yytext(),yyline+1, yycolumn+1));
          }
        case 92: break;
        case 40: 
          { System.out.print("true ");
                            return symbol(sym.TRUE,
                            new Tokens(sym.TRUE, yytext(),yyline+1, yycolumn+1));
          }
        case 93: break;
        case 12: 
          { System.out.print("/ ");
                            return symbol(sym.ENTRE,
                            new Tokens(sym.ENTRE, yytext(),yyline+1, yycolumn+1));
          }
        case 94: break;
        case 36: 
          { System.out.print("and ");
                            return symbol(sym.AND,
                            new Tokens(sym.AND, yytext(),yyline+1, yycolumn+1));
          }
        case 95: break;
        case 9: 
          { System.out.print("< ");
                            return symbol(sym.MENOR,
                            new Tokens(sym.MENOR, yytext(),yyline+1, yycolumn+1));
          }
        case 96: break;
        case 38: 
          { System.out.print("else ");
                            return symbol(sym.ELSE,
                            new Tokens(sym.ELSE, yytext(),yyline+1, yycolumn+1));
          }
        case 97: break;
        case 33: 
          { System.out.print("end ");
                            return symbol(sym.END,
                            new Tokens(sym.END, yytext(),yyline+1, yycolumn+1));
          }
        case 98: break;
        case 35: 
          { System.out.print("not ");
                            return symbol(sym.NOT,
                            new Tokens(sym.NOT, yytext(),yyline+1, yycolumn+1));
          }
        case 99: break;
        case 47: 
          { System.out.print("begin \n");
                            return symbol(sym.BEGIN,
                            new Tokens(sym.BEGIN, yytext(),yyline+1, yycolumn+1));
          }
        case 100: break;
        case 5: 
          { System.out.print(": ");
                            return symbol(sym.DOSPUNTOS,
                            new Tokens(sym.DOSPUNTOS, yytext(),yyline+1, yycolumn+1));
          }
        case 101: break;
        case 43: 
          { System.out.print("loop ");
                            return symbol(sym.LOOP,
                            new Tokens(sym.LOOP, yytext(),yyline+1, yycolumn+1));
          }
        case 102: break;
        case 8: 
          { /*Ignorarlo*/
          }
        case 103: break;
        case 13: 
          { System.out.print("\" ");
                            return symbol(sym.COMILLA,
                            new Tokens(sym.COMILLA, yytext(),yyline+1, yycolumn+1));
          }
        case 104: break;
        case 14: 
          { System.out.print("+ ");
                            return symbol(sym.MAS,
                            new Tokens(sym.MAS, yytext(),yyline+1, yycolumn+1));
          }
        case 105: break;
        case 29: 
          { yybegin(comentario);
          }
        case 106: break;
        case 25: 
          { System.out.print("is \n");
                            return symbol(sym.IS,
                            new Tokens(sym.IS, yytext(),yyline+1, yycolumn+1));
          }
        case 107: break;
        case 55: 
          { System.out.print("newline_ ");
                            return symbol(sym.NEWLINE,
                            new Tokens(sym.NEWLINE, yytext(),yyline+1, yycolumn+1));
          }
        case 108: break;
        case 6: 
          { System.out.print(", ");
                            return symbol(sym.COMA,
                            new Tokens(sym.COMA, yytext(),yyline+1, yycolumn+1));
          }
        case 109: break;
        case 54: 
          { System.out.print("function ");
                            return symbol(sym.FUNCTION,
                            new Tokens(sym.FUNCTION, yytext(),yyline+1, yycolumn+1));
          }
        case 110: break;
        case 53: 
          { System.out.print("boolean \n");
                            return symbol(sym.BOOLEAN,
                            new Tokens(sym.BOOLEAN, yytext(),yyline+1, yycolumn+1));
          }
        case 111: break;
        case 19: 
          { 
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          scanner = new Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
