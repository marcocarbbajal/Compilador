
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 17 16:36:32 CST 2012
//----------------------------------------------------

package codigointermedio;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 17 16:36:32 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\264\000\002\002\004\000\002\016\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\117\003\000\002\042\003\000\002\042" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\037\005\000\002\055\006\000\002" +
    "\056\005\000\002\056\003\000\002\024\005\000\002\067" +
    "\005\000\002\066\005\000\002\066\004\000\002\026\011" +
    "\000\002\026\006\000\002\101\004\000\002\101\002\000" +
    "\002\113\005\000\002\114\003\000\002\115\006\000\002" +
    "\115\003\000\002\034\003\000\002\116\005\000\002\116" +
    "\005\000\002\116\005\000\002\105\004\000\002\105\004" +
    "\000\002\105\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\106\004\000\002\106" +
    "\004\000\002\106\004\000\002\106\004\000\002\106\004" +
    "\000\002\106\003\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\106\003\000\002" +
    "\104\004\000\002\104\005\000\002\007\006\000\002\102" +
    "\005\000\002\102\004\000\002\025\007\000\002\025\004" +
    "\000\002\010\004\000\002\021\005\000\002\021\004\000" +
    "\002\020\007\000\002\020\004\000\002\064\004\000\002" +
    "\064\002\000\002\027\005\000\002\051\003\000\002\053" +
    "\006\000\002\053\003\000\002\022\003\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\065\003\000" +
    "\002\065\002\000\002\002\010\000\002\002\006\000\002" +
    "\002\017\000\002\002\024\000\002\003\003\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\004\006" +
    "\000\002\004\003\000\002\011\010\000\002\006\003\000" +
    "\002\006\003\000\002\100\003\000\002\100\002\000\002" +
    "\017\006\000\002\017\006\000\002\012\006\000\002\013" +
    "\003\000\002\013\005\000\002\014\006\000\002\015\003" +
    "\000\002\031\004\000\002\031\004\000\002\031\003\000" +
    "\002\031\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\044\007\000\002\045\004\000\002\045" +
    "\002\000\002\043\007\000\002\043\007\000\002\043\011" +
    "\000\002\043\006\000\002\043\010\000\002\043\010\000" +
    "\002\043\012\000\002\057\004\000\002\057\003\000\002" +
    "\050\004\000\002\033\006\000\002\033\006\000\002\041" +
    "\003\000\002\041\003\000\002\040\005\000\002\040\003" +
    "\000\002\046\005\000\002\046\003\000\002\061\005\000" +
    "\002\061\003\000\002\062\005\000\002\062\003\000\002" +
    "\063\003\000\002\060\004\000\002\047\003\000\002\103" +
    "\003\000\002\103\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\077\006\000" +
    "\002\077\003\000\002\070\005\000\002\070\006\000\002" +
    "\120\002\000\002\070\005\000\002\070\003\000\002\074" +
    "\004\000\002\074\004\000\002\074\002\000\002\072\006" +
    "\000\002\072\007\000\002\073\005\000\002\073\005\000" +
    "\002\107\007\000\002\110\005\000\002\110\005\000\002" +
    "\121\002\000\002\032\017\000\002\075\011\000\002\122" +
    "\002\000\002\076\010\000\002\111\004\000\002\111\003" +
    "\000\002\111\004\000\002\111\003\000\002\111\004\000" +
    "\002\111\003\000\002\112\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\004\015\004\001\002\000\004\004\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\006\017\012\041\013\001" +
    "\002\000\004\002\uffe6\001\002\000\014\004\025\015\020" +
    "\016\026\020\030\040\023\001\002\000\004\004\014\001" +
    "\002\000\006\045\u0166\046\u016a\001\002\000\004\042\016" +
    "\001\002\000\004\017\017\001\002\000\014\004\025\015" +
    "\020\016\026\020\030\040\023\001\002\000\004\004\u0155" +
    "\001\002\000\004\020\u0153\001\002\000\004\002\uffbc\001" +
    "\002\000\004\004\u013c\001\002\000\004\020\uff9e\001\002" +
    "\000\006\045\u0117\046\u011b\001\002\000\004\004\303\001" +
    "\002\000\004\020\uff9d\001\002\000\020\004\041\023\052" +
    "\025\036\030\043\031\055\051\040\066\034\001\002\000" +
    "\004\044\302\001\002\000\024\004\041\021\uff91\023\052" +
    "\025\036\030\043\031\055\051\040\052\uff91\066\034\001" +
    "\002\000\004\021\276\001\002\000\016\004\152\011\074" +
    "\012\100\036\072\037\076\041\151\001\002\000\030\004" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\025\uff8d\030\uff8d\031\uff8d" +
    "\051\uff8d\052\uff8d\064\uff8d\066\uff8d\001\002\000\022\004" +
    "\uff56\023\uff56\025\uff56\030\uff56\031\uff56\051\uff56\064\uff56" +
    "\066\uff56\001\002\000\004\002\uffbd\001\002\000\016\004" +
    "\152\011\074\012\100\036\072\037\076\041\151\001\002" +
    "\000\010\041\245\044\uff6f\046\244\001\002\000\030\004" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\025\uff8f\030\uff8f\031\uff8f" +
    "\051\uff8f\052\uff8f\064\uff8f\066\uff8f\001\002\000\004\041" +
    "\213\001\002\000\006\044\uff70\046\206\001\002\000\026" +
    "\004\uff6d\021\uff6d\023\uff6d\025\uff6d\030\uff6d\031\uff6d\051" +
    "\uff6d\052\uff6d\064\uff6d\066\uff6d\001\002\000\026\004\uff6c" +
    "\021\uff6c\023\uff6c\025\uff6c\030\uff6c\031\uff6c\051\uff6c\052" +
    "\uff6c\064\uff6c\066\uff6c\001\002\000\024\004\041\021\uff90" +
    "\023\052\025\036\030\043\031\055\051\040\052\uff90\066" +
    "\034\001\002\000\004\044\uff71\001\002\000\026\004\uff6e" +
    "\021\uff6e\023\uff6e\025\uff6e\030\uff6e\031\uff6e\051\uff6e\052" +
    "\uff6e\064\uff6e\066\uff6e\001\002\000\004\004\125\001\002" +
    "\000\026\004\uff6b\021\uff6b\023\uff6b\025\uff6b\030\uff6b\031" +
    "\uff6b\051\uff6b\052\uff6b\064\uff6b\066\uff6b\001\002\000\030" +
    "\004\uff8e\021\uff8e\022\uff8e\023\uff8e\025\uff8e\030\uff8e\031" +
    "\uff8e\051\uff8e\052\uff8e\064\uff8e\066\uff8e\001\002\000\004" +
    "\041\056\001\002\000\004\004\057\001\002\000\006\041" +
    "\064\042\063\001\002\000\004\042\061\001\002\000\004" +
    "\044\062\001\002\000\030\004\uff88\021\uff88\022\uff88\023" +
    "\uff88\025\uff88\030\uff88\031\uff88\051\uff88\052\uff88\064\uff88" +
    "\066\uff88\001\002\000\004\044\124\001\002\000\016\004" +
    "\077\011\074\012\100\036\072\037\076\042\075\001\002" +
    "\000\054\004\uff78\011\uff78\012\uff78\014\uff78\025\uff78\032" +
    "\uff78\033\uff78\034\113\036\uff78\037\uff78\042\uff78\044\uff78" +
    "\045\uff78\047\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057" +
    "\uff78\060\uff78\063\uff78\001\002\000\052\004\uff7a\011\uff7a" +
    "\012\uff7a\014\uff7a\025\uff7a\032\uff7a\033\111\036\uff7a\037" +
    "\uff7a\042\uff7a\044\uff7a\045\uff7a\047\uff7a\053\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\063\uff7a\001\002\000" +
    "\006\042\uffe7\045\122\001\002\000\056\004\uff73\011\uff73" +
    "\012\uff73\014\uff73\025\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\036\uff73\037\uff73\042\uff73\044\uff73\045\uff73\047\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\063" +
    "\uff73\001\002\000\056\004\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\025\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\042\ufff9\044\ufff9\045\ufff9\047\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\001\002\000" +
    "\034\004\ufff3\011\ufff3\012\ufff3\025\ufff3\036\ufff3\037\ufff3" +
    "\042\ufff3\044\ufff3\045\ufff3\047\ufff3\053\ufff3\061\ufff3\062" +
    "\ufff3\001\002\000\004\042\121\001\002\000\056\004\ufffb" +
    "\011\ufffb\012\ufffb\014\ufffb\025\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\044\ufffb\045\ufffb" +
    "\047\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\063\ufffb\001\002\000\004\042\117\001\002\000\034" +
    "\004\ufff2\011\ufff2\012\ufff2\025\ufff2\036\ufff2\037\ufff2\042" +
    "\ufff2\044\ufff2\045\ufff2\047\ufff2\053\ufff2\061\ufff2\062\ufff2" +
    "\001\002\000\060\004\ufffc\011\ufffc\012\ufffc\014\ufffc\025" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\041\115\042\ufffc\044\ufffc\045\ufffc\047\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\063\ufffc\001\002" +
    "\000\056\004\ufffa\011\ufffa\012\ufffa\014\ufffa\025\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\042\ufffa" +
    "\044\ufffa\045\ufffa\047\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\063\ufffa\001\002\000\026\004\uff7d" +
    "\011\uff7d\012\uff7d\032\107\036\uff7d\037\uff7d\042\uff7d\044" +
    "\uff7d\045\uff7d\047\uff7d\001\002\000\056\004\uff74\011\uff74" +
    "\012\uff74\014\uff74\025\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\042\uff74\044\uff74\045\uff74\047\uff74" +
    "\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\063" +
    "\uff74\001\002\000\024\004\uff7c\011\uff7c\012\uff7c\036\uff7c" +
    "\037\uff7c\042\uff7c\044\uff7c\045\uff7c\047\uff7c\001\002\000" +
    "\056\004\uff76\011\uff76\012\uff76\014\uff76\025\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\105\036\uff76\037\uff76\042\uff76\044" +
    "\uff76\045\uff76\047\uff76\053\uff76\054\uff76\055\uff76\056\uff76" +
    "\057\uff76\060\uff76\063\uff76\001\002\000\010\004\077\011" +
    "\074\012\100\001\002\000\056\004\uff75\011\uff75\012\uff75" +
    "\014\uff75\025\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036" +
    "\uff75\037\uff75\042\uff75\044\uff75\045\uff75\047\uff75\053\uff75" +
    "\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\063\uff75\001" +
    "\002\000\010\004\077\011\074\012\100\001\002\000\052" +
    "\004\uff7b\011\uff7b\012\uff7b\014\uff7b\025\uff7b\032\uff7b\033" +
    "\111\036\uff7b\037\uff7b\042\uff7b\044\uff7b\045\uff7b\047\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\063" +
    "\uff7b\001\002\000\010\004\077\011\074\012\100\001\002" +
    "\000\054\004\uff79\011\uff79\012\uff79\014\uff79\025\uff79\032" +
    "\uff79\033\uff79\034\113\036\uff79\037\uff79\042\uff79\044\uff79" +
    "\045\uff79\047\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057" +
    "\uff79\060\uff79\063\uff79\001\002\000\010\004\077\011\074" +
    "\012\100\001\002\000\056\004\uff77\011\uff77\012\uff77\014" +
    "\uff77\025\uff77\032\uff77\033\uff77\034\uff77\035\105\036\uff77" +
    "\037\uff77\042\uff77\044\uff77\045\uff77\047\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\063\uff77\001\002" +
    "\000\016\004\077\011\074\012\100\036\072\037\076\042" +
    "\116\001\002\000\056\004\ufff8\011\ufff8\012\ufff8\014\ufff8" +
    "\025\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\042\ufff8\044\ufff8\045\ufff8\047\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\063\ufff8\001\002\000" +
    "\004\044\120\001\002\000\030\004\uff87\021\uff87\022\uff87" +
    "\023\uff87\025\uff87\030\uff87\031\uff87\051\uff87\052\uff87\064" +
    "\uff87\066\uff87\001\002\000\060\004\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\025\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\063" +
    "\uffe9\001\002\000\014\004\077\011\074\012\100\036\072" +
    "\037\076\001\002\000\004\042\uffe8\001\002\000\030\004" +
    "\uff89\021\uff89\022\uff89\023\uff89\025\uff89\030\uff89\031\uff89" +
    "\051\uff89\052\uff89\064\uff89\066\uff89\001\002\000\004\024" +
    "\126\001\002\000\004\011\127\001\002\000\004\043\130" +
    "\001\002\000\004\043\131\001\002\000\004\011\132\001" +
    "\002\000\004\025\133\001\002\000\022\004\uff59\023\uff59" +
    "\025\uff59\030\uff59\031\uff59\051\uff59\064\uff59\066\uff59\001" +
    "\002\000\022\004\041\023\052\025\036\030\043\031\055" +
    "\051\040\064\135\066\034\001\002\000\004\065\150\001" +
    "\002\000\024\004\041\021\uff53\023\052\025\036\030\043" +
    "\031\055\051\040\064\135\066\034\001\002\000\004\021" +
    "\144\001\002\000\024\004\041\021\uff51\023\052\025\036" +
    "\030\043\031\055\051\040\064\135\066\034\001\002\000" +
    "\024\004\041\021\uff4f\023\052\025\036\030\043\031\055" +
    "\051\040\064\135\066\034\001\002\000\004\021\uff50\001" +
    "\002\000\004\021\uff52\001\002\000\004\025\145\001\002" +
    "\000\004\044\146\001\002\000\030\004\uff58\021\uff58\022" +
    "\uff58\023\uff58\025\uff58\030\uff58\031\uff58\051\uff58\052\uff58" +
    "\064\uff58\066\uff58\001\002\000\004\021\uff54\001\002\000" +
    "\016\004\152\011\074\012\100\036\072\037\076\041\151" +
    "\001\002\000\016\004\152\011\074\012\100\036\072\037" +
    "\076\041\151\001\002\000\042\014\177\025\uff64\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\041\115\042\uff64\044\uff64\053" +
    "\uff64\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\063\ufffc" +
    "\001\002\000\012\025\uff69\042\uff69\044\uff69\053\uff69\001" +
    "\002\000\022\014\173\032\107\054\172\055\167\056\170" +
    "\057\166\060\175\063\174\001\002\000\016\025\uff66\042" +
    "\uff66\044\uff66\053\uff66\061\uff66\062\uff66\001\002\000\004" +
    "\044\157\001\002\000\024\004\uff4e\021\uff4e\023\uff4e\025" +
    "\uff4e\030\uff4e\031\uff4e\051\uff4e\064\uff4e\066\uff4e\001\002" +
    "\000\016\025\uff61\042\uff61\044\uff61\053\uff61\061\161\062" +
    "\163\001\002\000\016\004\152\011\074\012\100\036\072" +
    "\037\076\041\151\001\002\000\012\025\uff65\042\uff65\044" +
    "\uff65\053\uff65\001\002\000\016\004\152\011\074\012\100" +
    "\036\072\037\076\041\151\001\002\000\012\025\uff62\042" +
    "\uff62\044\uff62\053\uff62\001\002\000\012\025\uff63\042\uff63" +
    "\044\uff63\053\uff63\001\002\000\010\004\uffef\011\uffef\012" +
    "\uffef\001\002\000\010\004\ufff1\011\ufff1\012\ufff1\001\002" +
    "\000\010\004\uffee\011\uffee\012\uffee\001\002\000\010\004" +
    "\077\011\074\012\100\001\002\000\010\004\ufff0\011\ufff0" +
    "\012\ufff0\001\002\000\010\004\uffed\011\uffed\012\uffed\001" +
    "\002\000\010\004\uffec\011\uffec\012\uffec\001\002\000\010" +
    "\004\uffeb\011\uffeb\012\uffeb\001\002\000\014\025\uff68\032" +
    "\107\042\uff68\044\uff68\053\uff68\001\002\000\006\036\072" +
    "\037\076\001\002\000\016\025\uff61\042\uff61\044\uff61\053" +
    "\uff61\061\161\062\163\001\002\000\012\025\uff67\042\uff67" +
    "\044\uff67\053\uff67\001\002\000\004\042\203\001\002\000" +
    "\016\025\uff61\042\uff61\044\uff61\053\uff61\061\161\062\163" +
    "\001\002\000\012\025\uff6a\042\uff6a\044\uff6a\053\uff6a\001" +
    "\002\000\006\021\uff92\052\uff92\001\002\000\004\014\207" +
    "\001\002\000\014\004\077\011\074\012\100\036\072\037" +
    "\076\001\002\000\004\044\212\001\002\000\030\004\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\025\uff7e\030\uff7e\031\uff7e\051" +
    "\uff7e\052\uff7e\064\uff7e\066\uff7e\001\002\000\030\004\uff80" +
    "\021\uff80\022\uff80\023\uff80\025\uff80\030\uff80\031\uff80\051" +
    "\uff80\052\uff80\064\uff80\066\uff80\001\002\000\006\004\214" +
    "\047\216\001\002\000\006\041\235\042\234\001\002\000" +
    "\004\042\231\001\002\000\014\004\077\011\074\012\100" +
    "\036\072\037\076\001\002\000\016\004\077\011\074\012" +
    "\100\036\072\037\076\047\uff81\001\002\000\004\047\222" +
    "\001\002\000\030\004\uff86\021\uff86\022\uff86\023\uff86\025" +
    "\uff86\030\uff86\031\uff86\051\uff86\052\uff86\064\uff86\066\uff86" +
    "\001\002\000\004\042\223\001\002\000\004\044\224\001" +
    "\002\000\032\004\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a" +
    "\030\uff8a\031\uff8a\050\226\051\uff8a\052\uff8a\064\uff8a\066" +
    "\uff8a\001\002\000\030\004\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\025\uff8c\030\uff8c\031\uff8c\051\uff8c\052\uff8c\064\uff8c\066" +
    "\uff8c\001\002\000\004\044\227\001\002\000\030\004\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\025\uff8b\030\uff8b\031\uff8b\051" +
    "\uff8b\052\uff8b\064\uff8b\066\uff8b\001\002\000\004\047\uff82" +
    "\001\002\000\004\044\232\001\002\000\032\004\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\025\uff8a\030\uff8a\031\uff8a\050\226" +
    "\051\uff8a\052\uff8a\064\uff8a\066\uff8a\001\002\000\030\004" +
    "\uff84\021\uff84\022\uff84\023\uff84\025\uff84\030\uff84\031\uff84" +
    "\051\uff84\052\uff84\064\uff84\066\uff84\001\002\000\004\044" +
    "\242\001\002\000\016\004\077\011\074\012\100\036\072" +
    "\037\076\042\236\001\002\000\004\042\237\001\002\000" +
    "\004\044\240\001\002\000\032\004\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\025\uff8a\030\uff8a\031\uff8a\050\226\051\uff8a\052" +
    "\uff8a\064\uff8a\066\uff8a\001\002\000\030\004\uff83\021\uff83" +
    "\022\uff83\023\uff83\025\uff83\030\uff83\031\uff83\051\uff83\052" +
    "\uff83\064\uff83\066\uff83\001\002\000\032\004\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\025\uff8a\030\uff8a\031\uff8a\050\226\051" +
    "\uff8a\052\uff8a\064\uff8a\066\uff8a\001\002\000\030\004\uff85" +
    "\021\uff85\022\uff85\023\uff85\025\uff85\030\uff85\031\uff85\051" +
    "\uff85\052\uff85\064\uff85\066\uff85\001\002\000\004\014\246" +
    "\001\002\000\014\004\077\011\074\012\100\036\072\037" +
    "\076\001\002\000\014\004\077\011\074\012\100\036\072" +
    "\037\076\001\002\000\030\004\uff7f\021\uff7f\022\uff7f\023" +
    "\uff7f\025\uff7f\030\uff7f\031\uff7f\051\uff7f\052\uff7f\064\uff7f" +
    "\066\uff7f\001\002\000\004\053\251\001\002\000\024\004" +
    "\041\021\254\023\052\025\036\030\043\031\055\051\040" +
    "\052\252\066\034\001\002\000\020\004\041\023\052\025" +
    "\036\030\043\031\055\051\040\066\034\001\002\000\006" +
    "\021\254\052\252\001\002\000\004\051\256\001\002\000" +
    "\026\004\uff60\021\uff60\023\uff60\025\uff60\030\uff60\031\uff60" +
    "\051\uff60\052\uff60\064\uff60\066\uff60\001\002\000\004\044" +
    "\257\001\002\000\026\004\uff5d\021\uff5d\023\uff5d\025\uff5d" +
    "\030\uff5d\031\uff5d\051\uff5d\052\uff5d\064\uff5d\066\uff5d\001" +
    "\002\000\026\004\uff5f\021\uff5f\023\uff5f\025\uff5f\030\uff5f" +
    "\031\uff5f\051\uff5f\052\uff5f\064\uff5f\066\uff5f\001\002\000" +
    "\006\021\254\052\252\001\002\000\026\004\uff5e\021\uff5e" +
    "\023\uff5e\025\uff5e\030\uff5e\031\uff5e\051\uff5e\052\uff5e\064" +
    "\uff5e\066\uff5e\001\002\000\022\004\041\023\052\025\036" +
    "\030\043\031\055\051\040\064\135\066\034\001\002\000" +
    "\004\021\265\001\002\000\004\025\266\001\002\000\004" +
    "\044\267\001\002\000\030\004\uff55\021\uff55\022\uff55\023" +
    "\uff55\025\uff55\030\uff55\031\uff55\051\uff55\052\uff55\064\uff55" +
    "\066\uff55\001\002\000\004\025\271\001\002\000\022\004" +
    "\041\023\052\025\036\030\043\031\055\051\040\064\135" +
    "\066\034\001\002\000\004\021\273\001\002\000\004\025" +
    "\274\001\002\000\004\044\275\001\002\000\030\004\uff57" +
    "\021\uff57\022\uff57\023\uff57\025\uff57\030\uff57\031\uff57\051" +
    "\uff57\052\uff57\064\uff57\066\uff57\001\002\000\004\004\277" +
    "\001\002\000\004\044\300\001\002\000\004\002\uffbf\001" +
    "\002\000\006\021\uff93\052\uff93\001\002\000\030\004\uff72" +
    "\021\uff72\022\uff72\023\uff72\025\uff72\030\uff72\031\uff72\051" +
    "\uff72\052\uff72\064\uff72\066\uff72\001\002\000\006\022\305" +
    "\041\306\001\002\000\014\004\025\015\020\016\026\020" +
    "\uff9b\040\023\001\002\000\010\006\315\007\314\010\316" +
    "\001\002\000\004\004\307\001\002\000\006\045\u0100\046" +
    "\u0103\001\002\000\004\042\311\001\002\000\004\022\312" +
    "\001\002\000\010\006\315\007\314\010\316\001\002\000" +
    "\004\017\317\001\002\000\012\017\ufffe\042\ufffe\044\ufffe" +
    "\046\ufffe\001\002\000\012\017\ufffd\042\ufffd\044\ufffd\046" +
    "\ufffd\001\002\000\012\017\uffff\042\uffff\044\uffff\046\uffff" +
    "\001\002\000\014\004\025\015\020\016\026\020\322\040" +
    "\023\001\002\000\014\004\uffe2\015\uffe2\016\uffe2\020\uffe2" +
    "\040\uffe2\001\002\000\004\020\376\001\002\000\020\004" +
    "\041\023\052\025\036\030\043\031\055\051\324\066\034" +
    "\001\002\000\022\004\041\022\uffd1\023\052\025\036\030" +
    "\043\031\055\051\324\066\034\001\002\000\016\004\152" +
    "\011\074\012\100\036\072\037\076\041\151\001\002\000" +
    "\004\022\337\001\002\000\022\004\041\022\uffce\023\052" +
    "\025\036\030\043\031\055\051\324\066\034\001\002\000" +
    "\022\004\041\022\uffd0\023\052\025\036\030\043\031\055" +
    "\051\324\066\034\001\002\000\022\004\041\022\uffcf\023" +
    "\052\025\036\030\043\031\055\051\324\066\034\001\002" +
    "\000\022\004\041\022\uffcd\023\052\025\036\030\043\031" +
    "\055\051\324\066\034\001\002\000\014\004\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\040\uffe3\001\002\000\004\022\uffd2\001" +
    "\002\000\004\022\uffd4\001\002\000\004\022\uffd5\001\002" +
    "\000\004\022\uffd3\001\002\000\016\004\077\011\074\012" +
    "\100\036\072\037\076\044\346\001\002\000\004\021\342" +
    "\001\002\000\014\004\uffe5\015\uffe5\016\uffe5\020\uffe5\040" +
    "\uffe5\001\002\000\004\004\343\001\002\000\004\044\344" +
    "\001\002\000\014\004\uffea\015\uffea\016\uffea\020\uffea\040" +
    "\uffea\001\002\000\004\044\347\001\002\000\006\021\uffc1" +
    "\052\uffc1\001\002\000\006\021\uffc0\052\uffc0\001\002\000" +
    "\004\053\351\001\002\000\022\004\041\022\337\023\052" +
    "\025\036\030\043\031\055\051\324\066\034\001\002\000" +
    "\026\004\041\021\uffc7\022\337\023\052\025\036\030\043" +
    "\031\055\051\324\052\uffc7\066\034\001\002\000\006\021" +
    "\367\052\365\001\002\000\026\004\041\021\uffc4\022\337" +
    "\023\052\025\036\030\043\031\055\051\324\052\uffc4\066" +
    "\034\001\002\000\026\004\041\021\uffc6\022\337\023\052" +
    "\025\036\030\043\031\055\051\324\052\uffc6\066\034\001" +
    "\002\000\006\021\uffc2\052\uffc2\001\002\000\026\004\041" +
    "\021\uffc5\022\337\023\052\025\036\030\043\031\055\051" +
    "\324\052\uffc5\066\034\001\002\000\026\004\041\021\uffc3" +
    "\022\337\023\052\025\036\030\043\031\055\051\324\052" +
    "\uffc3\066\034\001\002\000\006\021\uffc8\052\uffc8\001\002" +
    "\000\006\021\uffca\052\uffca\001\002\000\006\021\uffcb\052" +
    "\uffcb\001\002\000\006\021\uffc9\052\uffc9\001\002\000\022" +
    "\004\041\022\337\023\052\025\036\030\043\031\055\051" +
    "\324\066\034\001\002\000\026\004\uff5c\021\uff5c\022\uff5c" +
    "\023\uff5c\025\uff5c\030\uff5c\031\uff5c\051\uff5c\052\uff5c\066" +
    "\uff5c\001\002\000\004\051\370\001\002\000\004\044\371" +
    "\001\002\000\026\004\uff5b\021\uff5b\022\uff5b\023\uff5b\025" +
    "\uff5b\030\uff5b\031\uff5b\051\uff5b\052\uff5b\066\uff5b\001\002" +
    "\000\006\021\367\052\365\001\002\000\026\004\uff5a\021" +
    "\uff5a\022\uff5a\023\uff5a\025\uff5a\030\uff5a\031\uff5a\051\uff5a" +
    "\052\uff5a\066\uff5a\001\002\000\006\021\uffcc\052\uffcc\001" +
    "\002\000\004\022\uffd6\001\002\000\020\004\041\023\052" +
    "\025\036\030\043\031\055\051\324\066\034\001\002\000" +
    "\014\004\uffe4\015\uffe4\016\uffe4\020\uffe4\040\uffe4\001\002" +
    "\000\004\004\u010f\001\002\000\006\042\uffdd\044\uffdd\001" +
    "\002\000\010\042\uffdb\044\uffdb\046\u010c\001\002\000\004" +
    "\024\u0108\001\002\000\006\042\uffdf\044\u0105\001\002\000" +
    "\004\004\307\001\002\000\004\042\uffde\001\002\000\004" +
    "\042\uffe0\001\002\000\012\004\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\001\002\000\012\004\u010a\006\315\007\314\010\316" +
    "\001\002\000\010\042\uffd7\044\uffd7\046\uffd7\001\002\000" +
    "\010\042\uffd8\044\uffd8\046\uffd8\001\002\000\004\014\u010d" +
    "\001\002\000\004\011\u010e\001\002\000\006\042\uffdc\044" +
    "\uffdc\001\002\000\006\045\u0100\046\u0103\001\002\000\010" +
    "\042\uffd9\044\uffd9\046\uffd9\001\002\000\010\042\uffda\044" +
    "\uffda\046\uffda\001\002\000\004\017\u0113\001\002\000\014" +
    "\004\025\015\020\016\026\020\322\040\023\001\002\000" +
    "\014\004\uffe1\015\uffe1\016\uffe1\020\uffe1\040\uffe1\001\002" +
    "\000\004\020\uff9c\001\002\000\004\020\uff9a\001\002\000" +
    "\004\004\u0139\001\002\000\006\044\uffa0\046\u0136\001\002" +
    "\000\004\044\u0134\001\002\000\004\044\uffa5\001\002\000" +
    "\014\004\u011c\005\u011e\006\315\007\314\010\316\001\002" +
    "\000\006\044\uffa2\046\uffa2\001\002\000\006\044\uffa3\046" +
    "\uffa3\001\002\000\004\041\u011f\001\002\000\004\011\u0120" +
    "\001\002\000\004\043\u0121\001\002\000\004\043\u0122\001" +
    "\002\000\004\011\u0123\001\002\000\006\042\u0125\045\u0124" +
    "\001\002\000\004\011\u012b\001\002\000\004\013\u0126\001" +
    "\002\000\010\006\315\007\314\010\316\001\002\000\004" +
    "\044\u0128\001\002\000\014\004\025\015\020\016\026\020" +
    "\uffaa\040\023\001\002\000\004\020\uffab\001\002\000\004" +
    "\020\uffa7\001\002\000\004\043\u012c\001\002\000\004\043" +
    "\u012d\001\002\000\004\011\u012e\001\002\000\004\042\u012f" +
    "\001\002\000\004\013\u0130\001\002\000\010\006\315\007" +
    "\314\010\316\001\002\000\004\044\u0132\001\002\000\014" +
    "\004\025\015\020\016\026\020\uffaa\040\023\001\002\000" +
    "\004\020\uffa6\001\002\000\014\004\025\015\020\016\026" +
    "\020\uffaa\040\023\001\002\000\004\020\uffa8\001\002\000" +
    "\004\014\u0137\001\002\000\004\011\u0138\001\002\000\004" +
    "\044\uffa1\001\002\000\006\045\u0117\046\u013b\001\002\000" +
    "\006\044\uffa4\046\uffa4\001\002\000\012\004\u011c\006\315" +
    "\007\314\010\316\001\002\000\004\017\u013d\001\002\000" +
    "\004\005\u013f\001\002\000\004\044\u0151\001\002\000\004" +
    "\041\u0140\001\002\000\004\011\u0141\001\002\000\004\043" +
    "\u0146\001\002\000\004\042\u0143\001\002\000\004\013\u0144" +
    "\001\002\000\010\006\315\007\314\010\316\001\002\000" +
    "\004\044\uff9f\001\002\000\004\043\u0147\001\002\000\004" +
    "\011\u0148\001\002\000\006\042\uff97\045\u014a\001\002\000" +
    "\004\042\uff98\001\002\000\004\011\u014b\001\002\000\004" +
    "\043\u014d\001\002\000\004\042\uff96\001\002\000\004\043" +
    "\u014e\001\002\000\004\011\u014f\001\002\000\004\042\uff94" +
    "\001\002\000\004\042\uff95\001\002\000\014\004\025\015" +
    "\020\016\026\020\uffaa\040\023\001\002\000\004\020\uffa9" +
    "\001\002\000\020\004\041\023\052\025\036\030\043\031" +
    "\055\051\040\066\034\001\002\000\004\002\uffbe\001\002" +
    "\000\006\017\u0157\041\u0158\001\002\000\014\004\025\015" +
    "\020\016\026\020\uff9b\040\023\001\002\000\014\004\025" +
    "\015\020\016\026\020\u015e\040\023\001\002\000\004\004" +
    "\014\001\002\000\004\042\u015a\001\002\000\004\017\u015b" +
    "\001\002\000\014\004\025\015\020\016\026\020\u015e\040" +
    "\023\001\002\000\014\004\uffb7\015\uffb7\016\uffb7\020\uffb7" +
    "\040\uffb7\001\002\000\004\020\u0162\001\002\000\020\004" +
    "\041\023\052\025\036\030\043\031\055\051\040\066\034" +
    "\001\002\000\004\021\342\001\002\000\014\004\uffb8\015" +
    "\uffb8\016\uffb8\020\uffb8\040\uffb8\001\002\000\014\004\uffba" +
    "\015\uffba\016\uffba\020\uffba\040\uffba\001\002\000\020\004" +
    "\041\023\052\025\036\030\043\031\055\051\040\066\034" +
    "\001\002\000\014\004\uffb9\015\uffb9\016\uffb9\020\uffb9\040" +
    "\uffb9\001\002\000\014\004\uffb6\015\uffb6\016\uffb6\020\uffb6" +
    "\040\uffb6\001\002\000\004\020\uff99\001\002\000\004\004" +
    "\u0177\001\002\000\006\042\uffb4\044\u0175\001\002\000\010" +
    "\042\uffb0\044\uffb0\046\u0171\001\002\000\006\042\uffb2\044" +
    "\uffb2\001\002\000\010\024\u016c\026\u016b\027\u016e\001\002" +
    "\000\012\004\ufff6\006\ufff6\007\ufff6\010\ufff6\001\002\000" +
    "\012\004\ufff7\006\ufff7\007\ufff7\010\ufff7\001\002\000\012" +
    "\004\u016f\006\315\007\314\010\316\001\002\000\012\004" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\001\002\000\010\042\uffac" +
    "\044\uffac\046\uffac\001\002\000\010\042\uffad\044\uffad\046" +
    "\uffad\001\002\000\004\014\u0172\001\002\000\004\011\u0173" +
    "\001\002\000\006\042\uffb1\044\uffb1\001\002\000\004\042" +
    "\uffb3\001\002\000\004\004\014\001\002\000\004\042\uffb5" +
    "\001\002\000\006\045\u0166\046\u016a\001\002\000\010\042" +
    "\uffaf\044\uffaf\046\uffaf\001\002\000\010\042\uffae\044\uffae" +
    "\046\uffae\001\002\000\004\002\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\006\016\004\024\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\010\001\001\000\002\001\001\000\012\002" +
    "\023\006\020\017\026\102\u0179\001\001\000\004\027\014" +
    "\001\001\000\010\051\u0166\052\u0167\053\u0168\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\023\006\020" +
    "\017\026\102\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u0118\004\u0119\005\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\007\036\031\032\032\050" +
    "\033\041\035\046\036\031\043\053\047\030\055\043\060" +
    "\034\072\044\075\045\076\052\103\047\001\001\000\002" +
    "\001\001\000\034\031\300\032\050\033\041\035\046\036" +
    "\031\043\053\047\030\055\043\060\034\072\044\075\045" +
    "\076\052\103\047\001\001\000\002\001\001\000\026\030" +
    "\067\040\153\042\154\046\065\055\070\061\064\062\103" +
    "\063\101\070\152\077\267\001\001\000\002\001\001\000" +
    "\004\122\262\001\001\000\002\001\001\000\026\030\067" +
    "\040\153\042\154\046\065\055\070\061\064\062\103\063" +
    "\101\070\152\077\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\031\204\032\050\033\041" +
    "\035\046\036\031\043\053\047\030\055\043\060\034\072" +
    "\044\075\045\076\052\103\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\030\067\040\100" +
    "\041\066\042\102\046\065\055\070\056\072\061\064\062" +
    "\103\063\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\067\055\070\063\105\001" +
    "\001\000\002\001\001\000\016\030\067\046\107\055\070" +
    "\061\064\062\103\063\101\001\001\000\002\001\001\000" +
    "\014\030\067\055\070\061\111\062\103\063\101\001\001" +
    "\000\002\001\001\000\012\030\067\055\070\062\113\063" +
    "\101\001\001\000\002\001\001\000\026\030\067\040\100" +
    "\041\066\042\102\046\065\055\070\056\072\061\064\062" +
    "\103\063\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\030\067\040" +
    "\100\041\066\042\102\046\065\055\070\056\122\061\064" +
    "\062\103\063\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\133\001\001\000\036\032\050\033\041\035\137" +
    "\036\135\043\053\047\030\055\043\060\034\072\044\075" +
    "\045\076\052\103\047\111\136\112\140\001\001\000\002" +
    "\001\001\000\036\032\050\033\041\035\137\036\135\043" +
    "\053\047\030\055\043\060\034\072\044\075\045\076\052" +
    "\103\047\111\146\112\140\001\001\000\002\001\001\000" +
    "\036\032\050\033\041\035\137\036\135\043\053\047\030" +
    "\055\043\060\034\072\044\075\045\076\052\103\047\111" +
    "\142\112\140\001\001\000\036\032\050\033\041\035\137" +
    "\036\135\043\053\047\030\055\043\060\034\072\044\075" +
    "\045\076\052\103\047\111\141\112\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\030\067" +
    "\040\153\042\154\046\065\055\070\061\064\062\103\063" +
    "\101\070\152\077\155\001\001\000\026\030\067\040\153" +
    "\042\154\046\065\055\070\061\064\062\103\063\101\070" +
    "\152\077\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\170\001\001\000\004\120\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\161\001\001" +
    "\000\026\030\067\040\153\042\154\046\065\055\070\061" +
    "\064\062\103\063\101\070\152\077\164\001\001\000\002" +
    "\001\001\000\026\030\067\040\153\042\154\046\065\055" +
    "\070\061\064\062\103\063\101\070\152\077\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\030\067\040\175" +
    "\046\065\055\070\061\064\062\103\063\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\177\001\001\000" +
    "\004\074\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\030\067\040\100\041\207" +
    "\042\102\046\065\050\210\055\070\061\064\062\103\063" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\030\067\040\100\041\216\042\102" +
    "\044\220\046\065\055\070\057\217\061\064\062\103\063" +
    "\101\001\001\000\026\030\067\040\100\041\216\042\102" +
    "\046\065\055\070\057\227\061\064\062\103\063\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\030\067\040\100\041\066" +
    "\042\102\046\065\055\070\056\072\061\064\062\103\063" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\240\001\001\000\002\001\001\000\004\045\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\030\067" +
    "\040\100\041\066\042\102\046\065\055\070\056\072\061" +
    "\064\062\103\063\101\001\001\000\026\030\067\040\100" +
    "\041\207\042\102\046\065\050\246\055\070\061\064\062" +
    "\103\063\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\031\252\032\050\033\041\035\046\036\031\043" +
    "\053\047\030\055\043\060\034\072\044\073\254\075\045" +
    "\076\052\103\047\001\001\000\034\031\260\032\050\033" +
    "\041\035\046\036\031\043\053\047\030\055\043\060\034" +
    "\072\044\075\045\076\052\103\047\001\001\000\004\073" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\261\001\001\000\002\001\001\000\036\032\050\033\041" +
    "\035\137\036\135\043\053\047\030\055\043\060\034\072" +
    "\044\075\045\076\052\103\047\111\263\112\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\032\050\033\041" +
    "\035\137\036\135\043\053\047\030\055\043\060\034\072" +
    "\044\075\045\076\052\103\047\111\271\112\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\303\001\001\000\012\002\023\006\u0114\017\026\100\u0115" +
    "\001\001\000\004\023\u0111\001\001\000\004\113\307\001" +
    "\001\000\010\114\u0103\115\u0100\116\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\023\006\320\017\026\066\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\032\326" +
    "\033\041\036\322\043\053\047\030\055\043\060\034\067" +
    "\331\075\325\076\330\103\047\105\324\107\327\001\001" +
    "\000\032\032\326\033\041\036\322\043\053\047\030\055" +
    "\043\060\034\075\325\076\330\103\047\105\374\107\327" +
    "\001\001\000\026\030\067\040\153\042\154\046\065\055" +
    "\070\061\064\062\103\063\101\070\152\077\347\001\001" +
    "\000\004\104\337\001\001\000\032\032\326\033\041\036" +
    "\322\043\053\047\030\055\043\060\034\075\325\076\330" +
    "\103\047\105\335\107\327\001\001\000\032\032\326\033" +
    "\041\036\322\043\053\047\030\055\043\060\034\075\325" +
    "\076\330\103\047\105\334\107\327\001\001\000\032\032" +
    "\326\033\041\036\322\043\053\047\030\055\043\060\034" +
    "\075\325\076\330\103\047\105\333\107\327\001\001\000" +
    "\032\032\326\033\041\036\322\043\053\047\030\055\043" +
    "\060\034\075\325\076\330\103\047\105\332\107\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\030\067\040" +
    "\100\041\344\042\102\046\065\055\070\061\064\062\103" +
    "\063\101\001\001\000\004\037\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\032\354\033\041\036\351\043\053" +
    "\047\030\055\043\060\034\075\353\076\357\103\047\104" +
    "\355\106\352\107\356\001\001\000\034\032\354\033\041" +
    "\036\351\043\053\047\030\055\043\060\034\075\353\076" +
    "\357\103\047\104\355\106\373\107\356\001\001\000\004" +
    "\110\365\001\001\000\034\032\354\033\041\036\351\043" +
    "\053\047\030\055\043\060\034\075\353\076\357\103\047" +
    "\104\355\106\363\107\356\001\001\000\034\032\354\033" +
    "\041\036\351\043\053\047\030\055\043\060\034\075\353" +
    "\076\357\103\047\104\355\106\362\107\356\001\001\000" +
    "\002\001\001\000\034\032\354\033\041\036\351\043\053" +
    "\047\030\055\043\060\034\075\353\076\357\103\047\104" +
    "\355\106\361\107\356\001\001\000\034\032\354\033\041" +
    "\036\351\043\053\047\030\055\043\060\034\075\353\076" +
    "\357\103\047\104\355\106\360\107\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\032\354\033\041\036\351\043\053\047\030" +
    "\055\043\060\034\075\353\076\357\103\047\104\355\106" +
    "\371\107\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\032\326\033\041\036\322\043\053\047\030\055" +
    "\043\060\034\067\376\075\325\076\330\103\047\105\324" +
    "\107\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\117\u0108\001\001" +
    "\000\004\101\u0105\001\001\000\004\113\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u010f\116\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\023\006\320\017\026" +
    "\066\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0126\001\001\000\002\001\001\000\012\002" +
    "\023\006\u0128\017\026\065\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0130\001\001\000\002\001\001\000\012\002\023\006" +
    "\u0128\017\026\065\u0132\001\001\000\002\001\001\000\012" +
    "\002\023\006\u0128\017\026\065\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u0139\001\001\000\002\001\001\000\004\023" +
    "\u011c\001\001\000\002\001\001\000\004\011\u013d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0144\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0148\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u014f\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\023\006" +
    "\u0128\017\026\065\u0151\001\001\000\002\001\001\000\036" +
    "\007\u0153\031\032\032\050\033\041\035\046\036\031\043" +
    "\053\047\030\055\043\060\034\072\044\075\045\076\052" +
    "\103\047\001\001\000\002\001\001\000\004\020\u0155\001" +
    "\001\000\012\002\023\006\u0114\017\026\100\u0164\001\001" +
    "\000\012\002\023\006\u015c\017\026\021\u0163\001\001\000" +
    "\004\027\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\023\006\u015c\017\026\021\u015b\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\010\u015f\031\u015e" +
    "\032\050\033\041\035\046\036\031\043\053\047\030\055" +
    "\043\060\034\072\044\075\045\076\052\103\047\001\001" +
    "\000\004\037\u0160\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\u0162\031\u015e\032\050\033\041\035\046" +
    "\036\031\043\053\047\030\055\043\060\034\072\044\075" +
    "\045\076\052\103\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u0173\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u016c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u016f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u0175\001\001" +
    "\000\002\001\001\000\006\022\u0178\052\u0177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    CodigoIntermedio.limpiar();

    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // exit ::= EXIT WHEN parentesis FIN 
            {
              Object RESULT =null;
		
             /* Insertar etiqueta de salida */
             EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
             CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("j", null, null, et.getEtiqueta3()));
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // loop2 ::= exit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // loop2 ::= exit loop2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // loop2 ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // loop2 ::= ciclos loop2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // loop2 ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // loop2 ::= expresiones loop2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // loop ::= LOOP NT$2 loop2 END LOOP FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /* Saltar de vuelta al principio del LOOP */
            EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
            CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("j", null, null, et.getEtiqueta1()));
            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$2 ::= 
            {
              Object RESULT =null;

            /* Set Valores Iniciales */
            EtiNodo et = new EtiNodo(null, null, null, CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva());
            CodigoIntermedio.agregarEtiNodo(et);

            

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // while ::= WHILE parentesis LOOP loop2 END LOOP FIN 
            {
              Object RESULT =null;
		              
                /* Crear la primera etiqueta del ciclo */
                EtiNodo et = new EtiNodo(null, null, null, CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva(), CodigoIntermedio.getEtiquetaNueva());
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("etiq", et.getEtiqueta1()));

                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("goto", et.getEtiqueta3()));

                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("etiq", et.getEtiqueta2()));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // for ::= FOR ID IN NUMERO PUNTO PUNTO NUMERO LOOP NT$1 loop2 END LOOP FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                /* Salto de regreso a la iteracion */                
                EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("j", null, null, et.getEtiqueta1() ));

                /* Reciclar los temporales del EtiNodo */
                CodigoIntermedio.reciclarTemporales(et.getId2());
                CodigoIntermedio.reciclarTemporales(et.getId3());

                /* Borrar el EtiNodo */
                CodigoIntermedio.quitarUltimoEtiNodo();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                /* Set valores iniciales */
                String temporal1 = CodigoIntermedio.getTemporalNuevo();
                String temporal2 = CodigoIntermedio.getTemporalNuevo();
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("li", ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), null, temporal1 ));
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("li", ((Lexico_Sintactico_Semantico.Tokens) n2).getIdentificador(), null, temporal2 ));

                //CodigoIntermedio.reciclarTemporales(temporal1);
                //CodigoIntermedio.reciclarTemporales(temporal2);

                /* Instanciar EtiNodo con los 3 ids y las 3 etiquetas*/
                EtiNodo et = new EtiNodo( ((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador(),((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(),((Lexico_Sintactico_Semantico.Tokens) n2).getIdentificador(),CodigoIntermedio.getEtiquetaNueva(),CodigoIntermedio.getEtiquetaNueva(),CodigoIntermedio.getEtiquetaNueva() );
                CodigoIntermedio.agregarEtiNodo(et);

                /* Condicion salto fuera del FOR */
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("blt", ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), ((Lexico_Sintactico_Semantico.Tokens) n2).getIdentificador(), et.getEtiqueta3()));

                /* Etiqueta para entrar al cuerpo del FOR */
                CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("addi", ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), ((Lexico_Sintactico_Semantico.Tokens) n1).getIdentificador(), "1"));

                
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // f1_fun ::= ELSE cuerpofun f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // f1_fun ::= END IF FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1_fun",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // if_fun ::= IF parentesis THEN cuerpofun f1_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_fun",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // f1 ::= END IF FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // f1 ::= ELSE cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // if ::= IF parentesis THEN cuerpo f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // if ::= IF parentesis THEN f1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // condicion2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // condicion2 ::= OR parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // condicion2 ::= AND parentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // condicion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // condicion ::= boolean NT$0 condicion2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$0 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condicion ::= ID IGUAL boolean condicion2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("seq", ((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador(), null, CodigoIntermedio.getTemporalNuevo()));              
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condicion ::= operacion relacion operacion 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String temp = CodigoIntermedio.getTemporalNuevo();
                    EtiNodo et = CodigoIntermedio.getUltimoEtiNodo();
                    CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("if" + opr, op1.toString(), op2.toString(), et.getEtiqueta2()));
                    
                    /*if ( opr.equals(">") )                                            
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sgt", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));                    
                    else if ( opr.equals("<") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("slt", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals(">=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sge", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals("<=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sle", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals("=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("seq", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                    else if ( opr.equals("/=") )
                        CodigoIntermedio.codigoIntermedio.add(new Cuadruplo("sne", op1.toString(), op2.toString(), CodigoIntermedio.getTemporalNuevo()));
                        */                    
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parentesis ::= condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parentesis ::= PAR1 parentesis PAR2 condicion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ciclos ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ciclos ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ciclos ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ciclos ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // llamadaproc ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaproc",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // llamadaproc ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaproc",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // metodo ::= llamadaproc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // llamarmetodos ::= metodo FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamarmetodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operacion5 ::= id 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ((Lexico_Sintactico_Semantico.Tokens) ids).getIdentificador(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion5",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operacion4 ::= operacion5 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operacion4 ::= operacion4 ENTRE operacion5 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("DIV", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);
                   RESULT = temp;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operacion3 ::= operacion4 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operacion3 ::= operacion3 POR operacion4 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("MUL", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);
                   RESULT = temp;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operacion2 ::= operacion3 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operacion2 ::= operacion2 MENOS operacion3 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("SUB", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);
                   RESULT = temp;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operacion ::= operacion2 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operacion ::= operacion MAS operacion2 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String temp = CodigoIntermedio.getTemporalNuevo();
                   Cuadruplo cuadruplo = new Cuadruplo("ADD", a1.toString(), a2.toString(), temp);
                   CodigoIntermedio.reciclarTemporales(a1.toString());
                   CodigoIntermedio.reciclarTemporales(a2.toString());
                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);                                                         
                   RESULT = temp;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignar ::= boolean 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ((Lexico_Sintactico_Semantico.Tokens) ids).getIdentificador(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignar ::= operacion 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignacion ::= arreglo DOSPUNTOS IGUAL asignarsig 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignacion ::= ID DOSPUNTOS IGUAL asignarsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   String temp = CodigoIntermedio.getTemporalNuevo();
                   //Cuadruplo cuadruplo = new Cuadruplo("MOV", ((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador(), id2.toString(), temp);
                   Cuadruplo cuadruplo = new Cuadruplo("MOV", id2.toString(), null,((Lexico_Sintactico_Semantico.Tokens) id).getIdentificador());
                   CodigoIntermedio.reciclarTemporales(id2.toString());                   

                   CodigoIntermedio.codigoIntermedio.add(cuadruplo);                   
                   RESULT = temp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asignarsig ::= asignar FIN 
            {
              Object RESULT =null;
		int asileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = asi.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cadena ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cadena ::= asignar cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadena",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // leer_escribir ::= PUT PAR1 ID PAR1 PAR2 PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // leer_escribir ::= PUT PAR1 arreglo PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // leer_escribir ::= PUT PAR1 ID PAR2 FIN finlees 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // leer_escribir ::= PUT PAR1 COMILLA put2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // leer_escribir ::= GET PAR1 ID PAR1 PAR2 PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // leer_escribir ::= GET PAR1 arreglo PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // leer_escribir ::= GET PAR1 ID PAR2 FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leer_escribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // finlees ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finlees",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // finlees ::= NEWLINE FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finlees",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // put2 ::= cadena COMILLA PAR2 FIN finlees 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresiones ::= llamarmetodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresiones ::= leer_escribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresiones ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo ::= ciclos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpo ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo ::= ciclos cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo ::= expresiones cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion_arreglo5 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion_arreglo4 ::= NUMERO PUNTO PUNTO declaracion_arreglo5 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion_arreglo3 ::= NUMERO COMA declaracion_arreglo4 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion_arreglo3 ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaracion_arreglo2 ::= NUMERO PUNTO PUNTO declaracion_arreglo3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // procedimientoa ::= PROCEDURE ID procedimientoa2 procedimientofunb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // procedimientoa ::= FUNCTION ID procedimientofun procedimientofunb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // procedimientofunb ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // procedimientofunb ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofunb",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaraciones ::= procedimientoa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_arreglo ::= ARRAY PAR1 declaracion_arreglo2 PAR2 OF tipo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion_tipo ::= declaracion_tipo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion_tipo ::= declaracion_tipo2 DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion_tipo2 ::= DOSPUNTOS ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracion_tipo2 ::= DOSPUNTOS tipo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracion_tipo2 ::= COMA ID declaracion_tipo2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion2 ::= declaracion_tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO COMA NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracion ::= ID DOSPUNTOS ARRAY PAR1 NUMERO PUNTO PUNTO NUMERO PAR2 OF tipo FIN declaracionsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracion ::= ID declaracion2 FIN declaracionsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracion ::= TYPE ID IS declaracion_arreglo FIN declaracionsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracionsig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionsig",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionsig ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionsig",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion_tipo2_par ::= DOSPUNTOS par ID 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracion_tipo2_par ::= DOSPUNTOS par tipo 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion_tipo2_par ::= COMA ID masvariables 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // masvariables ::= declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masvariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracion_tipo_par ::= declaracion_tipo2_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion_tipo_par ::= declaracion_tipo2_par DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_par ::= declaracion_tipo_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_par",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros ::= ID declaracion_par parametrosig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametrosig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametrosig ::= FIN parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosig",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // procedimientoa2 ::= IS procedimientoa21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedimientoa2 ::= PAR1 parametros PAR2 IS procedimientoa21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // procedimientoa21 ::= BEGIN procedimientoa21sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedimientoa21 ::= declaraciones BEGIN procedimientoa21sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // procedimientoa21sig ::= cuerpo final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientoa21sig",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedimiento2 ::= IS procedimiento2sig2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // procedimiento2 ::= PAR1 parametros PAR2 IS procedimiento2sig2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedimiento2sig2 ::= BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedimiento2sig2 ::= declaraciones BEGIN procedimiento2sig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedimiento2sig ::= cuerpo END ID FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento2sig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // return ::= RETURN asignar FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return ::= RETURN FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpofun ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpofun ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpofun ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpofun ::= if_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpofun ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpofun ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpofun ::= loop cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpofun ::= while cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpofun ::= if_fun cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpofun ::= for cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpofun ::= expresiones cuerpofun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpofun",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo2 ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpo2 ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpo2 ::= if_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo2 ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo2 ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo2 ::= loop cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo2 ::= while cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo2 ::= if_fun cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo2 ::= for cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo2 ::= expresiones cuerpo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo2",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff ID 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_tipo2_par_fun ::= DOSPUNTOS ff tipo 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_tipo2_par_fun ::= COMA ID masvariablesfun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo2_par_fun",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // masvariablesfun ::= declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masvariablesfun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_tipo_par_fun ::= declaracion_tipo2_par_fun DOSPUNTOS IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_par_fun",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_par_fun ::= declaracion_tipo_par_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_par_fun",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_fun ::= ID declaracion_par_fun parametros_funsig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_fun",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_funsig ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_funsig ::= FIN parametros_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funsig",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedimientofun ::= RETURN tipo IS procedimientofun2 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedimientofun ::= PAR1 parametros_fun PAR2 RETURN tipo IS procedimientofun2 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedimientofun2 ::= BEGIN procedimientofun21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedimientofun2 ::= declaraciones BEGIN procedimientofun21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedimientofun21 ::= cuerpo2 return final 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientofun21",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedimiento ::= PROCEDURE ID procedimiento2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arreglo2 ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arreglo2 ::= asignar COMA arreglo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arreglo ::= ID PAR1 arreglo2 PAR2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT =id;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // final ::= END ID FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relacion ::= NOT 
            {
              Object RESULT =null;
		 RESULT = "not"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relacion ::= DISTINTO 
            {
              Object RESULT =null;
		 RESULT = "/="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relacion ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // relacion ::= MAYORIGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relacion ::= MENORIGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relacion ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relacion ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean ::= FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolean ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ff ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ff",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par ::= INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // par ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // par ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id ::= ID PAR1 PAR2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // id ::= arreglo 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // id ::= REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // id ::= NUMERO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

